

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Thu Jan 11 00:54:50 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51  0000                     
    52                           ; Version 1.42
    53                           ; Generated 13/04/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F25K80 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	idataBANK0
    88  002D5E                     __pidataBANK0:
    89                           	opt stack 0
    90                           
    91                           ;initializer for _device_name_two
    92  002D5E  0D                 	db	13
    93  002D5F  0A                 	db	10
    94  002D60  54                 	db	84
    95  002D61  65                 	db	101
    96  002D62  73                 	db	115
    97  002D63  74                 	db	116
    98  002D64  20                 	db	32
    99  002D65  53                 	db	83
   100  002D66  74                 	db	116
   101  002D67  61                 	db	97
   102  002D68  74                 	db	116
   103  002D69  65                 	db	101
   104  002D6A  6D                 	db	109
   105  002D6B  65                 	db	101
   106  002D6C  6E                 	db	110
   107  002D6D  74                 	db	116
   108  002D6E  20                 	db	32
   109  002D6F  54                 	db	84
   110  002D70  77                 	db	119
   111  002D71  6F                 	db	111
   112  002D72  00                 	db	0
   113                           
   114                           ;initializer for _inttext
   115  002D73  20                 	db	32
   116  002D74  20                 	db	32
   117  002D75  20                 	db	32
   118  002D76  49                 	db	73
   119  002D77  4E                 	db	78
   120  002D78  4E                 	db	78
   121  002D79  54                 	db	84
   122  002D7A  20                 	db	32
   123  002D7B  00                 	db	0
   124                           
   125                           ;initializer for _spacing
   126  002D7C  20                 	db	32
   127  002D7D  20                 	db	32
   128  002D7E  20                 	db	32
   129  002D7F  00                 	db	0
   130                           
   131                           ;initializer for _Newline
   132  002D80  0A                 	db	10
   133  002D81  0D                 	db	13
   134  002D82  00                 	db	0
   135                           
   136                           ;initializer for _device_name
   137  002D83  0A                 	db	10
   138  002D84  0D                 	db	13
   139  002D85  69                 	db	105
   140  002D86  47                 	db	71
   141  002D87  65                 	db	101
   142  002D88  65                 	db	101
   143  002D89  6B                 	db	107
   144  002D8A  20                 	db	32
   145  002D8B  4F                 	db	79
   146  002D8C  44                 	db	68
   147  002D8D  42                 	db	66
   148  002D8E  32                 	db	50
   149  002D8F  20                 	db	32
   150  002D90  4F                 	db	79
   151  002D91  70                 	db	112
   152  002D92  65                 	db	101
   153  002D93  6E                 	db	110
   154  002D94  20                 	db	32
   155  002D95  53                 	db	83
   156  002D96  6F                 	db	111
   157  002D97  75                 	db	117
   158  002D98  72                 	db	114
   159  002D99  63                 	db	99
   160  002D9A  65                 	db	101
   161  002D9B  64                 	db	100
   162  002D9C  20                 	db	32
   163  002D9D  45                 	db	69
   164  002D9E  4C                 	db	76
   165  002D9F  4D                 	db	77
   166  002DA0  33                 	db	51
   167  002DA1  32                 	db	50
   168  002DA2  37                 	db	55
   169  002DA3  20                 	db	32
   170  002DA4  43                 	db	67
   171  002DA5  6C                 	db	108
   172  002DA6  6F                 	db	111
   173  002DA7  6E                 	db	110
   174  002DA8  65                 	db	101
   175  002DA9  20                 	db	32
   176  002DAA  66                 	db	102
   177  002DAB  69                 	db	105
   178  002DAC  72                 	db	114
   179  002DAD  6D                 	db	109
   180  002DAE  77                 	db	119
   181  002DAF  61                 	db	97
   182  002DB0  72                 	db	114
   183  002DB1  65                 	db	101
   184  002DB2  0D                 	db	13
   185  002DB3  0A                 	db	10
   186  002DB4  00                 	db	0
   187                           
   188                           	psect	smallconst
   189  000F00                     __psmallconst:
   190                           	opt stack 0
   191  000F00  00                 	db	0
   192  000F01                     _dpowers:
   193                           	opt stack 0
   194  000F01  0001               	dw	1
   195  000F03  0000               	dw	0
   196  000F05  000A               	dw	10
   197  000F07  0000               	dw	0
   198  000F09  0064               	dw	100
   199  000F0B  0000               	dw	0
   200  000F0D  03E8               	dw	1000
   201  000F0F  0000               	dw	0
   202  000F11  2710               	dw	10000
   203  000F13  0000               	dw	0
   204  000F15  86A0               	dw	34464
   205  000F17  0001               	dw	1
   206  000F19  4240               	dw	16960
   207  000F1B  000F               	dw	15
   208  000F1D  9680               	dw	38528
   209  000F1F  0098               	dw	152
   210  000F21  E100               	dw	57600
   211  000F23  05F5               	dw	1525
   212  000F25  CA00               	dw	51712
   213  000F27  3B9A               	dw	15258
   214  000F29                     __end_of_dpowers:
   215                           	opt stack 0
   216  000F29                     __powers_:
   217                           	opt stack 0
   218  000F29  00                 	db	0
   219  000F2A  80                 	db	128
   220  000F2B  3F                 	db	63
   221  000F2C  00                 	db	0
   222  000F2D  20                 	db	32
   223  000F2E  41                 	db	65
   224  000F2F  00                 	db	0
   225  000F30  C8                 	db	200
   226  000F31  42                 	db	66
   227  000F32  00                 	db	0
   228  000F33  7A                 	db	122
   229  000F34  44                 	db	68
   230  000F35  40                 	db	64
   231  000F36  1C                 	db	28
   232  000F37  46                 	db	70
   233  000F38  50                 	db	80
   234  000F39  C3                 	db	195
   235  000F3A  47                 	db	71
   236  000F3B  24                 	db	36
   237  000F3C  74                 	db	116
   238  000F3D  49                 	db	73
   239  000F3E  97                 	db	151
   240  000F3F  18                 	db	24
   241  000F40  4B                 	db	75
   242  000F41  BC                 	db	188
   243  000F42  BE                 	db	190
   244  000F43  4C                 	db	76
   245  000F44  6B                 	db	107
   246  000F45  6E                 	db	110
   247  000F46  4E                 	db	78
   248  000F47  03                 	db	3
   249  000F48  15                 	db	21
   250  000F49  50                 	db	80
   251  000F4A  79                 	db	121
   252  000F4B  AD                 	db	173
   253  000F4C  60                 	db	96
   254  000F4D  F3                 	db	243
   255  000F4E  49                 	db	73
   256  000F4F  71                 	db	113
   257  000F50                     __end_of__powers_:
   258                           	opt stack 0
   259  000F50                     __npowers_:
   260                           	opt stack 0
   261  000F50  00                 	db	0
   262  000F51  80                 	db	128
   263  000F52  3F                 	db	63
   264  000F53  CD                 	db	205
   265  000F54  CC                 	db	204
   266  000F55  3D                 	db	61
   267  000F56  D7                 	db	215
   268  000F57  23                 	db	35
   269  000F58  3C                 	db	60
   270  000F59  12                 	db	18
   271  000F5A  83                 	db	131
   272  000F5B  3A                 	db	58
   273  000F5C  B7                 	db	183
   274  000F5D  D1                 	db	209
   275  000F5E  38                 	db	56
   276  000F5F  C6                 	db	198
   277  000F60  27                 	db	39
   278  000F61  37                 	db	55
   279  000F62  38                 	db	56
   280  000F63  86                 	db	134
   281  000F64  35                 	db	53
   282  000F65  C0                 	db	192
   283  000F66  D6                 	db	214
   284  000F67  33                 	db	51
   285  000F68  CC                 	db	204
   286  000F69  2B                 	db	43
   287  000F6A  32                 	db	50
   288  000F6B  70                 	db	112
   289  000F6C  89                 	db	137
   290  000F6D  30                 	db	48
   291  000F6E  E7                 	db	231
   292  000F6F  DB                 	db	219
   293  000F70  2E                 	db	46
   294  000F71  E5                 	db	229
   295  000F72  3C                 	db	60
   296  000F73  1E                 	db	30
   297  000F74  42                 	db	66
   298  000F75  A2                 	db	162
   299  000F76  0D                 	db	13
   300  000F77                     __end_of__npowers_:
   301                           	opt stack 0
   302  0000                     _ANCON0bits	set	3933
   303  0000                     _WPUB	set	3931
   304  0000                     _ANCON1	set	3932
   305  0000                     _ADRES	set	4035
   306  0000                     _TXREG1	set	4013
   307  0000                     _INTCONbits	set	4082
   308  0000                     _PIE1bits	set	3997
   309  0000                     _RCSTAbits	set	4011
   310  0000                     _IPR1bits	set	3999
   311  0000                     _TXSTAbits	set	4012
   312  0000                     _SPBRG	set	4015
   313  0000                     _RCREG	set	4014
   314  0000                     _PORTBbits	set	3969
   315  0000                     _RCREG1	set	4014
   316  0000                     _PIR1bits	set	3998
   317  0000                     _ADCON2bits	set	4032
   318  0000                     _ADCON1bits	set	4033
   319  0000                     _PORTAbits	set	3968
   320  0000                     _TRISAbits	set	3986
   321  0000                     _ADCON0bits	set	4034
   322  0000                     _ADCON0	set	4034
   323  0000                     _SPBRG1	set	4015
   324  0000                     _BAUDCON1bits	set	4007
   325  0000                     _TXSTA1bits	set	4012
   326  0000                     _TRISCbits	set	3988
   327  0000                     _RCSTA1bits	set	4011
   328  0000                     _TXREG	set	4013
   329  0000                     _PORTB	set	3969
   330  0000                     _TRISC	set	3988
   331  0000                     _TRISB	set	3987
   332  0000                     _RC1IF	set	31989
   333  0000                     _TXIF	set	31988
   334  000F77                     STR_1:
   335  000F77  56                 	db	86	;'V'
   336  000F78  6F                 	db	111	;'o'
   337  000F79  6C                 	db	108	;'l'
   338  000F7A  74                 	db	116	;'t'
   339  000F7B  61                 	db	97	;'a'
   340  000F7C  67                 	db	103	;'g'
   341  000F7D  65                 	db	101	;'e'
   342  000F7E  20                 	db	32
   343  000F7F  56                 	db	86	;'V'
   344  000F80  25                 	db	37
   345  000F81  36                 	db	54	;'6'
   346  000F82  2E                 	db	46
   347  000F83  32                 	db	50	;'2'
   348  000F84  66                 	db	102	;'f'
   349  000F85  0D                 	db	13
   350  000F86  0A                 	db	10
   351  000F87  00                 	db	0
   352  000F88                     STR_3:
   353  000F88  73                 	db	115	;'s'
   354  000F89  74                 	db	116	;'t'
   355  000F8A  61                 	db	97	;'a'
   356  000F8B  67                 	db	103	;'g'
   357  000F8C  65                 	db	101	;'e'
   358  000F8D  32                 	db	50	;'2'
   359  000F8E  0A                 	db	10
   360  000F8F  0D                 	db	13
   361  000F90  00                 	db	0
   362  000F91                     STR_2:
   363  000F91  20                 	db	32
   364  000F92  25                 	db	37
   365  000F93  63                 	db	99	;'c'
   366  000F94  0A                 	db	10
   367  000F95  0D                 	db	13
   368  000F96  00                 	db	0
   369  0000                     
   370                           ; #config settings
   371  000F97  00                 	db	0	; dummy byte at the end
   372  0000                     
   373                           	psect	cinit
   374  002E52                     __pcinit:
   375                           	opt stack 0
   376  002E52                     start_initialization:
   377                           	opt stack 0
   378  002E52                     __initialization:
   379                           	opt stack 0
   380                           
   381                           ; Initialize objects allocated to BANK0 (87 bytes)
   382                           ; load TBLPTR registers with __pidataBANK0
   383  002E52  0E5E               	movlw	low __pidataBANK0
   384  002E54  6EF6               	movwf	tblptrl,c
   385  002E56  0E2D               	movlw	high __pidataBANK0
   386  002E58  6EF7               	movwf	tblptrh,c
   387  002E5A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   388  002E5C  6EF8               	movwf	tblptru,c
   389  002E5E  EE00  F060         	lfsr	0,__pdataBANK0
   390  002E62  EE10 F057          	lfsr	1,87
   391  002E66                     copy_data0:
   392  002E66  0009               	tblrd		*+
   393  002E68  CFF5 FFEE          	movff	tablat,postinc0
   394  002E6C  50E5               	movf	postdec1,w,c
   395  002E6E  50E1               	movf	fsr1l,w,c
   396  002E70  E1FA               	bnz	copy_data0
   397                           
   398                           ; Clear objects allocated to BANK0 (42 bytes)
   399  002E72  EE00  F0B7         	lfsr	0,__pbssBANK0
   400  002E76  0E2A               	movlw	42
   401  002E78                     clear_0:
   402  002E78  6AEE               	clrf	postinc0,c
   403  002E7A  06E8               	decf	wreg,f,c
   404  002E7C  E1FD               	bnz	clear_0
   405                           
   406                           ; Clear objects allocated to COMRAM (16 bytes)
   407  002E7E  EE00  F04E         	lfsr	0,__pbssCOMRAM
   408  002E82  0E10               	movlw	16
   409  002E84                     clear_1:
   410  002E84  6AEE               	clrf	postinc0,c
   411  002E86  06E8               	decf	wreg,f,c
   412  002E88  E1FD               	bnz	clear_1
   413  002E8A                     end_of_initialization:
   414                           	opt stack 0
   415  002E8A                     __end_of__initialization:
   416                           	opt stack 0
   417  002E8A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   418  002E8C  6EF8               	movwf	tblptru,c
   419  002E8E  0100               	movlb	0
   420  002E90  EF60  F013         	goto	_main	;jump to C main() function
   421                           tblptru	equ	0xFF8
   422                           tblptrh	equ	0xFF7
   423                           tblptrl	equ	0xFF6
   424                           tablat	equ	0xFF5
   425                           postinc0	equ	0xFEE
   426                           wreg	equ	0xFE8
   427                           postdec1	equ	0xFE5
   428                           fsr1l	equ	0xFE1
   429                           
   430                           	psect	bssCOMRAM
   431  00004E                     __pbssCOMRAM:
   432                           	opt stack 0
   433  00004E                     _volts:
   434                           	opt stack 0
   435  00004E                     	ds	3
   436  000051                     _heartbeatCount:
   437                           	opt stack 0
   438  000051                     	ds	2
   439  000053                     _USART1_Status:
   440                           	opt stack 0
   441  000053                     	ds	1
   442  000054                     _vUARTIntRxBufRdPtr:
   443                           	opt stack 0
   444  000054                     	ds	1
   445  000055                     _vUARTIntRxBufWrPtr:
   446                           	opt stack 0
   447  000055                     	ds	1
   448  000056                     _vUARTIntRxBufDataCnt:
   449                           	opt stack 0
   450  000056                     	ds	1
   451  000057                     _vUARTIntTxBufRdPtr:
   452                           	opt stack 0
   453  000057                     	ds	1
   454  000058                     _vUARTIntTxBufWrPtr:
   455                           	opt stack 0
   456  000058                     	ds	1
   457  000059                     _vUARTIntTxBufDataCnt:
   458                           	opt stack 0
   459  000059                     	ds	1
   460  00005A                     _vUARTIntStatus:
   461                           	opt stack 0
   462  00005A                     	ds	1
   463  00005B                     _newvals:
   464                           	opt stack 0
   465  00005B                     	ds	1
   466  00005C                     _ADCValue:
   467                           	opt stack 0
   468  00005C                     	ds	2
   469                           tblptru	equ	0xFF8
   470                           tblptrh	equ	0xFF7
   471                           tblptrl	equ	0xFF6
   472                           tablat	equ	0xFF5
   473                           postinc0	equ	0xFEE
   474                           wreg	equ	0xFE8
   475                           postdec1	equ	0xFE5
   476                           fsr1l	equ	0xFE1
   477                           
   478                           	psect	bssBANK0
   479  0000B7                     __pbssBANK0:
   480                           	opt stack 0
   481  0000B7                     _vUARTIntRxBuffer:
   482                           	opt stack 0
   483  0000B7                     	ds	10
   484  0000C1                     _vUARTIntTxBuffer:
   485                           	opt stack 0
   486  0000C1                     	ds	10
   487  0000CB                     _ADCStringValTwo:
   488                           	opt stack 0
   489  0000CB                     	ds	4
   490  0000CF                     _ADCStringVal:
   491                           	opt stack 0
   492  0000CF                     	ds	4
   493  0000D3                     _stringval:
   494                           	opt stack 0
   495  0000D3                     	ds	10
   496  0000DD                     returnString@processedString:
   497                           	opt stack 0
   498  0000DD                     	ds	4
   499                           tblptru	equ	0xFF8
   500                           tblptrh	equ	0xFF7
   501                           tblptrl	equ	0xFF6
   502                           tablat	equ	0xFF5
   503                           postinc0	equ	0xFEE
   504                           wreg	equ	0xFE8
   505                           postdec1	equ	0xFE5
   506                           fsr1l	equ	0xFE1
   507                           
   508                           	psect	dataBANK0
   509  000060                     __pdataBANK0:
   510                           	opt stack 0
   511  000060                     _device_name_two:
   512                           	opt stack 0
   513  000060                     	ds	21
   514  000075                     _inttext:
   515                           	opt stack 0
   516  000075                     	ds	9
   517  00007E                     _spacing:
   518                           	opt stack 0
   519  00007E                     	ds	4
   520  000082                     _Newline:
   521                           	opt stack 0
   522  000082                     	ds	3
   523  000085                     _device_name:
   524                           	opt stack 0
   525  000085                     	ds	50
   526                           tblptru	equ	0xFF8
   527                           tblptrh	equ	0xFF7
   528                           tblptrl	equ	0xFF6
   529                           tablat	equ	0xFF5
   530                           postinc0	equ	0xFEE
   531                           wreg	equ	0xFE8
   532                           postdec1	equ	0xFE5
   533                           fsr1l	equ	0xFE1
   534                           
   535                           	psect	cstackBANK0
   536  0000E1                     __pcstackBANK0:
   537                           	opt stack 0
   538  0000E1                     _printf$1834:
   539                           	opt stack 0
   540                           
   541                           ; 3 bytes @ 0x0
   542  0000E1                     	ds	3
   543  0000E4                     printf@cp:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x3
   547  0000E4                     	ds	2
   548  0000E6                     printf@ap:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x5
   552  0000E6                     	ds	2
   553  0000E8                     printf@len:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x7
   557  0000E8                     	ds	2
   558  0000EA                     printf@val:
   559                           	opt stack 0
   560                           
   561                           ; 4 bytes @ 0x9
   562  0000EA                     	ds	4
   563  0000EE                     printf@flag:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0xD
   567  0000EE                     	ds	2
   568  0000F0                     printf@tmpval:
   569                           	opt stack 0
   570                           
   571                           ; 4 bytes @ 0xF
   572  0000F0                     	ds	4
   573  0000F4                     printf@exp:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x13
   577  0000F4                     	ds	2
   578  0000F6                     printf@width:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x15
   582  0000F6                     	ds	2
   583  0000F8                     printf@fval:
   584                           	opt stack 0
   585                           
   586                           ; 3 bytes @ 0x17
   587  0000F8                     	ds	3
   588  0000FB                     printf@prec:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x1A
   592  0000FB                     	ds	2
   593  0000FD                     printf@c:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x1C
   597  0000FD                     	ds	1
   598                           tblptru	equ	0xFF8
   599                           tblptrh	equ	0xFF7
   600                           tblptrl	equ	0xFF6
   601                           tablat	equ	0xFF5
   602                           postinc0	equ	0xFEE
   603                           wreg	equ	0xFE8
   604                           postdec1	equ	0xFE5
   605                           fsr1l	equ	0xFE1
   606                           
   607                           	psect	cstackCOMRAM
   608  000001                     __pcstackCOMRAM:
   609                           	opt stack 0
   610  000001                     ??_isdigit:
   611  000001                     ??_Heartbeat:
   612  000001                     ?_ADCRead:
   613                           	opt stack 0
   614  000001                     ?___awmod:
   615                           	opt stack 0
   616  000001                     ?___lwdiv:
   617                           	opt stack 0
   618  000001                     ?___lwmod:
   619                           	opt stack 0
   620  000001                     ?___ftpack:
   621                           	opt stack 0
   622  000001                     ?___ftneg:
   623                           	opt stack 0
   624  000001                     ?__tdiv_to_l_:
   625                           	opt stack 0
   626  000001                     ?__div_to_l_:
   627                           	opt stack 0
   628  000001                     ?___aldiv:
   629                           	opt stack 0
   630  000001                     ?___lldiv:
   631                           	opt stack 0
   632  000001                     ?___llmod:
   633                           	opt stack 0
   634  000001                     putch@data:
   635                           	opt stack 0
   636  000001                     Write1USART@data:
   637                           	opt stack 0
   638  000001                     ___awmod@dividend:
   639                           	opt stack 0
   640  000001                     ___lwdiv@dividend:
   641                           	opt stack 0
   642  000001                     ___lwmod@dividend:
   643                           	opt stack 0
   644  000001                     __div_to_l_@f1:
   645                           	opt stack 0
   646  000001                     ___ftpack@arg:
   647                           	opt stack 0
   648  000001                     __tdiv_to_l_@f1:
   649                           	opt stack 0
   650  000001                     ___ftge@ff1:
   651                           	opt stack 0
   652  000001                     ___ftneg@f1:
   653                           	opt stack 0
   654  000001                     ___aldiv@dividend:
   655                           	opt stack 0
   656  000001                     ___lldiv@dividend:
   657                           	opt stack 0
   658  000001                     ___llmod@dividend:
   659                           	opt stack 0
   660                           
   661                           ; 4 bytes @ 0x0
   662  000001                     	ds	1
   663  000002                     _isdigit$1437:
   664                           	opt stack 0
   665                           
   666                           ; 1 bytes @ 0x1
   667  000002                     	ds	1
   668  000003                     ADCRead@ch:
   669                           	opt stack 0
   670  000003                     isdigit@c:
   671                           	opt stack 0
   672  000003                     ___awmod@divisor:
   673                           	opt stack 0
   674  000003                     ___lwdiv@divisor:
   675                           	opt stack 0
   676  000003                     ___lwmod@divisor:
   677                           	opt stack 0
   678                           
   679                           ; 2 bytes @ 0x2
   680  000003                     	ds	1
   681  000004                     ___ftpack@exp:
   682                           	opt stack 0
   683  000004                     __div_to_l_@f2:
   684                           	opt stack 0
   685  000004                     __tdiv_to_l_@f2:
   686                           	opt stack 0
   687  000004                     ___ftge@ff2:
   688                           	opt stack 0
   689                           
   690                           ; 3 bytes @ 0x3
   691  000004                     	ds	1
   692  000005                     ___awmod@counter:
   693                           	opt stack 0
   694  000005                     ___ftpack@sign:
   695                           	opt stack 0
   696  000005                     ___lwmod@counter:
   697                           	opt stack 0
   698  000005                     ___lwdiv@quotient:
   699                           	opt stack 0
   700  000005                     ___aldiv@divisor:
   701                           	opt stack 0
   702  000005                     ___lldiv@divisor:
   703                           	opt stack 0
   704  000005                     ___llmod@divisor:
   705                           	opt stack 0
   706                           
   707                           ; 4 bytes @ 0x4
   708  000005                     	ds	1
   709  000006                     ??___ftpack:
   710  000006                     ___awmod@sign:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0x5
   714  000006                     	ds	1
   715  000007                     ??__tdiv_to_l_:
   716  000007                     ??___ftge:
   717  000007                     ?___awdiv:
   718                           	opt stack 0
   719  000007                     ___lwdiv@counter:
   720                           	opt stack 0
   721  000007                     ___awdiv@dividend:
   722                           	opt stack 0
   723  000007                     __div_to_l_@quot:
   724                           	opt stack 0
   725                           
   726                           ; 4 bytes @ 0x6
   727  000007                     	ds	1
   728  000008                     utoa@buf:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x7
   732  000008                     	ds	1
   733  000009                     ?___lltoft:
   734                           	opt stack 0
   735  000009                     ?___lwtoft:
   736                           	opt stack 0
   737  000009                     ___aldiv@counter:
   738                           	opt stack 0
   739  000009                     ___llmod@counter:
   740                           	opt stack 0
   741  000009                     ___awdiv@divisor:
   742                           	opt stack 0
   743  000009                     ___lwtoft@c:
   744                           	opt stack 0
   745  000009                     ___lldiv@quotient:
   746                           	opt stack 0
   747  000009                     ___lltoft@c:
   748                           	opt stack 0
   749                           
   750                           ; 4 bytes @ 0x8
   751  000009                     	ds	1
   752  00000A                     ___aldiv@sign:
   753                           	opt stack 0
   754  00000A                     utoa@val:
   755                           	opt stack 0
   756  00000A                     __tdiv_to_l_@quot:
   757                           	opt stack 0
   758                           
   759                           ; 4 bytes @ 0x9
   760  00000A                     	ds	1
   761  00000B                     ___awdiv@counter:
   762                           	opt stack 0
   763  00000B                     __div_to_l_@cntr:
   764                           	opt stack 0
   765  00000B                     ___aldiv@quotient:
   766                           	opt stack 0
   767                           
   768                           ; 4 bytes @ 0xA
   769  00000B                     	ds	1
   770  00000C                     ___awdiv@sign:
   771                           	opt stack 0
   772  00000C                     __div_to_l_@exp1:
   773                           	opt stack 0
   774  00000C                     utoa@base:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0xB
   778  00000C                     	ds	1
   779  00000D                     ??___lltoft:
   780  00000D                     ___lldiv@counter:
   781                           	opt stack 0
   782  00000D                     ___awdiv@quotient:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0xC
   786  00000D                     	ds	1
   787  00000E                     __tdiv_to_l_@cntr:
   788                           	opt stack 0
   789  00000E                     utoa@v:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0xD
   793  00000E                     	ds	1
   794  00000F                     ?___wmul:
   795                           	opt stack 0
   796  00000F                     __tdiv_to_l_@exp1:
   797                           	opt stack 0
   798  00000F                     ___wmul@multiplier:
   799                           	opt stack 0
   800  00000F                     UART1Init@baud_rate:
   801                           	opt stack 0
   802                           
   803                           ; 4 bytes @ 0xE
   804  00000F                     	ds	1
   805  000010                     utoa@c:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0xF
   809  000010                     	ds	1
   810  000011                     ?_itoa:
   811                           	opt stack 0
   812  000011                     ___lltoft@exp:
   813                           	opt stack 0
   814  000011                     ___wmul@multiplicand:
   815                           	opt stack 0
   816  000011                     itoa@buf:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x10
   820  000011                     	ds	2
   821  000013                     ___wmul@product:
   822                           	opt stack 0
   823  000013                     itoa@val:
   824                           	opt stack 0
   825  000013                     _UART1Init$1830:
   826                           	opt stack 0
   827                           
   828                           ; 4 bytes @ 0x12
   829  000013                     	ds	2
   830  000015                     ?___ftmul:
   831                           	opt stack 0
   832  000015                     itoa@base:
   833                           	opt stack 0
   834  000015                     ___ftmul@f1:
   835                           	opt stack 0
   836                           
   837                           ; 3 bytes @ 0x14
   838  000015                     	ds	2
   839  000017                     itoa@cp:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0x16
   843  000017                     	ds	1
   844  000018                     ___ftmul@f2:
   845                           	opt stack 0
   846                           
   847                           ; 3 bytes @ 0x17
   848  000018                     	ds	1
   849  000019                     puts1USART@data:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x18
   853  000019                     	ds	2
   854  00001B                     ??___ftmul:
   855                           
   856                           ; 1 bytes @ 0x1A
   857  00001B                     	ds	3
   858  00001E                     ___ftmul@exp:
   859                           	opt stack 0
   860                           
   861                           ; 1 bytes @ 0x1D
   862  00001E                     	ds	1
   863  00001F                     ___ftmul@f3_as_product:
   864                           	opt stack 0
   865                           
   866                           ; 3 bytes @ 0x1E
   867  00001F                     	ds	3
   868  000022                     ___ftmul@cntr:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0x21
   872  000022                     	ds	1
   873  000023                     ___ftmul@sign:
   874                           	opt stack 0
   875                           
   876                           ; 1 bytes @ 0x22
   877  000023                     	ds	1
   878  000024                     ?___ftdiv:
   879                           	opt stack 0
   880  000024                     ?_fround:
   881                           	opt stack 0
   882  000024                     ?_scale:
   883                           	opt stack 0
   884  000024                     ___ftdiv@f1:
   885                           	opt stack 0
   886                           
   887                           ; 3 bytes @ 0x23
   888  000024                     	ds	3
   889  000027                     ___ftdiv@f2:
   890                           	opt stack 0
   891  000027                     _fround$1832:
   892                           	opt stack 0
   893  000027                     _scale$1833:
   894                           	opt stack 0
   895                           
   896                           ; 3 bytes @ 0x26
   897  000027                     	ds	3
   898  00002A                     ??___ftdiv:
   899  00002A                     scale@scl:
   900                           	opt stack 0
   901  00002A                     _fround$1831:
   902                           	opt stack 0
   903                           
   904                           ; 3 bytes @ 0x29
   905  00002A                     	ds	1
   906  00002B                     ?___fttol:
   907                           	opt stack 0
   908  00002B                     ___fttol@f1:
   909                           	opt stack 0
   910                           
   911                           ; 3 bytes @ 0x2A
   912  00002B                     	ds	2
   913  00002D                     fround@prec:
   914                           	opt stack 0
   915  00002D                     ___ftdiv@cntr:
   916                           	opt stack 0
   917                           
   918                           ; 1 bytes @ 0x2C
   919  00002D                     	ds	1
   920  00002E                     ?___ftadd:
   921                           	opt stack 0
   922  00002E                     ___ftadd@f1:
   923                           	opt stack 0
   924  00002E                     ___ftdiv@f3:
   925                           	opt stack 0
   926                           
   927                           ; 3 bytes @ 0x2D
   928  00002E                     	ds	1
   929  00002F                     ??___fttol:
   930                           
   931                           ; 1 bytes @ 0x2E
   932  00002F                     	ds	2
   933  000031                     ___ftdiv@exp:
   934                           	opt stack 0
   935  000031                     ___ftadd@f2:
   936                           	opt stack 0
   937                           
   938                           ; 3 bytes @ 0x30
   939  000031                     	ds	1
   940  000032                     ___ftdiv@sign:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x31
   944  000032                     	ds	2
   945  000034                     ??___ftadd:
   946  000034                     ___fttol@sign1:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x33
   950  000034                     	ds	1
   951  000035                     ___fttol@lval:
   952                           	opt stack 0
   953                           
   954                           ; 4 bytes @ 0x34
   955  000035                     	ds	2
   956  000037                     ___ftadd@sign:
   957                           	opt stack 0
   958                           
   959                           ; 1 bytes @ 0x36
   960  000037                     	ds	1
   961  000038                     ___ftadd@exp2:
   962                           	opt stack 0
   963                           
   964                           ; 1 bytes @ 0x37
   965  000038                     	ds	1
   966  000039                     ___ftadd@exp1:
   967                           	opt stack 0
   968  000039                     ___fttol@exp1:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x38
   972  000039                     	ds	1
   973  00003A                     ?___ftsub:
   974                           	opt stack 0
   975  00003A                     ___ftsub@f1:
   976                           	opt stack 0
   977                           
   978                           ; 3 bytes @ 0x39
   979  00003A                     	ds	3
   980  00003D                     ___ftsub@f2:
   981                           	opt stack 0
   982                           
   983                           ; 3 bytes @ 0x3C
   984  00003D                     	ds	3
   985  000040                     ?_printf:
   986                           	opt stack 0
   987  000040                     printf@f:
   988                           	opt stack 0
   989                           
   990                           ; 2 bytes @ 0x3F
   991  000040                     	ds	5
   992  000045                     ??_printf:
   993                           
   994                           ; 1 bytes @ 0x44
   995  000045                     	ds	6
   996  00004B                     main@vale:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x4A
  1000  00004B                     	ds	2
  1001  00004D                     main@AT_COMMAND:
  1002                           	opt stack 0
  1003                           
  1004                           ; 1 bytes @ 0x4C
  1005  00004D                     	ds	1
  1006                           tblptru	equ	0xFF8
  1007                           tblptrh	equ	0xFF7
  1008                           tblptrl	equ	0xFF6
  1009                           tablat	equ	0xFF5
  1010                           postinc0	equ	0xFEE
  1011                           wreg	equ	0xFE8
  1012                           postdec1	equ	0xFE5
  1013                           fsr1l	equ	0xFE1
  1014                           
  1015 ;;
  1016 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1017 ;;
  1018 ;; *************** function _main *****************
  1019 ;; Defined at:
  1020 ;;		line 273 in file "main.c"
  1021 ;; Parameters:    Size  Location     Type
  1022 ;;		None
  1023 ;; Auto vars:     Size  Location     Type
  1024 ;;  voltage         3    0        volatile float 
  1025 ;;  vale            2   74[COMRAM] unsigned int 
  1026 ;;  stats           2    0        unsigned int 
  1027 ;;  AT_COMMAND      1   76[COMRAM] volatile unsigned char 
  1028 ;; Return value:  Size  Location     Type
  1029 ;;                  1    wreg      void 
  1030 ;; Registers used:
  1031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1038 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1040 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1041 ;;Total ram usage:        3 bytes
  1042 ;; Hardware stack levels required when called:    5
  1043 ;; This function calls:
  1044 ;;		_Heartbeat
  1045 ;;		_UART1Init
  1046 ;;		_config_adc
  1047 ;;		_do_voltage
  1048 ;;		_itoa
  1049 ;;		_printf
  1050 ;;		_puts1USART
  1051 ;;		_setup
  1052 ;; This function is called by:
  1053 ;;		Startup code after reset
  1054 ;; This function uses a non-reentrant model
  1055 ;;
  1056                           
  1057                           	psect	text0
  1058  0026C0                     __ptext0:
  1059                           	opt stack 0
  1060  0026C0                     _main:
  1061                           	opt stack 26
  1062                           
  1063                           ;main.c: 274: setup();
  1064                           
  1065                           ;incstack = 0
  1066  0026C0  EC30  F018         	call	_setup	;wreg free
  1067                           
  1068                           ;main.c: 275: unsigned int vale=0;
  1069  0026C4  0E00               	movlw	0
  1070  0026C6  6E4C               	movwf	main@vale+1,c
  1071  0026C8  0E00               	movlw	0
  1072  0026CA  6E4B               	movwf	main@vale,c
  1073                           
  1074                           ;main.c: 276: unsigned int stats;
  1075                           ;main.c: 277: volatile float voltage;
  1076                           ;main.c: 278: volatile char AT_COMMAND;
  1077                           ;main.c: 280: config_adc();
  1078  0026CC  ECC0  F017         	call	_config_adc	;wreg free
  1079                           
  1080                           ;main.c: 282: UART1Init(38400);
  1081  0026D0  0E00               	movlw	0
  1082  0026D2  6E0F               	movwf	UART1Init@baud_rate,c
  1083  0026D4  0E96               	movlw	150
  1084  0026D6  6E10               	movwf	UART1Init@baud_rate+1,c
  1085  0026D8  0E00               	movlw	0
  1086  0026DA  6E11               	movwf	UART1Init@baud_rate+2,c
  1087  0026DC  0E00               	movlw	0
  1088  0026DE  6E12               	movwf	UART1Init@baud_rate+3,c
  1089  0026E0  EC17  F016         	call	_UART1Init	;wreg free
  1090                           
  1091                           ;main.c: 283: puts1USART((char *)device_name);
  1092  0026E4  0E85               	movlw	low _device_name
  1093  0026E6  6E19               	movwf	puts1USART@data,c
  1094  0026E8  0E00               	movlw	high _device_name
  1095  0026EA  6E1A               	movwf	puts1USART@data+1,c
  1096  0026EC  ECD7  F017         	call	_puts1USART	;wreg free
  1097  0026F0                     l3477:
  1098                           
  1099                           ;main.c: 285: Heartbeat();
  1100  0026F0  EC8B  F017         	call	_Heartbeat	;wreg free
  1101  0026F4                     l149:
  1102  0026F4  A89E               	btfss	3998,4,c	;volatile
  1103  0026F6  D7FE               	goto	l149
  1104                           
  1105                           ;main.c: 291: if (RC1IF==1)
  1106  0026F8  AA9E               	btfss	3998,5,c	;volatile
  1107  0026FA  D7FA               	goto	l3477
  1108                           
  1109                           ;main.c: 292: {
  1110                           ;main.c: 295: AT_COMMAND=RCREG;
  1111  0026FC  CFAE F04D          	movff	4014,main@AT_COMMAND	;volatile
  1112                           
  1113                           ;main.c: 299: puts1USART(itoa(stringval,AT_COMMAND,10));
  1114  002700  0ED3               	movlw	low _stringval
  1115  002702  6E11               	movwf	itoa@buf,c
  1116  002704  0E00               	movlw	high _stringval
  1117  002706  6E12               	movwf	itoa@buf+1,c
  1118  002708  C04D  F013         	movff	main@AT_COMMAND,itoa@val	;volatile
  1119  00270C  6A14               	clrf	itoa@val+1,c
  1120  00270E  0E00               	movlw	0
  1121  002710  6E16               	movwf	itoa@base+1,c
  1122  002712  0E0A               	movlw	10
  1123  002714  6E15               	movwf	itoa@base,c
  1124  002716  EC04  F017         	call	_itoa	;wreg free
  1125  00271A  C011  F019         	movff	?_itoa,puts1USART@data
  1126  00271E  C012  F01A         	movff	?_itoa+1,puts1USART@data+1
  1127  002722  ECD7  F017         	call	_puts1USART	;wreg free
  1128                           
  1129                           ;main.c: 301: printf(" %c\n\r", AT_COMMAND);
  1130  002726  0E91               	movlw	low STR_2
  1131  002728  6E40               	movwf	printf@f,c
  1132  00272A  0E0F               	movlw	high STR_2
  1133  00272C  6E41               	movwf	printf@f+1,c
  1134  00272E  C04D  F042         	movff	main@AT_COMMAND,?_printf+2	;volatile
  1135  002732  6A43               	clrf	?_printf+3,c
  1136  002734  ECCC  F007         	call	_printf	;wreg free
  1137                           
  1138                           ;main.c: 305: if (AT_COMMAND=='v')
  1139  002738  0E76               	movlw	118
  1140  00273A  184D               	xorwf	main@AT_COMMAND,w,c	;volatile
  1141  00273C  A4D8               	btfss	status,2,c
  1142  00273E  D00A               	goto	l3493
  1143                           
  1144                           ;main.c: 306: {
  1145                           ;main.c: 307: do_voltage();
  1146  002740  ECA3  F015         	call	_do_voltage	;wreg free
  1147                           
  1148                           ;main.c: 308: AT_COMMAND=0;
  1149  002744  0E00               	movlw	0
  1150  002746  6E4D               	movwf	main@AT_COMMAND,c	;volatile
  1151                           
  1152                           ;main.c: 309: printf("stage2\n\r");
  1153  002748  0E88               	movlw	low STR_3
  1154  00274A  6E40               	movwf	printf@f,c
  1155  00274C  0E0F               	movlw	high STR_3
  1156  00274E  6E41               	movwf	printf@f+1,c
  1157  002750  ECCC  F007         	call	_printf	;wreg free
  1158  002754                     l3493:
  1159                           
  1160                           ;main.c: 310: }
  1161                           ;main.c: 311: if (AT_COMMAND=='c')
  1162  002754  0E63               	movlw	99
  1163  002756  184D               	xorwf	main@AT_COMMAND,w,c	;volatile
  1164  002758  A4D8               	btfss	status,2,c
  1165  00275A  D7CA               	goto	l3477
  1166                           
  1167                           ;main.c: 312: {
  1168                           ;main.c: 315: puts1USART( itoa(stringval,heartbeatCount,10));
  1169  00275C  0ED3               	movlw	low _stringval
  1170  00275E  6E11               	movwf	itoa@buf,c
  1171  002760  0E00               	movlw	high _stringval
  1172  002762  6E12               	movwf	itoa@buf+1,c
  1173  002764  C051  F013         	movff	_heartbeatCount,itoa@val	;volatile
  1174  002768  C052  F014         	movff	_heartbeatCount+1,itoa@val+1	;volatile
  1175  00276C  0E00               	movlw	0
  1176  00276E  6E16               	movwf	itoa@base+1,c
  1177  002770  0E0A               	movlw	10
  1178  002772  6E15               	movwf	itoa@base,c
  1179  002774  EC04  F017         	call	_itoa	;wreg free
  1180  002778  C011  F019         	movff	?_itoa,puts1USART@data
  1181  00277C  C012  F01A         	movff	?_itoa+1,puts1USART@data+1
  1182  002780  ECD7  F017         	call	_puts1USART	;wreg free
  1183                           
  1184                           ;main.c: 316: printf("\n\r");
  1185  002784  0E8E               	movlw	low (STR_3+6)
  1186  002786  6E40               	movwf	printf@f,c
  1187  002788  0E0F               	movlw	high (STR_3+6)
  1188  00278A  6E41               	movwf	printf@f+1,c
  1189  00278C  ECCC  F007         	call	_printf	;wreg free
  1190  002790  D7AF               	goto	l3477
  1191  002792                     __end_of_main:
  1192                           	opt stack 0
  1193                           tblptru	equ	0xFF8
  1194                           tblptrh	equ	0xFF7
  1195                           tblptrl	equ	0xFF6
  1196                           tablat	equ	0xFF5
  1197                           postinc0	equ	0xFEE
  1198                           wreg	equ	0xFE8
  1199                           postdec1	equ	0xFE5
  1200                           fsr1l	equ	0xFE1
  1201                           status	equ	0xFD8
  1202                           
  1203 ;; *************** function _setup *****************
  1204 ;; Defined at:
  1205 ;;		line 99 in file "main.c"
  1206 ;; Parameters:    Size  Location     Type
  1207 ;;		None
  1208 ;; Auto vars:     Size  Location     Type
  1209 ;;		None
  1210 ;; Return value:  Size  Location     Type
  1211 ;;                  1    wreg      void 
  1212 ;; Registers used:
  1213 ;;		wreg, status,2
  1214 ;; Tracked objects:
  1215 ;;		On entry : 0/0
  1216 ;;		On exit  : 0/0
  1217 ;;		Unchanged: 0/0
  1218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1223 ;;Total ram usage:        0 bytes
  1224 ;; Hardware stack levels used:    1
  1225 ;; This function calls:
  1226 ;;		Nothing
  1227 ;; This function is called by:
  1228 ;;		_main
  1229 ;; This function uses a non-reentrant model
  1230 ;;
  1231                           
  1232                           	psect	text1
  1233  003060                     __ptext1:
  1234                           	opt stack 0
  1235  003060                     _setup:
  1236                           	opt stack 30
  1237                           
  1238                           ;main.c: 101: TRISB = 0b00000000;
  1239                           
  1240                           ;incstack = 0
  1241  003060  0E00               	movlw	0
  1242  003062  6E93               	movwf	3987,c	;volatile
  1243                           
  1244                           ;main.c: 102: TRISC = 0;
  1245  003064  0E00               	movlw	0
  1246  003066  6E94               	movwf	3988,c	;volatile
  1247                           
  1248                           ;main.c: 104: ANCON1 = 0;
  1249  003068  0E00               	movlw	0
  1250  00306A  010F               	movlb	15	; () banked
  1251  00306C  6F5C               	movwf	92,b	;volatile
  1252                           
  1253                           ;main.c: 105: WPUB = 0b00000000;
  1254  00306E  0E00               	movlw	0
  1255  003070  010F               	movlb	15	; () banked
  1256  003072  6F5B               	movwf	91,b	;volatile
  1257                           
  1258                           ;main.c: 108: PORTB=0b1111111;
  1259  003074  0E7F               	movlw	127
  1260  003076  6E81               	movwf	3969,c	;volatile
  1261                           
  1262                           ; BSR set to: 15
  1263  003078  0012               	return		;funcret
  1264  00307A                     __end_of_setup:
  1265                           	opt stack 0
  1266                           tblptru	equ	0xFF8
  1267                           tblptrh	equ	0xFF7
  1268                           tblptrl	equ	0xFF6
  1269                           tablat	equ	0xFF5
  1270                           postinc0	equ	0xFEE
  1271                           wreg	equ	0xFE8
  1272                           postdec1	equ	0xFE5
  1273                           fsr1l	equ	0xFE1
  1274                           status	equ	0xFD8
  1275                           
  1276 ;; *************** function _puts1USART *****************
  1277 ;; Defined at:
  1278 ;;		line 14 in file "/opt/microchip/xc8/v1.42/sources/pic18/plib/USART/u1puts.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;  data            2   24[COMRAM] PTR unsigned char 
  1281 ;;		 -> stringval(10), device_name(50), 
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;		None
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  1    wreg      void 
  1286 ;; Registers used:
  1287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1293 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1296 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1297 ;;Total ram usage:        2 bytes
  1298 ;; Hardware stack levels used:    1
  1299 ;; Hardware stack levels required when called:    1
  1300 ;; This function calls:
  1301 ;;		_Write1USART
  1302 ;; This function is called by:
  1303 ;;		_main
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307                           	psect	text2
  1308  002FAE                     __ptext2:
  1309                           	opt stack 0
  1310  002FAE                     _puts1USART:
  1311                           	opt stack 29
  1312  002FAE                     l369:
  1313  002FAE  A2AC               	btfss	4012,1,c	;volatile
  1314  002FB0  D7FE               	goto	l369
  1315  002FB2  C019  FFD9         	movff	puts1USART@data,fsr2l
  1316  002FB6  C01A  FFDA         	movff	puts1USART@data+1,fsr2h
  1317  002FBA  50DF               	movf	indf2,w,c
  1318  002FBC  EC3D  F018         	call	_Write1USART
  1319  002FC0  C019  FFD9         	movff	puts1USART@data,fsr2l
  1320  002FC4  C01A  FFDA         	movff	puts1USART@data+1,fsr2h
  1321  002FC8  4A19               	infsnz	puts1USART@data,f,c
  1322  002FCA  2A1A               	incf	puts1USART@data+1,f,c
  1323  002FCC  50DF               	movf	indf2,w,c
  1324  002FCE  B4D8               	btfsc	status,2,c
  1325  002FD0  0012               	return	
  1326  002FD2  D7ED               	goto	l369
  1327  002FD4                     __end_of_puts1USART:
  1328                           	opt stack 0
  1329                           tblptru	equ	0xFF8
  1330                           tblptrh	equ	0xFF7
  1331                           tblptrl	equ	0xFF6
  1332                           tablat	equ	0xFF5
  1333                           postinc0	equ	0xFEE
  1334                           wreg	equ	0xFE8
  1335                           postdec1	equ	0xFE5
  1336                           fsr1l	equ	0xFE1
  1337                           indf2	equ	0xFDF
  1338                           fsr2h	equ	0xFDA
  1339                           fsr2l	equ	0xFD9
  1340                           status	equ	0xFD8
  1341                           
  1342 ;; *************** function _Write1USART *****************
  1343 ;; Defined at:
  1344 ;;		line 14 in file "/opt/microchip/xc8/v1.42/sources/pic18/plib/USART/u1write.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;  data            1    wreg     unsigned char 
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;  data            1    0[COMRAM] unsigned char 
  1349 ;; Return value:  Size  Location     Type
  1350 ;;                  1    wreg      void 
  1351 ;; Registers used:
  1352 ;;		wreg
  1353 ;; Tracked objects:
  1354 ;;		On entry : 0/0
  1355 ;;		On exit  : 0/0
  1356 ;;		Unchanged: 0/0
  1357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1359 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1361 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1362 ;;Total ram usage:        1 bytes
  1363 ;; Hardware stack levels used:    1
  1364 ;; This function calls:
  1365 ;;		Nothing
  1366 ;; This function is called by:
  1367 ;;		_puts1USART
  1368 ;; This function uses a non-reentrant model
  1369 ;;
  1370                           
  1371                           	psect	text3
  1372  00307A                     __ptext3:
  1373                           	opt stack 0
  1374  00307A                     _Write1USART:
  1375                           	opt stack 29
  1376                           
  1377                           ;incstack = 0
  1378                           ;Write1USART@data stored from wreg
  1379  00307A  6E01               	movwf	Write1USART@data,c
  1380  00307C  ACAC               	btfss	4012,6,c	;volatile
  1381  00307E  D003               	goto	l3249
  1382  003080  90AC               	bcf	4012,0,c	;volatile
  1383  003082  B253               	btfsc	_USART1_Status,1,c
  1384  003084  80AC               	bsf	4012,0,c	;volatile
  1385  003086                     l3249:
  1386  003086  C001  FFAD         	movff	Write1USART@data,4013	;volatile
  1387  00308A  0012               	return		;funcret
  1388  00308C                     __end_of_Write1USART:
  1389                           	opt stack 0
  1390                           tblptru	equ	0xFF8
  1391                           tblptrh	equ	0xFF7
  1392                           tblptrl	equ	0xFF6
  1393                           tablat	equ	0xFF5
  1394                           postinc0	equ	0xFEE
  1395                           wreg	equ	0xFE8
  1396                           postdec1	equ	0xFE5
  1397                           fsr1l	equ	0xFE1
  1398                           indf2	equ	0xFDF
  1399                           fsr2h	equ	0xFDA
  1400                           fsr2l	equ	0xFD9
  1401                           status	equ	0xFD8
  1402                           
  1403 ;; *************** function _itoa *****************
  1404 ;; Defined at:
  1405 ;;		line 4 in file "/opt/microchip/xc8/v1.42/sources/common/itoa.c"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;  buf             2   16[COMRAM] PTR unsigned char 
  1408 ;;		 -> stringval(10), 
  1409 ;;  val             2   18[COMRAM] int 
  1410 ;;  base            2   20[COMRAM] int 
  1411 ;; Auto vars:     Size  Location     Type
  1412 ;;  cp              2   22[COMRAM] PTR unsigned char 
  1413 ;;		 -> stringval(10), 
  1414 ;; Return value:  Size  Location     Type
  1415 ;;                  2   16[COMRAM] PTR unsigned char 
  1416 ;; Registers used:
  1417 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1418 ;; Tracked objects:
  1419 ;;		On entry : 0/0
  1420 ;;		On exit  : 0/0
  1421 ;;		Unchanged: 0/0
  1422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1423 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1424 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1426 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1427 ;;Total ram usage:        8 bytes
  1428 ;; Hardware stack levels used:    1
  1429 ;; Hardware stack levels required when called:    2
  1430 ;; This function calls:
  1431 ;;		_utoa
  1432 ;; This function is called by:
  1433 ;;		_main
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           	psect	text4
  1438  002E08                     __ptext4:
  1439                           	opt stack 0
  1440  002E08                     _itoa:
  1441                           	opt stack 28
  1442                           
  1443                           ;incstack = 0
  1444  002E08  C011  F017         	movff	itoa@buf,itoa@cp
  1445  002E0C  C012  F018         	movff	itoa@buf+1,itoa@cp+1
  1446  002E10  AE14               	btfss	itoa@val+1,7,c
  1447  002E12  D00C               	goto	l3427
  1448  002E14  C011  FFD9         	movff	itoa@buf,fsr2l
  1449  002E18  C012  FFDA         	movff	itoa@buf+1,fsr2h
  1450  002E1C  0E2D               	movlw	45
  1451  002E1E  6EDF               	movwf	indf2,c
  1452  002E20  4A11               	infsnz	itoa@buf,f,c
  1453  002E22  2A12               	incf	itoa@buf+1,f,c
  1454  002E24  6C13               	negf	itoa@val,c
  1455  002E26  1E14               	comf	itoa@val+1,f,c
  1456  002E28  B0D8               	btfsc	status,0,c
  1457  002E2A  2A14               	incf	itoa@val+1,f,c
  1458  002E2C                     l3427:
  1459  002E2C  C011  F008         	movff	itoa@buf,utoa@buf
  1460  002E30  C012  F009         	movff	itoa@buf+1,utoa@buf+1
  1461  002E34  C013  F00A         	movff	itoa@val,utoa@val
  1462  002E38  C014  F00B         	movff	itoa@val+1,utoa@val+1
  1463  002E3C  C015  F00C         	movff	itoa@base,utoa@base
  1464  002E40  C016  F00D         	movff	itoa@base+1,utoa@base+1
  1465  002E44  EC86  F014         	call	_utoa	;wreg free
  1466  002E48  C017  F011         	movff	itoa@cp,?_itoa
  1467  002E4C  C018  F012         	movff	itoa@cp+1,?_itoa+1
  1468  002E50  0012               	return	
  1469  002E52                     __end_of_itoa:
  1470                           	opt stack 0
  1471                           tblptru	equ	0xFF8
  1472                           tblptrh	equ	0xFF7
  1473                           tblptrl	equ	0xFF6
  1474                           tablat	equ	0xFF5
  1475                           postinc0	equ	0xFEE
  1476                           wreg	equ	0xFE8
  1477                           postdec1	equ	0xFE5
  1478                           fsr1l	equ	0xFE1
  1479                           indf2	equ	0xFDF
  1480                           fsr2h	equ	0xFDA
  1481                           fsr2l	equ	0xFD9
  1482                           status	equ	0xFD8
  1483                           
  1484 ;; *************** function _utoa *****************
  1485 ;; Defined at:
  1486 ;;		line 17 in file "/opt/microchip/xc8/v1.42/sources/common/itoa.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;  buf             2    7[COMRAM] PTR unsigned char 
  1489 ;;		 -> stringval(10), 
  1490 ;;  val             2    9[COMRAM] unsigned int 
  1491 ;;  base            2   11[COMRAM] int 
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;  v               2   13[COMRAM] unsigned int 
  1494 ;;  c               1   15[COMRAM] unsigned char 
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  2    7[COMRAM] PTR unsigned char 
  1497 ;; Registers used:
  1498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1504 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1505 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1507 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1508 ;;Total ram usage:        9 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    1
  1511 ;; This function calls:
  1512 ;;		___lwdiv
  1513 ;;		___lwmod
  1514 ;; This function is called by:
  1515 ;;		_itoa
  1516 ;; This function uses a non-reentrant model
  1517 ;;
  1518                           
  1519                           	psect	text5
  1520  00290C                     __ptext5:
  1521                           	opt stack 0
  1522  00290C                     _utoa:
  1523                           	opt stack 28
  1524                           
  1525                           ;incstack = 0
  1526  00290C  C00A  F00E         	movff	utoa@val,utoa@v
  1527  002910  C00B  F00F         	movff	utoa@val+1,utoa@v+1
  1528  002914                     l3343:
  1529  002914  C00E  F001         	movff	utoa@v,___lwdiv@dividend
  1530  002918  C00F  F002         	movff	utoa@v+1,___lwdiv@dividend+1
  1531  00291C  C00C  F003         	movff	utoa@base,___lwdiv@divisor
  1532  002920  C00D  F004         	movff	utoa@base+1,___lwdiv@divisor+1
  1533  002924  ECDB  F016         	call	___lwdiv	;wreg free
  1534  002928  C001  F00E         	movff	?___lwdiv,utoa@v
  1535  00292C  C002  F00F         	movff	?___lwdiv+1,utoa@v+1
  1536  002930  4A08               	infsnz	utoa@buf,f,c
  1537  002932  2A09               	incf	utoa@buf+1,f,c
  1538  002934  500E               	movf	utoa@v,w,c
  1539  002936  100F               	iorwf	utoa@v+1,w,c
  1540  002938  A4D8               	btfss	status,2,c
  1541  00293A  D7EC               	goto	l3343
  1542  00293C  C008  FFD9         	movff	utoa@buf,fsr2l
  1543  002940  C009  FFDA         	movff	utoa@buf+1,fsr2h
  1544  002944  0E00               	movlw	0
  1545  002946  6EDF               	movwf	indf2,c
  1546  002948  0608               	decf	utoa@buf,f,c
  1547  00294A  A0D8               	btfss	status,0,c
  1548  00294C  0609               	decf	utoa@buf+1,f,c
  1549  00294E                     l3353:
  1550  00294E  C00A  F001         	movff	utoa@val,___lwmod@dividend
  1551  002952  C00B  F002         	movff	utoa@val+1,___lwmod@dividend+1
  1552  002956  C00C  F003         	movff	utoa@base,___lwmod@divisor
  1553  00295A  C00D  F004         	movff	utoa@base+1,___lwmod@divisor+1
  1554  00295E  EC4A  F017         	call	___lwmod	;wreg free
  1555  002962  5001               	movf	?___lwmod,w,c
  1556  002964  6E10               	movwf	utoa@c,c
  1557  002966  C00A  F001         	movff	utoa@val,___lwdiv@dividend
  1558  00296A  C00B  F002         	movff	utoa@val+1,___lwdiv@dividend+1
  1559  00296E  C00C  F003         	movff	utoa@base,___lwdiv@divisor
  1560  002972  C00D  F004         	movff	utoa@base+1,___lwdiv@divisor+1
  1561  002976  ECDB  F016         	call	___lwdiv	;wreg free
  1562  00297A  C001  F00A         	movff	?___lwdiv,utoa@val
  1563  00297E  C002  F00B         	movff	?___lwdiv+1,utoa@val+1
  1564  002982  0E09               	movlw	9
  1565  002984  6410               	cpfsgt	utoa@c,c
  1566  002986  D002               	goto	l761
  1567  002988  0E07               	movlw	7
  1568  00298A  2610               	addwf	utoa@c,f,c
  1569  00298C                     l761:
  1570  00298C  0E30               	movlw	48
  1571  00298E  2610               	addwf	utoa@c,f,c
  1572  002990  C008  FFD9         	movff	utoa@buf,fsr2l
  1573  002994  C009  FFDA         	movff	utoa@buf+1,fsr2h
  1574  002998  C010  FFDF         	movff	utoa@c,indf2
  1575  00299C  0608               	decf	utoa@buf,f,c
  1576  00299E  A0D8               	btfss	status,0,c
  1577  0029A0  0609               	decf	utoa@buf+1,f,c
  1578  0029A2  500A               	movf	utoa@val,w,c
  1579  0029A4  100B               	iorwf	utoa@val+1,w,c
  1580  0029A6  A4D8               	btfss	status,2,c
  1581  0029A8  D7D2               	goto	l3353
  1582                           
  1583                           ;	Return value of _utoa is never used
  1584  0029AA  4A08               	infsnz	utoa@buf,f,c
  1585  0029AC  2A09               	incf	utoa@buf+1,f,c
  1586  0029AE  0012               	return	
  1587  0029B0                     __end_of_utoa:
  1588                           	opt stack 0
  1589                           tblptru	equ	0xFF8
  1590                           tblptrh	equ	0xFF7
  1591                           tblptrl	equ	0xFF6
  1592                           tablat	equ	0xFF5
  1593                           postinc0	equ	0xFEE
  1594                           wreg	equ	0xFE8
  1595                           postdec1	equ	0xFE5
  1596                           fsr1l	equ	0xFE1
  1597                           indf2	equ	0xFDF
  1598                           fsr2h	equ	0xFDA
  1599                           fsr2l	equ	0xFD9
  1600                           status	equ	0xFD8
  1601                           
  1602 ;; *************** function ___lwmod *****************
  1603 ;; Defined at:
  1604 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/lwmod.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;  dividend        2    0[COMRAM] unsigned int 
  1607 ;;  divisor         2    2[COMRAM] unsigned int 
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;  counter         1    4[COMRAM] unsigned char 
  1610 ;; Return value:  Size  Location     Type
  1611 ;;                  2    0[COMRAM] unsigned int 
  1612 ;; Registers used:
  1613 ;;		wreg, status,2, status,0
  1614 ;; Tracked objects:
  1615 ;;		On entry : 0/0
  1616 ;;		On exit  : 0/0
  1617 ;;		Unchanged: 0/0
  1618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1619 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1620 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1622 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1623 ;;Total ram usage:        5 bytes
  1624 ;; Hardware stack levels used:    1
  1625 ;; This function calls:
  1626 ;;		Nothing
  1627 ;; This function is called by:
  1628 ;;		_utoa
  1629 ;; This function uses a non-reentrant model
  1630 ;;
  1631                           
  1632                           	psect	text6
  1633  002E94                     __ptext6:
  1634                           	opt stack 0
  1635  002E94                     ___lwmod:
  1636                           	opt stack 28
  1637                           
  1638                           ;incstack = 0
  1639  002E94  5003               	movf	___lwmod@divisor,w,c
  1640  002E96  1004               	iorwf	___lwmod@divisor+1,w,c
  1641  002E98  B4D8               	btfsc	status,2,c
  1642  002E9A  D018               	goto	l850
  1643  002E9C  0E01               	movlw	1
  1644  002E9E  6E05               	movwf	___lwmod@counter,c
  1645  002EA0  D004               	goto	l2953
  1646  002EA2                     l2951:
  1647  002EA2  90D8               	bcf	status,0,c
  1648  002EA4  3603               	rlcf	___lwmod@divisor,f,c
  1649  002EA6  3604               	rlcf	___lwmod@divisor+1,f,c
  1650  002EA8  2A05               	incf	___lwmod@counter,f,c
  1651  002EAA                     l2953:
  1652  002EAA  AE04               	btfss	___lwmod@divisor+1,7,c
  1653  002EAC  D7FA               	goto	l2951
  1654  002EAE                     l2955:
  1655  002EAE  5003               	movf	___lwmod@divisor,w,c
  1656  002EB0  5C01               	subwf	___lwmod@dividend,w,c
  1657  002EB2  5004               	movf	___lwmod@divisor+1,w,c
  1658  002EB4  5802               	subwfb	___lwmod@dividend+1,w,c
  1659  002EB6  A0D8               	btfss	status,0,c
  1660  002EB8  D004               	goto	l2959
  1661  002EBA  5003               	movf	___lwmod@divisor,w,c
  1662  002EBC  5E01               	subwf	___lwmod@dividend,f,c
  1663  002EBE  5004               	movf	___lwmod@divisor+1,w,c
  1664  002EC0  5A02               	subwfb	___lwmod@dividend+1,f,c
  1665  002EC2                     l2959:
  1666  002EC2  90D8               	bcf	status,0,c
  1667  002EC4  3204               	rrcf	___lwmod@divisor+1,f,c
  1668  002EC6  3203               	rrcf	___lwmod@divisor,f,c
  1669  002EC8  2E05               	decfsz	___lwmod@counter,f,c
  1670  002ECA  D7F1               	goto	l2955
  1671  002ECC                     l850:
  1672  002ECC  C001  F001         	movff	___lwmod@dividend,?___lwmod
  1673  002ED0  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  1674  002ED4  0012               	return		;funcret
  1675  002ED6                     __end_of___lwmod:
  1676                           	opt stack 0
  1677                           tblptru	equ	0xFF8
  1678                           tblptrh	equ	0xFF7
  1679                           tblptrl	equ	0xFF6
  1680                           tablat	equ	0xFF5
  1681                           postinc0	equ	0xFEE
  1682                           wreg	equ	0xFE8
  1683                           postdec1	equ	0xFE5
  1684                           fsr1l	equ	0xFE1
  1685                           indf2	equ	0xFDF
  1686                           fsr2h	equ	0xFDA
  1687                           fsr2l	equ	0xFD9
  1688                           status	equ	0xFD8
  1689                           
  1690 ;; *************** function ___lwdiv *****************
  1691 ;; Defined at:
  1692 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/lwdiv.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;  dividend        2    0[COMRAM] unsigned int 
  1695 ;;  divisor         2    2[COMRAM] unsigned int 
  1696 ;; Auto vars:     Size  Location     Type
  1697 ;;  quotient        2    4[COMRAM] unsigned int 
  1698 ;;  counter         1    6[COMRAM] unsigned char 
  1699 ;; Return value:  Size  Location     Type
  1700 ;;                  2    0[COMRAM] unsigned int 
  1701 ;; Registers used:
  1702 ;;		wreg, status,2, status,0
  1703 ;; Tracked objects:
  1704 ;;		On entry : 0/0
  1705 ;;		On exit  : 0/0
  1706 ;;		Unchanged: 0/0
  1707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1708 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1709 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1711 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1712 ;;Total ram usage:        7 bytes
  1713 ;; Hardware stack levels used:    1
  1714 ;; This function calls:
  1715 ;;		Nothing
  1716 ;; This function is called by:
  1717 ;;		_utoa
  1718 ;; This function uses a non-reentrant model
  1719 ;;
  1720                           
  1721                           	psect	text7
  1722  002DB6                     __ptext7:
  1723                           	opt stack 0
  1724  002DB6                     ___lwdiv:
  1725                           	opt stack 28
  1726                           
  1727                           ;incstack = 0
  1728  002DB6  0E00               	movlw	0
  1729  002DB8  6E06               	movwf	___lwdiv@quotient+1,c
  1730  002DBA  0E00               	movlw	0
  1731  002DBC  6E05               	movwf	___lwdiv@quotient,c
  1732  002DBE  5003               	movf	___lwdiv@divisor,w,c
  1733  002DC0  1004               	iorwf	___lwdiv@divisor+1,w,c
  1734  002DC2  B4D8               	btfsc	status,2,c
  1735  002DC4  D01C               	goto	l840
  1736  002DC6  0E01               	movlw	1
  1737  002DC8  6E07               	movwf	___lwdiv@counter,c
  1738  002DCA  D004               	goto	l2933
  1739  002DCC                     l2931:
  1740  002DCC  90D8               	bcf	status,0,c
  1741  002DCE  3603               	rlcf	___lwdiv@divisor,f,c
  1742  002DD0  3604               	rlcf	___lwdiv@divisor+1,f,c
  1743  002DD2  2A07               	incf	___lwdiv@counter,f,c
  1744  002DD4                     l2933:
  1745  002DD4  AE04               	btfss	___lwdiv@divisor+1,7,c
  1746  002DD6  D7FA               	goto	l2931
  1747  002DD8                     l2935:
  1748  002DD8  90D8               	bcf	status,0,c
  1749  002DDA  3605               	rlcf	___lwdiv@quotient,f,c
  1750  002DDC  3606               	rlcf	___lwdiv@quotient+1,f,c
  1751  002DDE  5003               	movf	___lwdiv@divisor,w,c
  1752  002DE0  5C01               	subwf	___lwdiv@dividend,w,c
  1753  002DE2  5004               	movf	___lwdiv@divisor+1,w,c
  1754  002DE4  5802               	subwfb	___lwdiv@dividend+1,w,c
  1755  002DE6  A0D8               	btfss	status,0,c
  1756  002DE8  D005               	goto	l2943
  1757  002DEA  5003               	movf	___lwdiv@divisor,w,c
  1758  002DEC  5E01               	subwf	___lwdiv@dividend,f,c
  1759  002DEE  5004               	movf	___lwdiv@divisor+1,w,c
  1760  002DF0  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1761  002DF2  8005               	bsf	___lwdiv@quotient,0,c
  1762  002DF4                     l2943:
  1763  002DF4  90D8               	bcf	status,0,c
  1764  002DF6  3204               	rrcf	___lwdiv@divisor+1,f,c
  1765  002DF8  3203               	rrcf	___lwdiv@divisor,f,c
  1766  002DFA  2E07               	decfsz	___lwdiv@counter,f,c
  1767  002DFC  D7ED               	goto	l2935
  1768  002DFE                     l840:
  1769  002DFE  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1770  002E02  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1771  002E06  0012               	return		;funcret
  1772  002E08                     __end_of___lwdiv:
  1773                           	opt stack 0
  1774                           tblptru	equ	0xFF8
  1775                           tblptrh	equ	0xFF7
  1776                           tblptrl	equ	0xFF6
  1777                           tablat	equ	0xFF5
  1778                           postinc0	equ	0xFEE
  1779                           wreg	equ	0xFE8
  1780                           postdec1	equ	0xFE5
  1781                           fsr1l	equ	0xFE1
  1782                           indf2	equ	0xFDF
  1783                           fsr2h	equ	0xFDA
  1784                           fsr2l	equ	0xFD9
  1785                           status	equ	0xFD8
  1786                           
  1787 ;; *************** function _do_voltage *****************
  1788 ;; Defined at:
  1789 ;;		line 225 in file "main.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;		None
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;		None
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  1    wreg      void 
  1796 ;; Registers used:
  1797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1807 ;;Total ram usage:        0 bytes
  1808 ;; Hardware stack levels used:    1
  1809 ;; Hardware stack levels required when called:    4
  1810 ;; This function calls:
  1811 ;;		_ADCRead
  1812 ;;		___ftdiv
  1813 ;;		___ftmul
  1814 ;;		___lwtoft
  1815 ;;		_printf
  1816 ;; This function is called by:
  1817 ;;		_main
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821                           	psect	text8
  1822  002B46                     __ptext8:
  1823                           	opt stack 0
  1824  002B46                     _do_voltage:
  1825                           	opt stack 26
  1826                           
  1827                           ;main.c: 228: ADCValue=ADCRead(0);
  1828                           
  1829                           ;incstack = 0
  1830  002B46  0E00               	movlw	0
  1831  002B48  ECA6  F017         	call	_ADCRead
  1832  002B4C  C001  F05C         	movff	?_ADCRead,_ADCValue
  1833  002B50  C002  F05D         	movff	?_ADCRead+1,_ADCValue+1
  1834                           
  1835                           ;main.c: 230: volts = 5.7 * ((float)ADCValue)/1024.0;
  1836  002B54  0E66               	movlw	102
  1837  002B56  6E18               	movwf	___ftmul@f2,c
  1838  002B58  0EB6               	movlw	182
  1839  002B5A  6E19               	movwf	___ftmul@f2+1,c
  1840  002B5C  0E40               	movlw	64
  1841  002B5E  6E1A               	movwf	___ftmul@f2+2,c
  1842  002B60  C05C  F009         	movff	_ADCValue,___lwtoft@c
  1843  002B64  C05D  F00A         	movff	_ADCValue+1,___lwtoft@c+1
  1844  002B68  EC0F  F018         	call	___lwtoft	;wreg free
  1845  002B6C  C009  F015         	movff	?___lwtoft,___ftmul@f1
  1846  002B70  C00A  F016         	movff	?___lwtoft+1,___ftmul@f1+1
  1847  002B74  C00B  F017         	movff	?___lwtoft+2,___ftmul@f1+2
  1848  002B78  ECF9  F011         	call	___ftmul	;wreg free
  1849  002B7C  C015  F024         	movff	?___ftmul,___ftdiv@f1
  1850  002B80  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
  1851  002B84  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
  1852  002B88  0E00               	movlw	0
  1853  002B8A  6E27               	movwf	___ftdiv@f2,c
  1854  002B8C  0E80               	movlw	128
  1855  002B8E  6E28               	movwf	___ftdiv@f2+1,c
  1856  002B90  0E44               	movlw	68
  1857  002B92  6E29               	movwf	___ftdiv@f2+2,c
  1858  002B94  ECED  F012         	call	___ftdiv	;wreg free
  1859  002B98  C024  F04E         	movff	?___ftdiv,_volts
  1860  002B9C  C025  F04F         	movff	?___ftdiv+1,_volts+1
  1861  002BA0  C026  F050         	movff	?___ftdiv+2,_volts+2
  1862                           
  1863                           ;main.c: 231: printf("Voltage V%6.2f\r\n", volts);
  1864  002BA4  0E77               	movlw	low STR_1
  1865  002BA6  6E40               	movwf	printf@f,c
  1866  002BA8  0E0F               	movlw	high STR_1
  1867  002BAA  6E41               	movwf	printf@f+1,c
  1868  002BAC  C04E  F042         	movff	_volts,?_printf+2
  1869  002BB0  C04F  F043         	movff	_volts+1,?_printf+3
  1870  002BB4  C050  F044         	movff	_volts+2,?_printf+4
  1871  002BB8  ECCC  F007         	call	_printf	;wreg free
  1872  002BBC  0012               	return		;funcret
  1873  002BBE                     __end_of_do_voltage:
  1874                           	opt stack 0
  1875                           tblptru	equ	0xFF8
  1876                           tblptrh	equ	0xFF7
  1877                           tblptrl	equ	0xFF6
  1878                           tablat	equ	0xFF5
  1879                           postinc0	equ	0xFEE
  1880                           wreg	equ	0xFE8
  1881                           postdec1	equ	0xFE5
  1882                           fsr1l	equ	0xFE1
  1883                           indf2	equ	0xFDF
  1884                           fsr2h	equ	0xFDA
  1885                           fsr2l	equ	0xFD9
  1886                           status	equ	0xFD8
  1887                           
  1888 ;; *************** function _printf *****************
  1889 ;; Defined at:
  1890 ;;		line 464 in file "/opt/microchip/xc8/v1.42/sources/common/doprnt.c"
  1891 ;; Parameters:    Size  Location     Type
  1892 ;;  f               2   63[COMRAM] PTR const unsigned char 
  1893 ;;		 -> STR_4(3), STR_3(9), STR_2(6), STR_1(17), 
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;  tmpval          4   15[BANK0 ] struct .
  1896 ;;  val             4    9[BANK0 ] unsigned long 
  1897 ;;  fval            3   23[BANK0 ] unsigned long 
  1898 ;;  prec            2   26[BANK0 ] int 
  1899 ;;  width           2   21[BANK0 ] int 
  1900 ;;  exp             2   19[BANK0 ] int 
  1901 ;;  flag            2   13[BANK0 ] unsigned short 
  1902 ;;  len             2    7[BANK0 ] unsigned int 
  1903 ;;  ap              2    5[BANK0 ] PTR void [1]
  1904 ;;		 -> ?_printf(2), 
  1905 ;;  cp              2    3[BANK0 ] PTR const unsigned char 
  1906 ;;		 -> printf@c(1), 
  1907 ;;  c               1   28[BANK0 ] char 
  1908 ;;  d               1    0        unsigned char 
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  2   63[COMRAM] int 
  1911 ;; Registers used:
  1912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1918 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1919 ;;      Locals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1920 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1921 ;;      Totals:        11      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1922 ;;Total ram usage:       40 bytes
  1923 ;; Hardware stack levels used:    1
  1924 ;; Hardware stack levels required when called:    3
  1925 ;; This function calls:
  1926 ;;		___awdiv
  1927 ;;		___ftadd
  1928 ;;		___ftge
  1929 ;;		___ftmul
  1930 ;;		___ftneg
  1931 ;;		___ftsub
  1932 ;;		___fttol
  1933 ;;		___lldiv
  1934 ;;		___llmod
  1935 ;;		___lltoft
  1936 ;;		___wmul
  1937 ;;		__div_to_l_
  1938 ;;		__tdiv_to_l_
  1939 ;;		_fround
  1940 ;;		_isdigit
  1941 ;;		_putch
  1942 ;;		_scale
  1943 ;; This function is called by:
  1944 ;;		_do_voltage
  1945 ;;		_main
  1946 ;; This function uses a non-reentrant model
  1947 ;;
  1948                           
  1949                           	psect	text9
  1950  000F98                     __ptext9:
  1951                           	opt stack 0
  1952  000F98                     _printf:
  1953                           	opt stack 27
  1954                           
  1955                           ;doprnt.c: 466: va_list ap;
  1956                           ;doprnt.c: 499: signed char c;
  1957                           ;doprnt.c: 501: int width;
  1958                           ;doprnt.c: 504: int prec;
  1959                           ;doprnt.c: 508: unsigned short flag;
  1960                           ;doprnt.c: 515: char d;
  1961                           ;doprnt.c: 516: double fval;
  1962                           ;doprnt.c: 517: int exp;
  1963                           ;doprnt.c: 523: union {
  1964                           ;doprnt.c: 524: unsigned long vd;
  1965                           ;doprnt.c: 525: double integ;
  1966                           ;doprnt.c: 526: } tmpval;
  1967                           ;doprnt.c: 528: unsigned long val;
  1968                           ;doprnt.c: 529: unsigned len;
  1969                           ;doprnt.c: 530: const char * cp;
  1970                           ;doprnt.c: 533: *ap = __va_start();
  1971                           
  1972                           ;incstack = 0
  1973  000F98  0E42               	movlw	low (?_printf+2)
  1974  000F9A  0100               	movlb	0	; () banked
  1975  000F9C  6FE6               	movwf	printf@ap& (0+255),b
  1976  000F9E  0E00               	movlw	high (?_printf+2)
  1977  000FA0  0100               	movlb	0	; () banked
  1978  000FA2  6FE7               	movwf	(printf@ap+1)& (0+255),b
  1979                           
  1980                           ;doprnt.c: 536: while(c = *f++) {
  1981  000FA4  EFCC  F00C         	goto	l3241
  1982  000FA8                     l2979:
  1983                           
  1984                           ; BSR set to: 0
  1985                           ;doprnt.c: 538: if(c != '%')
  1986  000FA8  0E25               	movlw	37
  1987  000FAA  0100               	movlb	0	; () banked
  1988  000FAC  19FD               	xorwf	printf@c& (0+255),w,b
  1989  000FAE  B4D8               	btfsc	status,2,c
  1990  000FB0  D006               	goto	l2983
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;doprnt.c: 540: {
  1994                           ;doprnt.c: 541: (putch(c) );
  1995  000FB2  0100               	movlb	0	; () banked
  1996  000FB4  51FD               	movf	printf@c& (0+255),w,b
  1997  000FB6  EC46  F018         	call	_putch
  1998                           
  1999                           ;doprnt.c: 542: continue;
  2000  000FBA  EFCC  F00C         	goto	l3241
  2001  000FBE                     l2983:
  2002                           
  2003                           ;doprnt.c: 543: }
  2004                           ;doprnt.c: 546: width = 0;
  2005  000FBE  0E00               	movlw	0
  2006  000FC0  0100               	movlb	0	; () banked
  2007  000FC2  6FF7               	movwf	(printf@width+1)& (0+255),b
  2008  000FC4  0E00               	movlw	0
  2009  000FC6  6FF6               	movwf	printf@width& (0+255),b
  2010                           
  2011                           ;doprnt.c: 548: flag = 0;
  2012  000FC8  0E00               	movlw	0
  2013  000FCA  0100               	movlb	0	; () banked
  2014  000FCC  6FEF               	movwf	(printf@flag+1)& (0+255),b
  2015  000FCE  0E00               	movlw	0
  2016  000FD0  6FEE               	movwf	printf@flag& (0+255),b
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2020  000FD2  C040  FFF6         	movff	printf@f,tblptrl
  2021  000FD6  C041  FFF7         	movff	printf@f+1,tblptrh
  2022  000FDA                     	if	0	;tblptru may be non-zero
  2023  000FDA                     	endif
  2024  000FDA                     	if	0	;tblptru may be non-zero
  2025  000FDA                     	endif
  2026  000FDA  0008               	tblrd		*
  2027  000FDC  50F5               	movf	tablat,w,c
  2028  000FDE  EC21  F018         	call	_isdigit
  2029  000FE2  A0D8               	btfss	status,0,c
  2030  000FE4  D035               	goto	l2997
  2031                           
  2032                           ;doprnt.c: 598: width = 0;
  2033  000FE6  0E00               	movlw	0
  2034  000FE8  0100               	movlb	0	; () banked
  2035  000FEA  6FF7               	movwf	(printf@width+1)& (0+255),b
  2036  000FEC  0E00               	movlw	0
  2037  000FEE  6FF6               	movwf	printf@width& (0+255),b
  2038  000FF0                     l2989:
  2039                           
  2040                           ;doprnt.c: 600: width *= 10;
  2041  000FF0  C0F6  F00F         	movff	printf@width,___wmul@multiplier
  2042  000FF4  C0F7  F010         	movff	printf@width+1,___wmul@multiplier+1
  2043  000FF8  0E00               	movlw	0
  2044  000FFA  6E12               	movwf	___wmul@multiplicand+1,c
  2045  000FFC  0E0A               	movlw	10
  2046  000FFE  6E11               	movwf	___wmul@multiplicand,c
  2047  001000  ECEA  F017         	call	___wmul	;wreg free
  2048  001004  C00F  F0F6         	movff	?___wmul,printf@width
  2049  001008  C010  F0F7         	movff	?___wmul+1,printf@width+1
  2050                           
  2051                           ;doprnt.c: 601: width += *f++ - '0';
  2052  00100C  0ED0               	movlw	208
  2053  00100E  6E45               	movwf	??_printf& (0+255),c
  2054  001010  0EFF               	movlw	255
  2055  001012  6E46               	movwf	(??_printf+1)& (0+255),c
  2056  001014  C040  FFF6         	movff	printf@f,tblptrl
  2057  001018  C041  FFF7         	movff	printf@f+1,tblptrh
  2058  00101C                     	if	0	;tblptru may be non-zero
  2059  00101C                     	endif
  2060  00101C                     	if	0	;tblptru may be non-zero
  2061  00101C                     	endif
  2062  00101C  0008               	tblrd		*
  2063  00101E  50F5               	movf	tablat,w,c
  2064  001020  6E47               	movwf	(??_printf+2)& (0+255),c
  2065  001022  6A48               	clrf	(??_printf+3)& (0+255),c
  2066  001024  5045               	movf	??_printf,w,c
  2067  001026  2647               	addwf	??_printf+2,f,c
  2068  001028  5046               	movf	??_printf+1,w,c
  2069  00102A  2248               	addwfc	??_printf+3,f,c
  2070  00102C  5047               	movf	??_printf+2,w,c
  2071  00102E  0100               	movlb	0	; () banked
  2072  001030  27F6               	addwf	printf@width& (0+255),f,b
  2073  001032  5048               	movf	??_printf+3,w,c
  2074  001034  0100               	movlb	0	; () banked
  2075  001036  23F7               	addwfc	(printf@width+1)& (0+255),f,b
  2076                           
  2077                           ; BSR set to: 0
  2078  001038  4A40               	infsnz	printf@f,f,c
  2079  00103A  2A41               	incf	printf@f+1,f,c
  2080                           
  2081                           ; BSR set to: 0
  2082                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2083  00103C  C040  FFF6         	movff	printf@f,tblptrl
  2084  001040  C041  FFF7         	movff	printf@f+1,tblptrh
  2085  001044                     	if	0	;tblptru may be non-zero
  2086  001044                     	endif
  2087  001044                     	if	0	;tblptru may be non-zero
  2088  001044                     	endif
  2089  001044  0008               	tblrd		*
  2090  001046  50F5               	movf	tablat,w,c
  2091  001048  EC21  F018         	call	_isdigit
  2092  00104C  B0D8               	btfsc	status,0,c
  2093  00104E  D7D0               	goto	l2989
  2094  001050                     l2997:
  2095                           
  2096                           ;doprnt.c: 608: }
  2097                           ;doprnt.c: 611: if(*f == '.') {
  2098  001050  C040  FFF6         	movff	printf@f,tblptrl
  2099  001054  C041  FFF7         	movff	printf@f+1,tblptrh
  2100  001058                     	if	0	;tblptru may be non-zero
  2101  001058                     	endif
  2102  001058                     	if	0	;tblptru may be non-zero
  2103  001058                     	endif
  2104  001058  0008               	tblrd		*
  2105  00105A  50F5               	movf	tablat,w,c
  2106  00105C  0A2E               	xorlw	46
  2107  00105E  A4D8               	btfss	status,2,c
  2108  001060  D032               	goto	l3009
  2109                           
  2110                           ;doprnt.c: 612: flag |= 0x4000;
  2111  001062  0100               	movlb	0	; () banked
  2112  001064  8DEF               	bsf	(printf@flag+1)& (0+255),6,b
  2113                           
  2114                           ;doprnt.c: 613: f++;
  2115  001066  4A40               	infsnz	printf@f,f,c
  2116  001068  2A41               	incf	printf@f+1,f,c
  2117                           
  2118                           ; BSR set to: 0
  2119                           ;doprnt.c: 620: {
  2120                           ;doprnt.c: 621: prec = 0;
  2121  00106A  0E00               	movlw	0
  2122  00106C  0100               	movlb	0	; () banked
  2123  00106E  6FFC               	movwf	(printf@prec+1)& (0+255),b
  2124  001070  0E00               	movlw	0
  2125  001072  6FFB               	movwf	printf@prec& (0+255),b
  2126                           
  2127                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2128  001074  D01D               	goto	l3007
  2129  001076                     l3003:
  2130                           
  2131                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2132  001076  C0FB  F00F         	movff	printf@prec,___wmul@multiplier
  2133  00107A  C0FC  F010         	movff	printf@prec+1,___wmul@multiplier+1
  2134  00107E  0E00               	movlw	0
  2135  001080  6E12               	movwf	___wmul@multiplicand+1,c
  2136  001082  0E0A               	movlw	10
  2137  001084  6E11               	movwf	___wmul@multiplicand,c
  2138  001086  ECEA  F017         	call	___wmul	;wreg free
  2139  00108A  C040  FFF6         	movff	printf@f,tblptrl
  2140  00108E  C041  FFF7         	movff	printf@f+1,tblptrh
  2141  001092                     	if	0	;tblptru may be non-zero
  2142  001092                     	endif
  2143  001092                     	if	0	;tblptru may be non-zero
  2144  001092                     	endif
  2145  001092  0008               	tblrd		*
  2146  001094  50F5               	movf	tablat,w,c
  2147  001096  260F               	addwf	?___wmul,f,c
  2148  001098  0E00               	movlw	0
  2149  00109A  2210               	addwfc	?___wmul+1,f,c
  2150  00109C  0ED0               	movlw	208
  2151  00109E  240F               	addwf	?___wmul,w,c
  2152  0010A0  0100               	movlb	0	; () banked
  2153  0010A2  6FFB               	movwf	printf@prec& (0+255),b
  2154  0010A4  0EFF               	movlw	255
  2155  0010A6  2010               	addwfc	?___wmul+1,w,c
  2156  0010A8  0100               	movlb	0	; () banked
  2157  0010AA  6FFC               	movwf	(printf@prec+1)& (0+255),b
  2158                           
  2159                           ; BSR set to: 0
  2160  0010AC  4A40               	infsnz	printf@f,f,c
  2161  0010AE  2A41               	incf	printf@f+1,f,c
  2162  0010B0                     l3007:
  2163                           
  2164                           ; BSR set to: 0
  2165  0010B0  C040  FFF6         	movff	printf@f,tblptrl
  2166  0010B4  C041  FFF7         	movff	printf@f+1,tblptrh
  2167  0010B8                     	if	0	;tblptru may be non-zero
  2168  0010B8                     	endif
  2169  0010B8                     	if	0	;tblptru may be non-zero
  2170  0010B8                     	endif
  2171  0010B8  0008               	tblrd		*
  2172  0010BA  50F5               	movf	tablat,w,c
  2173  0010BC  EC21  F018         	call	_isdigit
  2174  0010C0  A0D8               	btfss	status,0,c
  2175  0010C2  D077               	goto	l3047
  2176  0010C4  D7D8               	goto	l3003
  2177  0010C6                     l3009:
  2178                           
  2179                           ;doprnt.c: 626: prec = 0;
  2180  0010C6  0E00               	movlw	0
  2181  0010C8  0100               	movlb	0	; () banked
  2182  0010CA  6FFC               	movwf	(printf@prec+1)& (0+255),b
  2183  0010CC  0E00               	movlw	0
  2184  0010CE  6FFB               	movwf	printf@prec& (0+255),b
  2185                           
  2186                           ; BSR set to: 0
  2187                           ;doprnt.c: 628: flag |= 0x1000;
  2188  0010D0  0100               	movlb	0	; () banked
  2189  0010D2  89EF               	bsf	(printf@flag+1)& (0+255),4,b
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;doprnt.c: 630: }
  2193                           ;doprnt.c: 635: switch(c = *f++) {
  2194  0010D4  D06E               	goto	l3047
  2195  0010D6                     l3013:
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;doprnt.c: 663: flag |= 0x400;
  2199  0010D6  0100               	movlb	0	; () banked
  2200  0010D8  85EF               	bsf	(printf@flag+1)& (0+255),2,b
  2201                           
  2202                           ;doprnt.c: 664: break;
  2203  0010DA  D080               	goto	l3049
  2204  0010DC                     l3015:
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;doprnt.c: 753: if(prec && prec < len)
  2208  0010DC  0100               	movlb	0	; () banked
  2209  0010DE  51FB               	movf	printf@prec& (0+255),w,b
  2210  0010E0  0100               	movlb	0	; () banked
  2211  0010E2  11FC               	iorwf	(printf@prec+1)& (0+255),w,b
  2212  0010E4  B4D8               	btfsc	status,2,c
  2213  0010E6  D00E               	goto	l3021
  2214                           
  2215                           ; BSR set to: 0
  2216  0010E8  0100               	movlb	0	; () banked
  2217  0010EA  51E8               	movf	printf@len& (0+255),w,b
  2218  0010EC  0100               	movlb	0	; () banked
  2219  0010EE  5DFB               	subwf	printf@prec& (0+255),w,b
  2220  0010F0  0100               	movlb	0	; () banked
  2221  0010F2  51E9               	movf	(printf@len+1)& (0+255),w,b
  2222  0010F4  0100               	movlb	0	; () banked
  2223  0010F6  59FC               	subwfb	(printf@prec+1)& (0+255),w,b
  2224  0010F8  B0D8               	btfsc	status,0,c
  2225  0010FA  D004               	goto	l3021
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;doprnt.c: 754: len = prec;
  2229  0010FC  C0FB  F0E8         	movff	printf@prec,printf@len
  2230  001100  C0FC  F0E9         	movff	printf@prec+1,printf@len+1
  2231  001104                     l3021:
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;doprnt.c: 757: if(width > len)
  2235  001104  0100               	movlb	0	; () banked
  2236  001106  51F6               	movf	printf@width& (0+255),w,b
  2237  001108  0100               	movlb	0	; () banked
  2238  00110A  5DE8               	subwf	printf@len& (0+255),w,b
  2239  00110C  0100               	movlb	0	; () banked
  2240  00110E  51F7               	movf	(printf@width+1)& (0+255),w,b
  2241  001110  0100               	movlb	0	; () banked
  2242  001112  59E9               	subwfb	(printf@len+1)& (0+255),w,b
  2243  001114  B0D8               	btfsc	status,0,c
  2244  001116  D009               	goto	l3025
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;doprnt.c: 758: width -= len;
  2248  001118  0100               	movlb	0	; () banked
  2249  00111A  51E8               	movf	printf@len& (0+255),w,b
  2250  00111C  0100               	movlb	0	; () banked
  2251  00111E  5FF6               	subwf	printf@width& (0+255),f,b
  2252  001120  0100               	movlb	0	; () banked
  2253  001122  51E9               	movf	(printf@len+1)& (0+255),w,b
  2254  001124  0100               	movlb	0	; () banked
  2255  001126  5BF7               	subwfb	(printf@width+1)& (0+255),f,b
  2256  001128  D009               	goto	l3029
  2257  00112A                     l3025:
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;doprnt.c: 759: else
  2261                           ;doprnt.c: 760: width = 0;
  2262  00112A  0E00               	movlw	0
  2263  00112C  0100               	movlb	0	; () banked
  2264  00112E  6FF7               	movwf	(printf@width+1)& (0+255),b
  2265  001130  0E00               	movlw	0
  2266  001132  6FF6               	movwf	printf@width& (0+255),b
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;doprnt.c: 764: while(width--)
  2270  001134  D003               	goto	l3029
  2271  001136                     l3027:
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;doprnt.c: 765: (putch(' ') );
  2275  001136  0E20               	movlw	32
  2276  001138  EC46  F018         	call	_putch
  2277  00113C                     l3029:
  2278  00113C  0100               	movlb	0	; () banked
  2279  00113E  07F6               	decf	printf@width& (0+255),f,b
  2280  001140  A0D8               	btfss	status,0,c
  2281  001142  07F7               	decf	(printf@width+1)& (0+255),f,b
  2282  001144  0100               	movlb	0	; () banked
  2283  001146  29F6               	incf	printf@width& (0+255),w,b
  2284  001148  E1F6               	bnz	l3027
  2285  00114A  0100               	movlb	0	; () banked
  2286  00114C  29F7               	incf	(printf@width+1)& (0+255),w,b
  2287  00114E  B4D8               	btfsc	status,2,c
  2288  001150  D00B               	goto	l3035
  2289  001152  D7F1               	goto	l3027
  2290  001154                     l3031:
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;doprnt.c: 768: (putch(*cp++) );
  2294  001154  C0E4  FFD9         	movff	printf@cp,fsr2l
  2295  001158  C0E5  FFDA         	movff	printf@cp+1,fsr2h
  2296  00115C  50DF               	movf	indf2,w,c
  2297  00115E  EC46  F018         	call	_putch
  2298  001162  0100               	movlb	0	; () banked
  2299  001164  4BE4               	infsnz	printf@cp& (0+255),f,b
  2300  001166  2BE5               	incf	(printf@cp+1)& (0+255),f,b
  2301  001168                     l3035:
  2302                           
  2303                           ; BSR set to: 0
  2304  001168  0100               	movlb	0	; () banked
  2305  00116A  07E8               	decf	printf@len& (0+255),f,b
  2306  00116C  A0D8               	btfss	status,0,c
  2307  00116E  07E9               	decf	(printf@len+1)& (0+255),f,b
  2308  001170  0100               	movlb	0	; () banked
  2309  001172  29E8               	incf	printf@len& (0+255),w,b
  2310  001174  E1EF               	bnz	l3031
  2311  001176  0100               	movlb	0	; () banked
  2312  001178  29E9               	incf	(printf@len+1)& (0+255),w,b
  2313  00117A  B4D8               	btfsc	status,2,c
  2314  00117C  EFCC  F00C         	goto	l3241
  2315  001180  D7E9               	goto	l3031
  2316  001182                     l3037:
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2320  001182  C0E6  FFD9         	movff	printf@ap,fsr2l
  2321  001186  C0E7  FFDA         	movff	printf@ap+1,fsr2h
  2322  00118A  50DF               	movf	indf2,w,c
  2323  00118C  0100               	movlb	0	; () banked
  2324  00118E  6FFD               	movwf	printf@c& (0+255),b
  2325                           
  2326                           ; BSR set to: 0
  2327  001190  0E02               	movlw	2
  2328  001192  0100               	movlb	0	; () banked
  2329  001194  27E6               	addwf	printf@ap& (0+255),f,b
  2330  001196  0E00               	movlw	0
  2331  001198  23E7               	addwfc	(printf@ap+1)& (0+255),f,b
  2332  00119A                     l3041:
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;doprnt.c: 805: cp = (char *)&c;
  2336  00119A  0EFD               	movlw	low printf@c
  2337  00119C  0100               	movlb	0	; () banked
  2338  00119E  6FE4               	movwf	printf@cp& (0+255),b
  2339  0011A0  0E00               	movlw	high printf@c
  2340  0011A2  0100               	movlb	0	; () banked
  2341  0011A4  6FE5               	movwf	(printf@cp+1)& (0+255),b
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;doprnt.c: 806: len = 1;
  2345  0011A6  0E00               	movlw	0
  2346  0011A8  0100               	movlb	0	; () banked
  2347  0011AA  6FE9               	movwf	(printf@len+1)& (0+255),b
  2348  0011AC  0E01               	movlw	1
  2349  0011AE  6FE8               	movwf	printf@len& (0+255),b
  2350                           
  2351                           ;doprnt.c: 807: goto dostring;
  2352  0011B0  D795               	goto	l3015
  2353  0011B2                     l3047:
  2354  0011B2  C040  FFF6         	movff	printf@f,tblptrl
  2355  0011B6  C041  FFF7         	movff	printf@f+1,tblptrh
  2356  0011BA  4A40               	infsnz	printf@f,f,c
  2357  0011BC  2A41               	incf	printf@f+1,f,c
  2358  0011BE                     	if	0	;tblptru may be non-zero
  2359  0011BE                     	endif
  2360  0011BE                     	if	0	;tblptru may be non-zero
  2361  0011BE                     	endif
  2362  0011BE  0008               	tblrd		*
  2363  0011C0  CFF5 F0FD          	movff	tablat,printf@c
  2364  0011C4  0100               	movlb	0	; () banked
  2365  0011C6  51FD               	movf	printf@c& (0+255),w,b
  2366                           
  2367                           ; Switch size 1, requested type "space"
  2368                           ; Number of cases is 3, Range of values is 0 to 102
  2369                           ; switch strategies available:
  2370                           ; Name         Instructions Cycles
  2371                           ; simple_byte           10     6 (average)
  2372                           ;	Chosen strategy is simple_byte
  2373  0011C8  0A00               	xorlw	0	; case 0
  2374  0011CA  B4D8               	btfsc	status,2,c
  2375  0011CC  0012               	return	
  2376  0011CE  0A63               	xorlw	99	; case 99
  2377  0011D0  B4D8               	btfsc	status,2,c
  2378  0011D2  D7D7               	goto	l3037
  2379  0011D4  0A05               	xorlw	5	; case 102
  2380  0011D6  B4D8               	btfsc	status,2,c
  2381  0011D8  D77E               	goto	l3013
  2382  0011DA  D7DF               	goto	l3041
  2383  0011DC                     l3049:
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;doprnt.c: 825: if(flag & (0x700)) {
  2387  0011DC  0E07               	movlw	7
  2388  0011DE  0100               	movlb	0	; () banked
  2389  0011E0  15EF               	andwf	(printf@flag+1)& (0+255),w,b
  2390  0011E2  B4D8               	btfsc	status,2,c
  2391  0011E4  D328               	goto	l3197
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;doprnt.c: 827: if(flag & 0x1000)
  2395  0011E6  0100               	movlb	0	; () banked
  2396  0011E8  A9EF               	btfss	(printf@flag+1)& (0+255),4,b
  2397  0011EA  D005               	goto	l3055
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;doprnt.c: 829: prec = 6;
  2401  0011EC  0E00               	movlw	0
  2402  0011EE  0100               	movlb	0	; () banked
  2403  0011F0  6FFC               	movwf	(printf@prec+1)& (0+255),b
  2404  0011F2  0E06               	movlw	6
  2405  0011F4  6FFB               	movwf	printf@prec& (0+255),b
  2406  0011F6                     l3055:
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2410  0011F6  C0E6  FFD9         	movff	printf@ap,fsr2l
  2411  0011FA  C0E7  FFDA         	movff	printf@ap+1,fsr2h
  2412  0011FE  CFDE F0F8          	movff	postinc2,printf@fval
  2413  001202  CFDE F0F9          	movff	postinc2,printf@fval+1
  2414  001206  CFDD F0FA          	movff	postdec2,printf@fval+2
  2415                           
  2416                           ; BSR set to: 0
  2417  00120A  0E03               	movlw	3
  2418  00120C  0100               	movlb	0	; () banked
  2419  00120E  27E6               	addwf	printf@ap& (0+255),f,b
  2420  001210  0E00               	movlw	0
  2421  001212  23E7               	addwfc	(printf@ap+1)& (0+255),f,b
  2422                           
  2423                           ; BSR set to: 0
  2424                           ;doprnt.c: 831: if(fval < 0.0) {
  2425  001214  0100               	movlb	0	; () banked
  2426  001216  AFFA               	btfss	(printf@fval+2)& (0+255),7,b
  2427  001218  D011               	goto	l3065
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;doprnt.c: 832: fval = -fval;
  2431  00121A  C0F8  F001         	movff	printf@fval,___ftneg@f1
  2432  00121E  C0F9  F002         	movff	printf@fval+1,___ftneg@f1+1
  2433  001222  C0FA  F003         	movff	printf@fval+2,___ftneg@f1+2
  2434  001226  ECFD  F017         	call	___ftneg	;wreg free
  2435  00122A  C001  F0F8         	movff	?___ftneg,printf@fval
  2436  00122E  C002  F0F9         	movff	?___ftneg+1,printf@fval+1
  2437  001232  C003  F0FA         	movff	?___ftneg+2,printf@fval+2
  2438                           
  2439                           ;doprnt.c: 833: flag |= 0x03;
  2440  001236  0E03               	movlw	3
  2441  001238  0100               	movlb	0	; () banked
  2442  00123A  13EE               	iorwf	printf@flag& (0+255),f,b
  2443  00123C                     l3065:
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;doprnt.c: 834: }
  2447                           ;doprnt.c: 835: exp = 0;
  2448  00123C  0E00               	movlw	0
  2449  00123E  0100               	movlb	0	; () banked
  2450  001240  6FF5               	movwf	(printf@exp+1)& (0+255),b
  2451  001242  0E00               	movlw	0
  2452  001244  6FF4               	movwf	printf@exp& (0+255),b
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;doprnt.c: 836: if( fval!=0) {
  2456  001246  0100               	movlb	0	; () banked
  2457  001248  51F8               	movf	printf@fval& (0+255),w,b
  2458  00124A  0100               	movlb	0	; () banked
  2459  00124C  11F9               	iorwf	(printf@fval+1)& (0+255),w,b
  2460  00124E  0100               	movlb	0	; () banked
  2461  001250  11FA               	iorwf	(printf@fval+2)& (0+255),w,b
  2462  001252  B4D8               	btfsc	status,2,c
  2463  001254  D08B               	goto	l3093
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2467  001256  0E82               	movlw	130
  2468  001258  6E45               	movwf	??_printf& (0+255),c
  2469  00125A  0EFF               	movlw	255
  2470  00125C  6E46               	movwf	(??_printf+1)& (0+255),c
  2471  00125E  C0F8  F047         	movff	printf@fval,??_printf+2
  2472  001262  C0F9  F048         	movff	printf@fval+1,??_printf+3
  2473  001266  C0FA  F049         	movff	printf@fval+2,??_printf+4
  2474  00126A  C0FB  F04A         	movff	printf@fval+3,??_printf+5
  2475  00126E  0E10               	movlw	16
  2476  001270  D005               	goto	u3190
  2477  001272                     u3195:
  2478  001272  90D8               	bcf	status,0,c
  2479  001274  324A               	rrcf	??_printf+5,f,c
  2480  001276  3249               	rrcf	??_printf+4,f,c
  2481  001278  3248               	rrcf	??_printf+3,f,c
  2482  00127A  3247               	rrcf	??_printf+2,f,c
  2483  00127C                     u3190:
  2484  00127C  2EE8               	decfsz	wreg,f,c
  2485  00127E  D7F9               	goto	u3195
  2486  001280  5047               	movf	??_printf+2,w,c
  2487  001282  2445               	addwf	??_printf,w,c
  2488  001284  0100               	movlb	0	; () banked
  2489  001286  6FF4               	movwf	printf@exp& (0+255),b
  2490  001288  0E00               	movlw	0
  2491  00128A  2046               	addwfc	??_printf+1,w,c
  2492  00128C  0100               	movlb	0	; () banked
  2493  00128E  6FF5               	movwf	(printf@exp+1)& (0+255),b
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;doprnt.c: 838: exp--;
  2497  001290  0100               	movlb	0	; () banked
  2498  001292  07F4               	decf	printf@exp& (0+255),f,b
  2499  001294  A0D8               	btfss	status,0,c
  2500  001296  07F5               	decf	(printf@exp+1)& (0+255),f,b
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;doprnt.c: 839: exp *= 3;
  2504  001298  C0F4  F00F         	movff	printf@exp,___wmul@multiplier
  2505  00129C  C0F5  F010         	movff	printf@exp+1,___wmul@multiplier+1
  2506  0012A0  0E00               	movlw	0
  2507  0012A2  6E12               	movwf	___wmul@multiplicand+1,c
  2508  0012A4  0E03               	movlw	3
  2509  0012A6  6E11               	movwf	___wmul@multiplicand,c
  2510  0012A8  ECEA  F017         	call	___wmul	;wreg free
  2511  0012AC  C00F  F0F4         	movff	?___wmul,printf@exp
  2512  0012B0  C010  F0F5         	movff	?___wmul+1,printf@exp+1
  2513                           
  2514                           ;doprnt.c: 840: exp /= 10;
  2515  0012B4  C0F4  F007         	movff	printf@exp,___awdiv@dividend
  2516  0012B8  C0F5  F008         	movff	printf@exp+1,___awdiv@dividend+1
  2517  0012BC  0E00               	movlw	0
  2518  0012BE  6E0A               	movwf	___awdiv@divisor+1,c
  2519  0012C0  0E0A               	movlw	10
  2520  0012C2  6E09               	movwf	___awdiv@divisor,c
  2521  0012C4  EC20  F015         	call	___awdiv	;wreg free
  2522  0012C8  C007  F0F4         	movff	?___awdiv,printf@exp
  2523  0012CC  C008  F0F5         	movff	?___awdiv+1,printf@exp+1
  2524                           
  2525                           ;doprnt.c: 841: if(exp < 0)
  2526  0012D0  0100               	movlb	0	; () banked
  2527  0012D2  AFF5               	btfss	(printf@exp+1)& (0+255),7,b
  2528  0012D4  D004               	goto	l3081
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;doprnt.c: 842: exp--;
  2532  0012D6  0100               	movlb	0	; () banked
  2533  0012D8  07F4               	decf	printf@exp& (0+255),f,b
  2534  0012DA  A0D8               	btfss	status,0,c
  2535  0012DC  07F5               	decf	(printf@exp+1)& (0+255),f,b
  2536  0012DE                     l3081:
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2540  0012DE  0100               	movlb	0	; () banked
  2541  0012E0  51F4               	movf	printf@exp& (0+255),w,b
  2542  0012E2  0800               	sublw	0
  2543  0012E4  ECDB  F00C         	call	_scale
  2544  0012E8  C024  F0F0         	movff	?_scale,printf@tmpval
  2545  0012EC  C025  F0F1         	movff	?_scale+1,printf@tmpval+1
  2546  0012F0  C026  F0F2         	movff	?_scale+2,printf@tmpval+2
  2547                           
  2548                           ;doprnt.c: 847: tmpval.integ *= fval;
  2549  0012F4  C0F0  F015         	movff	printf@tmpval,___ftmul@f1
  2550  0012F8  C0F1  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  2551  0012FC  C0F2  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  2552  001300  C0F8  F018         	movff	printf@fval,___ftmul@f2
  2553  001304  C0F9  F019         	movff	printf@fval+1,___ftmul@f2+1
  2554  001308  C0FA  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2555  00130C  ECF9  F011         	call	___ftmul	;wreg free
  2556  001310  C015  F0F0         	movff	?___ftmul,printf@tmpval
  2557  001314  C016  F0F1         	movff	?___ftmul+1,printf@tmpval+1
  2558  001318  C017  F0F2         	movff	?___ftmul+2,printf@tmpval+2
  2559                           
  2560                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2561  00131C  C0F0  F001         	movff	printf@tmpval,___ftge@ff1
  2562  001320  C0F1  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2563  001324  C0F2  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2564  001328  0E00               	movlw	0
  2565  00132A  6E04               	movwf	___ftge@ff2,c
  2566  00132C  0E80               	movlw	128
  2567  00132E  6E05               	movwf	___ftge@ff2+1,c
  2568  001330  0E3F               	movlw	63
  2569  001332  6E06               	movwf	___ftge@ff2+2,c
  2570  001334  ECD8  F014         	call	___ftge	;wreg free
  2571  001338  B0D8               	btfsc	status,0,c
  2572  00133A  D005               	goto	l3089
  2573                           
  2574                           ;doprnt.c: 849: exp--;
  2575  00133C  0100               	movlb	0	; () banked
  2576  00133E  07F4               	decf	printf@exp& (0+255),f,b
  2577  001340  A0D8               	btfss	status,0,c
  2578  001342  07F5               	decf	(printf@exp+1)& (0+255),f,b
  2579  001344  D013               	goto	l3093
  2580  001346                     l3089:
  2581                           
  2582                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2583  001346  C0F0  F001         	movff	printf@tmpval,___ftge@ff1
  2584  00134A  C0F1  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2585  00134E  C0F2  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2586  001352  0E00               	movlw	0
  2587  001354  6E04               	movwf	___ftge@ff2,c
  2588  001356  0E20               	movlw	32
  2589  001358  6E05               	movwf	___ftge@ff2+1,c
  2590  00135A  0E41               	movlw	65
  2591  00135C  6E06               	movwf	___ftge@ff2+2,c
  2592  00135E  ECD8  F014         	call	___ftge	;wreg free
  2593  001362  A0D8               	btfss	status,0,c
  2594  001364  D003               	goto	l3093
  2595                           
  2596                           ;doprnt.c: 851: exp++;
  2597  001366  0100               	movlb	0	; () banked
  2598  001368  4BF4               	infsnz	printf@exp& (0+255),f,b
  2599  00136A  2BF5               	incf	(printf@exp+1)& (0+255),f,b
  2600  00136C                     l3093:
  2601                           
  2602                           ;doprnt.c: 852: }
  2603                           ;doprnt.c: 1112: if(prec <= 12)
  2604  00136C  0100               	movlb	0	; () banked
  2605  00136E  BFFC               	btfsc	(printf@prec+1)& (0+255),7,b
  2606  001370  D008               	goto	l3095
  2607  001372  0100               	movlb	0	; () banked
  2608  001374  51FC               	movf	(printf@prec+1)& (0+255),w,b
  2609  001376  E11D               	bnz	l3097
  2610  001378  0E0D               	movlw	13
  2611  00137A  0100               	movlb	0	; () banked
  2612  00137C  5DFB               	subwf	printf@prec& (0+255),w,b
  2613  00137E  B0D8               	btfsc	status,0,c
  2614  001380  D018               	goto	l3097
  2615  001382                     l3095:
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;doprnt.c: 1113: fval += fround(prec);
  2619  001382  C0F8  F02E         	movff	printf@fval,___ftadd@f1
  2620  001386  C0F9  F02F         	movff	printf@fval+1,___ftadd@f1+1
  2621  00138A  C0FA  F030         	movff	printf@fval+2,___ftadd@f1+2
  2622  00138E  0100               	movlb	0	; () banked
  2623  001390  51FB               	movf	printf@prec& (0+255),w,b
  2624  001392  ECD3  F00E         	call	_fround
  2625  001396  C024  F031         	movff	?_fround,___ftadd@f2
  2626  00139A  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  2627  00139E  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  2628  0013A2  ECF6  F00F         	call	___ftadd	;wreg free
  2629  0013A6  C02E  F0F8         	movff	?___ftadd,printf@fval
  2630  0013AA  C02F  F0F9         	movff	?___ftadd+1,printf@fval+1
  2631  0013AE  C030  F0FA         	movff	?___ftadd+2,printf@fval+2
  2632  0013B2                     l3097:
  2633                           
  2634                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2635  0013B2  0100               	movlb	0	; () banked
  2636  0013B4  BFF5               	btfsc	(printf@exp+1)& (0+255),7,b
  2637  0013B6  D008               	goto	l3099
  2638  0013B8  0100               	movlb	0	; () banked
  2639  0013BA  51F5               	movf	(printf@exp+1)& (0+255),w,b
  2640  0013BC  E126               	bnz	l3105
  2641  0013BE  0E0A               	movlw	10
  2642  0013C0  0100               	movlb	0	; () banked
  2643  0013C2  5DF4               	subwf	printf@exp& (0+255),w,b
  2644  0013C4  B0D8               	btfsc	status,0,c
  2645  0013C6  D021               	goto	l3105
  2646  0013C8                     l3099:
  2647                           
  2648                           ; BSR set to: 0
  2649  0013C8  0100               	movlb	0	; () banked
  2650  0013CA  51F8               	movf	printf@fval& (0+255),w,b
  2651  0013CC  0100               	movlb	0	; () banked
  2652  0013CE  11F9               	iorwf	(printf@fval+1)& (0+255),w,b
  2653  0013D0  0100               	movlb	0	; () banked
  2654  0013D2  11FA               	iorwf	(printf@fval+2)& (0+255),w,b
  2655  0013D4  B4D8               	btfsc	status,2,c
  2656  0013D6  D05B               	goto	l3119
  2657                           
  2658                           ; BSR set to: 0
  2659  0013D8  C0F8  F02B         	movff	printf@fval,___fttol@f1
  2660  0013DC  C0F9  F02C         	movff	printf@fval+1,___fttol@f1+1
  2661  0013E0  C0FA  F02D         	movff	printf@fval+2,___fttol@f1+2
  2662  0013E4  EC73  F012         	call	___fttol	;wreg free
  2663  0013E8  502B               	movf	?___fttol,w,c
  2664  0013EA  102C               	iorwf	?___fttol+1,w,c
  2665  0013EC  102D               	iorwf	?___fttol+2,w,c
  2666  0013EE  102E               	iorwf	?___fttol+3,w,c
  2667  0013F0  A4D8               	btfss	status,2,c
  2668  0013F2  D04D               	goto	l3119
  2669  0013F4  0100               	movlb	0	; () banked
  2670  0013F6  BFF5               	btfsc	(printf@exp+1)& (0+255),7,b
  2671  0013F8  D04A               	goto	l3119
  2672  0013FA  0100               	movlb	0	; () banked
  2673  0013FC  51F5               	movf	(printf@exp+1)& (0+255),w,b
  2674  0013FE  E105               	bnz	l3105
  2675  001400  0E02               	movlw	2
  2676  001402  0100               	movlb	0	; () banked
  2677  001404  5DF4               	subwf	printf@exp& (0+255),w,b
  2678  001406  A0D8               	btfss	status,0,c
  2679  001408  D042               	goto	l3119
  2680  00140A                     l3105:
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2684  00140A  C0F0  F001         	movff	printf@tmpval,___ftge@ff1
  2685  00140E  C0F1  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2686  001412  C0F2  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2687  001416  0E70               	movlw	112
  2688  001418  6E04               	movwf	___ftge@ff2,c
  2689  00141A  0E89               	movlw	137
  2690  00141C  6E05               	movwf	___ftge@ff2+1,c
  2691  00141E  0E40               	movlw	64
  2692  001420  6E06               	movwf	___ftge@ff2+2,c
  2693  001422  ECD8  F014         	call	___ftge	;wreg free
  2694  001426  B0D8               	btfsc	status,0,c
  2695  001428  D003               	goto	l3109
  2696                           
  2697                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2698  00142A  0100               	movlb	0	; () banked
  2699  00142C  0EF7               	movlw	247
  2700  00142E  D002               	goto	L1
  2701  001430                     l3109:
  2702                           
  2703                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2704  001430  0100               	movlb	0	; () banked
  2705  001432  0EF8               	movlw	248
  2706  001434                     L1:
  2707  001434  27F4               	addwf	printf@exp& (0+255),f,b
  2708  001436  0EFF               	movlw	255
  2709  001438  23F5               	addwfc	(printf@exp+1)& (0+255),f,b
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;doprnt.c: 1124: }
  2713                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2714                           
  2715                           ; BSR set to: 0
  2716  00143A  0100               	movlb	0	; () banked
  2717  00143C  51F4               	movf	printf@exp& (0+255),w,b
  2718  00143E  ECDB  F00C         	call	_scale
  2719  001442  C024  F0F0         	movff	?_scale,printf@tmpval
  2720  001446  C025  F0F1         	movff	?_scale+1,printf@tmpval+1
  2721  00144A  C026  F0F2         	movff	?_scale+2,printf@tmpval+2
  2722                           
  2723                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2724  00144E  C0F8  F001         	movff	printf@fval,__tdiv_to_l_@f1
  2725  001452  C0F9  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2726  001456  C0FA  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2727  00145A  C0F0  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  2728  00145E  C0F1  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  2729  001462  C0F2  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  2730  001466  ECCC  F010         	call	__tdiv_to_l_	;wreg free
  2731  00146A  C001  F0EA         	movff	?__tdiv_to_l_,printf@val
  2732  00146E  C002  F0EB         	movff	?__tdiv_to_l_+1,printf@val+1
  2733  001472  C003  F0EC         	movff	?__tdiv_to_l_+2,printf@val+2
  2734  001476  C004  F0ED         	movff	?__tdiv_to_l_+3,printf@val+3
  2735                           
  2736                           ;doprnt.c: 1129: fval = 0.0;
  2737  00147A  0E00               	movlw	0
  2738  00147C  0100               	movlb	0	; () banked
  2739  00147E  6FF8               	movwf	printf@fval& (0+255),b
  2740  001480  0E00               	movlw	0
  2741  001482  0100               	movlb	0	; () banked
  2742  001484  6FF9               	movwf	(printf@fval+1)& (0+255),b
  2743  001486  0E00               	movlw	0
  2744  001488  0100               	movlb	0	; () banked
  2745  00148A  6FFA               	movwf	(printf@fval+2)& (0+255),b
  2746                           
  2747                           ;doprnt.c: 1130: } else {
  2748  00148C  D033               	goto	l3123
  2749  00148E                     l3119:
  2750                           
  2751                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2752  00148E  C0F8  F02B         	movff	printf@fval,___fttol@f1
  2753  001492  C0F9  F02C         	movff	printf@fval+1,___fttol@f1+1
  2754  001496  C0FA  F02D         	movff	printf@fval+2,___fttol@f1+2
  2755  00149A  EC73  F012         	call	___fttol	;wreg free
  2756  00149E  C02B  F0EA         	movff	?___fttol,printf@val
  2757  0014A2  C02C  F0EB         	movff	?___fttol+1,printf@val+1
  2758  0014A6  C02D  F0EC         	movff	?___fttol+2,printf@val+2
  2759  0014AA  C02E  F0ED         	movff	?___fttol+3,printf@val+3
  2760                           
  2761                           ;doprnt.c: 1132: fval -= (double)val;
  2762  0014AE  C0F8  F03A         	movff	printf@fval,___ftsub@f1
  2763  0014B2  C0F9  F03B         	movff	printf@fval+1,___ftsub@f1+1
  2764  0014B6  C0FA  F03C         	movff	printf@fval+2,___ftsub@f1+2
  2765  0014BA  C0EA  F009         	movff	printf@val,___lltoft@c
  2766  0014BE  C0EB  F00A         	movff	printf@val+1,___lltoft@c+1
  2767  0014C2  C0EC  F00B         	movff	printf@val+2,___lltoft@c+2
  2768  0014C6  C0ED  F00C         	movff	printf@val+3,___lltoft@c+3
  2769  0014CA  EC81  F016         	call	___lltoft	;wreg free
  2770  0014CE  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2771  0014D2  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2772  0014D6  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2773  0014DA  EC6B  F017         	call	___ftsub	;wreg free
  2774  0014DE  C03A  F0F8         	movff	?___ftsub,printf@fval
  2775  0014E2  C03B  F0F9         	movff	?___ftsub+1,printf@fval+1
  2776  0014E6  C03C  F0FA         	movff	?___ftsub+2,printf@fval+2
  2777                           
  2778                           ;doprnt.c: 1133: exp = 0;
  2779  0014EA  0E00               	movlw	0
  2780  0014EC  0100               	movlb	0	; () banked
  2781  0014EE  6FF5               	movwf	(printf@exp+1)& (0+255),b
  2782  0014F0  0E00               	movlw	0
  2783  0014F2  6FF4               	movwf	printf@exp& (0+255),b
  2784  0014F4                     l3123:
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;doprnt.c: 1134: }
  2788                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2789  0014F4  0E01               	movlw	1
  2790  0014F6  0100               	movlb	0	; () banked
  2791  0014F8  6FFD               	movwf	printf@c& (0+255),b
  2792  0014FA                     l3125:
  2793                           
  2794                           ; BSR set to: 0
  2795  0014FA  0E0A               	movlw	10
  2796  0014FC  0100               	movlb	0	; () banked
  2797  0014FE  19FD               	xorwf	printf@c& (0+255),w,b
  2798  001500  B4D8               	btfsc	status,2,c
  2799  001502  D01E               	goto	l3137
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;doprnt.c: 1137: if(val < dpowers[c])
  2803                           
  2804                           ; BSR set to: 0
  2805                           
  2806                           ; BSR set to: 0
  2807  001504  0100               	movlb	0	; () banked
  2808  001506  51FD               	movf	printf@c& (0+255),w,b
  2809  001508  0D04               	mullw	4
  2810  00150A  0E01               	movlw	low _dpowers
  2811  00150C  24F3               	addwf	prodl,w,c
  2812  00150E  6EF6               	movwf	tblptrl,c
  2813  001510  0E0F               	movlw	high _dpowers
  2814  001512  20F4               	addwfc	prodh,w,c
  2815  001514  6EF7               	movwf	tblptrh,c
  2816  001516                     	if	0	;There are less than 3 active tblptr bytes
  2817  001516                     	endif
  2818  001516  0009               	tblrd		*+
  2819  001518  50F5               	movf	tablat,w,c
  2820  00151A  0100               	movlb	0	; () banked
  2821  00151C  5DEA               	subwf	printf@val& (0+255),w,b
  2822  00151E  0009               	tblrd		*+
  2823  001520  50F5               	movf	tablat,w,c
  2824  001522  0100               	movlb	0	; () banked
  2825  001524  59EB               	subwfb	(printf@val+1)& (0+255),w,b
  2826  001526  0009               	tblrd		*+
  2827  001528  50F5               	movf	tablat,w,c
  2828  00152A  0100               	movlb	0	; () banked
  2829  00152C  59EC               	subwfb	(printf@val+2)& (0+255),w,b
  2830  00152E  0009               	tblrd		*+
  2831  001530  50F5               	movf	tablat,w,c
  2832  001532  0100               	movlb	0	; () banked
  2833  001534  59ED               	subwfb	(printf@val+3)& (0+255),w,b
  2834  001536  A0D8               	btfss	status,0,c
  2835  001538  D003               	goto	l3137
  2836                           
  2837                           ; BSR set to: 0
  2838                           
  2839                           ; BSR set to: 0
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;doprnt.c: 1138: break;
  2843  00153A  0100               	movlb	0	; () banked
  2844  00153C  2BFD               	incf	printf@c& (0+255),f,b
  2845  00153E  D7DD               	goto	l3125
  2846  001540                     l3137:
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;doprnt.c: 1142: width -= prec + c + exp;
  2850  001540  C0FD  F045         	movff	printf@c,??_printf
  2851  001544  6A46               	clrf	(??_printf+1)& (0+255),c
  2852  001546  BE45               	btfsc	??_printf& (0+255),7,c
  2853  001548  0646               	decf	(??_printf+1)& (0+255),f,c
  2854  00154A  0100               	movlb	0	; () banked
  2855  00154C  51FB               	movf	printf@prec& (0+255),w,b
  2856  00154E  2645               	addwf	??_printf,f,c
  2857  001550  0100               	movlb	0	; () banked
  2858  001552  51FC               	movf	(printf@prec+1)& (0+255),w,b
  2859  001554  2246               	addwfc	??_printf+1,f,c
  2860  001556  0100               	movlb	0	; () banked
  2861  001558  51F4               	movf	printf@exp& (0+255),w,b
  2862  00155A  2645               	addwf	??_printf,f,c
  2863  00155C  0100               	movlb	0	; () banked
  2864  00155E  51F5               	movf	(printf@exp+1)& (0+255),w,b
  2865  001560  2246               	addwfc	??_printf+1,f,c
  2866  001562  5045               	movf	??_printf,w,c
  2867  001564  0100               	movlb	0	; () banked
  2868  001566  5FF6               	subwf	printf@width& (0+255),f,b
  2869  001568  5046               	movf	??_printf+1,w,c
  2870  00156A  0100               	movlb	0	; () banked
  2871  00156C  5BF7               	subwfb	(printf@width+1)& (0+255),f,b
  2872                           
  2873                           ;doprnt.c: 1143: if(
  2874                           ;doprnt.c: 1147: prec)
  2875  00156E  0100               	movlb	0	; () banked
  2876  001570  51FB               	movf	printf@prec& (0+255),w,b
  2877  001572  0100               	movlb	0	; () banked
  2878  001574  11FC               	iorwf	(printf@prec+1)& (0+255),w,b
  2879  001576  B4D8               	btfsc	status,2,c
  2880  001578  D004               	goto	l3141
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;doprnt.c: 1148: width--;
  2884  00157A  0100               	movlb	0	; () banked
  2885  00157C  07F6               	decf	printf@width& (0+255),f,b
  2886  00157E  A0D8               	btfss	status,0,c
  2887  001580  07F7               	decf	(printf@width+1)& (0+255),f,b
  2888  001582                     l3141:
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;doprnt.c: 1149: if(flag & 0x03)
  2892  001582  0E03               	movlw	3
  2893  001584  0100               	movlb	0	; () banked
  2894  001586  15EE               	andwf	printf@flag& (0+255),w,b
  2895  001588  6E45               	movwf	??_printf& (0+255),c
  2896  00158A  0E00               	movlw	0
  2897  00158C  0100               	movlb	0	; () banked
  2898  00158E  15EF               	andwf	(printf@flag+1)& (0+255),w,b
  2899  001590  6E46               	movwf	(??_printf+1)& (0+255),c
  2900  001592  5045               	movf	??_printf,w,c
  2901  001594  1046               	iorwf	??_printf+1,w,c
  2902  001596  B4D8               	btfsc	status,2,c
  2903  001598  D008               	goto	l3149
  2904  00159A  D003               	goto	l3147
  2905  00159C                     l3145:
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;doprnt.c: 1181: (putch(' ') );
  2909  00159C  0E20               	movlw	32
  2910  00159E  EC46  F018         	call	_putch
  2911  0015A2                     l3147:
  2912                           
  2913                           ;doprnt.c: 1182: width--;
  2914  0015A2  0100               	movlb	0	; () banked
  2915  0015A4  07F6               	decf	printf@width& (0+255),f,b
  2916  0015A6  A0D8               	btfss	status,0,c
  2917  0015A8  07F7               	decf	(printf@width+1)& (0+255),f,b
  2918  0015AA                     l3149:
  2919                           
  2920                           ; BSR set to: 0
  2921  0015AA  0100               	movlb	0	; () banked
  2922  0015AC  BFF7               	btfsc	(printf@width+1)& (0+255),7,b
  2923  0015AE  D007               	goto	l3151
  2924  0015B0  0100               	movlb	0	; () banked
  2925  0015B2  51F7               	movf	(printf@width+1)& (0+255),w,b
  2926  0015B4  E1F3               	bnz	l3145
  2927  0015B6  0100               	movlb	0	; () banked
  2928  0015B8  05F6               	decf	printf@width& (0+255),w,b
  2929  0015BA  B0D8               	btfsc	status,0,c
  2930  0015BC  D7EF               	goto	l3145
  2931  0015BE                     l3151:
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;doprnt.c: 1183: }
  2935                           ;doprnt.c: 1188: if(flag & 0x03)
  2936  0015BE  0E03               	movlw	3
  2937  0015C0  0100               	movlb	0	; () banked
  2938  0015C2  15EE               	andwf	printf@flag& (0+255),w,b
  2939  0015C4  6E45               	movwf	??_printf& (0+255),c
  2940  0015C6  0E00               	movlw	0
  2941  0015C8  0100               	movlb	0	; () banked
  2942  0015CA  15EF               	andwf	(printf@flag+1)& (0+255),w,b
  2943  0015CC  6E46               	movwf	(??_printf+1)& (0+255),c
  2944  0015CE  5045               	movf	??_printf,w,c
  2945  0015D0  1046               	iorwf	??_printf+1,w,c
  2946  0015D2  B4D8               	btfsc	status,2,c
  2947  0015D4  D04A               	goto	l3161
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;doprnt.c: 1190: (putch('-') );
  2951  0015D6  0E2D               	movlw	45
  2952  0015D8  EC46  F018         	call	_putch
  2953                           
  2954                           ;doprnt.c: 1195: }
  2955                           ;doprnt.c: 1196: while(c--) {
  2956  0015DC  D046               	goto	l3161
  2957  0015DE                     l3155:
  2958                           
  2959                           ;doprnt.c: 1200: {
  2960                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2961  0015DE  C0EA  F001         	movff	printf@val,___lldiv@dividend
  2962  0015E2  C0EB  F002         	movff	printf@val+1,___lldiv@dividend+1
  2963  0015E6  C0EC  F003         	movff	printf@val+2,___lldiv@dividend+2
  2964  0015EA  C0ED  F004         	movff	printf@val+3,___lldiv@dividend+3
  2965  0015EE  0100               	movlb	0	; () banked
  2966  0015F0  51FD               	movf	printf@c& (0+255),w,b
  2967  0015F2  0D04               	mullw	4
  2968  0015F4  0E01               	movlw	low _dpowers
  2969  0015F6  24F3               	addwf	prodl,w,c
  2970  0015F8  6EF6               	movwf	tblptrl,c
  2971  0015FA  0E0F               	movlw	high _dpowers
  2972  0015FC  20F4               	addwfc	prodh,w,c
  2973  0015FE  6EF7               	movwf	tblptrh,c
  2974  001600                     	if	0	;There are less than 3 active tblptr bytes
  2975  001600                     	endif
  2976  001600  0009               	tblrd		*+
  2977  001602  CFF5 F005          	movff	tablat,___lldiv@divisor
  2978  001606  0009               	tblrd		*+
  2979  001608  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2980  00160C  0009               	tblrd		*+
  2981  00160E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2982  001612  000A               	tblrd		*-
  2983  001614  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2984  001618  EC62  F015         	call	___lldiv	;wreg free
  2985  00161C  C001  F0F0         	movff	?___lldiv,printf@tmpval
  2986  001620  C002  F0F1         	movff	?___lldiv+1,printf@tmpval+1
  2987  001624  C003  F0F2         	movff	?___lldiv+2,printf@tmpval+2
  2988  001628  C004  F0F3         	movff	?___lldiv+3,printf@tmpval+3
  2989                           
  2990                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2991  00162C  C0F0  F001         	movff	printf@tmpval,___llmod@dividend
  2992  001630  C0F1  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  2993  001634  C0F2  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  2994  001638  C0F3  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  2995  00163C  0E0A               	movlw	10
  2996  00163E  6E05               	movwf	___llmod@divisor,c
  2997  001640  0E00               	movlw	0
  2998  001642  6E06               	movwf	___llmod@divisor+1,c
  2999  001644  0E00               	movlw	0
  3000  001646  6E07               	movwf	___llmod@divisor+2,c
  3001  001648  0E00               	movlw	0
  3002  00164A  6E08               	movwf	___llmod@divisor+3,c
  3003  00164C  EC4E  F016         	call	___llmod	;wreg free
  3004  001650  C001  F0F0         	movff	?___llmod,printf@tmpval
  3005  001654  C002  F0F1         	movff	?___llmod+1,printf@tmpval+1
  3006  001658  C003  F0F2         	movff	?___llmod+2,printf@tmpval+2
  3007  00165C  C004  F0F3         	movff	?___llmod+3,printf@tmpval+3
  3008                           
  3009                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  3010  001660  0100               	movlb	0	; () banked
  3011  001662  51F0               	movf	printf@tmpval& (0+255),w,b
  3012  001664  0F30               	addlw	48
  3013  001666  EC46  F018         	call	_putch
  3014  00166A                     l3161:
  3015  00166A  0100               	movlb	0	; () banked
  3016  00166C  07FD               	decf	printf@c& (0+255),f,b
  3017  00166E  0100               	movlb	0	; () banked
  3018  001670  29FD               	incf	printf@c& (0+255),w,b
  3019  001672  B4D8               	btfsc	status,2,c
  3020  001674  D008               	goto	l3167
  3021  001676  D7B3               	goto	l3155
  3022  001678                     l3163:
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;doprnt.c: 1208: (putch('0') );
  3026  001678  0E30               	movlw	48
  3027  00167A  EC46  F018         	call	_putch
  3028                           
  3029                           ;doprnt.c: 1209: exp--;
  3030  00167E  0100               	movlb	0	; () banked
  3031  001680  07F4               	decf	printf@exp& (0+255),f,b
  3032  001682  A0D8               	btfss	status,0,c
  3033  001684  07F5               	decf	(printf@exp+1)& (0+255),f,b
  3034  001686                     l3167:
  3035                           
  3036                           ; BSR set to: 0
  3037  001686  0100               	movlb	0	; () banked
  3038  001688  BFF5               	btfsc	(printf@exp+1)& (0+255),7,b
  3039  00168A  D007               	goto	l3169
  3040  00168C  0100               	movlb	0	; () banked
  3041  00168E  51F5               	movf	(printf@exp+1)& (0+255),w,b
  3042  001690  E1F3               	bnz	l3163
  3043  001692  0100               	movlb	0	; () banked
  3044  001694  05F4               	decf	printf@exp& (0+255),w,b
  3045  001696  B0D8               	btfsc	status,0,c
  3046  001698  D7EF               	goto	l3163
  3047  00169A                     l3169:
  3048                           
  3049                           ; BSR set to: 0
  3050                           ;doprnt.c: 1210: }
  3051                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3052  00169A  0100               	movlb	0	; () banked
  3053  00169C  BFFC               	btfsc	(printf@prec+1)& (0+255),7,b
  3054  00169E  D00C               	goto	l337
  3055  0016A0  0100               	movlb	0	; () banked
  3056  0016A2  51FC               	movf	(printf@prec+1)& (0+255),w,b
  3057  0016A4  E105               	bnz	u3380
  3058  0016A6  0E09               	movlw	9
  3059  0016A8  0100               	movlb	0	; () banked
  3060  0016AA  5DFB               	subwf	printf@prec& (0+255),w,b
  3061  0016AC  A0D8               	btfss	status,0,c
  3062  0016AE  D004               	goto	l337
  3063  0016B0                     u3380:
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3067  0016B0  0E08               	movlw	8
  3068  0016B2  0100               	movlb	0	; () banked
  3069  0016B4  6FFD               	movwf	printf@c& (0+255),b
  3070  0016B6  D002               	goto	l3173
  3071  0016B8                     l337:
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;doprnt.c: 1213: else
  3075                           ;doprnt.c: 1214: c = prec;
  3076  0016B8  C0FB  F0FD         	movff	printf@prec,printf@c
  3077  0016BC                     l3173:
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;doprnt.c: 1215: prec -= c;
  3081  0016BC  0100               	movlb	0	; () banked
  3082  0016BE  51FD               	movf	printf@c& (0+255),w,b
  3083  0016C0  0100               	movlb	0	; () banked
  3084  0016C2  5FFB               	subwf	printf@prec& (0+255),f,b
  3085  0016C4  0E00               	movlw	0
  3086  0016C6  0100               	movlb	0	; () banked
  3087  0016C8  BFFD               	btfsc	printf@c& (0+255),7,b
  3088  0016CA  0EFF               	movlw	255
  3089  0016CC  0100               	movlb	0	; () banked
  3090  0016CE  5BFC               	subwfb	(printf@prec+1)& (0+255),f,b
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;doprnt.c: 1219: if(c)
  3094  0016D0  0100               	movlb	0	; () banked
  3095  0016D2  51FD               	movf	printf@c& (0+255),w,b
  3096  0016D4  0100               	movlb	0	; () banked
  3097  0016D6  B4D8               	btfsc	status,2,c
  3098  0016D8  D003               	goto	l3179
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;doprnt.c: 1221: (putch('.') );
  3102  0016DA  0E2E               	movlw	46
  3103  0016DC  EC46  F018         	call	_putch
  3104  0016E0                     l3179:
  3105                           
  3106                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3107  0016E0  0100               	movlb	0	; () banked
  3108  0016E2  51FD               	movf	printf@c& (0+255),w,b
  3109  0016E4  ECDB  F00C         	call	_scale
  3110  0016E8  C024  F0E1         	movff	?_scale,_printf$1834
  3111  0016EC  C025  F0E2         	movff	?_scale+1,_printf$1834+1
  3112  0016F0  C026  F0E3         	movff	?_scale+2,_printf$1834+2
  3113                           
  3114                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3115  0016F4  C0F8  F018         	movff	printf@fval,___ftmul@f2
  3116  0016F8  C0F9  F019         	movff	printf@fval+1,___ftmul@f2+1
  3117  0016FC  C0FA  F01A         	movff	printf@fval+2,___ftmul@f2+2
  3118  001700  C0E1  F015         	movff	_printf$1834,___ftmul@f1
  3119  001704  C0E2  F016         	movff	_printf$1834+1,___ftmul@f1+1
  3120  001708  C0E3  F017         	movff	_printf$1834+2,___ftmul@f1+2
  3121  00170C  ECF9  F011         	call	___ftmul	;wreg free
  3122  001710  C015  F02B         	movff	?___ftmul,___fttol@f1
  3123  001714  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  3124  001718  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  3125  00171C  EC73  F012         	call	___fttol	;wreg free
  3126  001720  C02B  F0EA         	movff	?___fttol,printf@val
  3127  001724  C02C  F0EB         	movff	?___fttol+1,printf@val+1
  3128  001728  C02D  F0EC         	movff	?___fttol+2,printf@val+2
  3129  00172C  C02E  F0ED         	movff	?___fttol+3,printf@val+3
  3130                           
  3131                           ;doprnt.c: 1228: while(c--) {
  3132  001730  D06D               	goto	l3189
  3133  001732                     l3183:
  3134                           
  3135                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3136  001732  C0EA  F001         	movff	printf@val,___lldiv@dividend
  3137  001736  C0EB  F002         	movff	printf@val+1,___lldiv@dividend+1
  3138  00173A  C0EC  F003         	movff	printf@val+2,___lldiv@dividend+2
  3139  00173E  C0ED  F004         	movff	printf@val+3,___lldiv@dividend+3
  3140  001742  0100               	movlb	0	; () banked
  3141  001744  51FD               	movf	printf@c& (0+255),w,b
  3142  001746  0D04               	mullw	4
  3143  001748  0E01               	movlw	low _dpowers
  3144  00174A  24F3               	addwf	prodl,w,c
  3145  00174C  6EF6               	movwf	tblptrl,c
  3146  00174E  0E0F               	movlw	high _dpowers
  3147  001750  20F4               	addwfc	prodh,w,c
  3148  001752  6EF7               	movwf	tblptrh,c
  3149  001754                     	if	0	;There are less than 3 active tblptr bytes
  3150  001754                     	endif
  3151  001754  0009               	tblrd		*+
  3152  001756  CFF5 F005          	movff	tablat,___lldiv@divisor
  3153  00175A  0009               	tblrd		*+
  3154  00175C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3155  001760  0009               	tblrd		*+
  3156  001762  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3157  001766  000A               	tblrd		*-
  3158  001768  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3159  00176C  EC62  F015         	call	___lldiv	;wreg free
  3160  001770  C001  F0F0         	movff	?___lldiv,printf@tmpval
  3161  001774  C002  F0F1         	movff	?___lldiv+1,printf@tmpval+1
  3162  001778  C003  F0F2         	movff	?___lldiv+2,printf@tmpval+2
  3163  00177C  C004  F0F3         	movff	?___lldiv+3,printf@tmpval+3
  3164                           
  3165                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3166  001780  C0F0  F001         	movff	printf@tmpval,___llmod@dividend
  3167  001784  C0F1  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  3168  001788  C0F2  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  3169  00178C  C0F3  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  3170  001790  0E0A               	movlw	10
  3171  001792  6E05               	movwf	___llmod@divisor,c
  3172  001794  0E00               	movlw	0
  3173  001796  6E06               	movwf	___llmod@divisor+1,c
  3174  001798  0E00               	movlw	0
  3175  00179A  6E07               	movwf	___llmod@divisor+2,c
  3176  00179C  0E00               	movlw	0
  3177  00179E  6E08               	movwf	___llmod@divisor+3,c
  3178  0017A0  EC4E  F016         	call	___llmod	;wreg free
  3179  0017A4  C001  F0F0         	movff	?___llmod,printf@tmpval
  3180  0017A8  C002  F0F1         	movff	?___llmod+1,printf@tmpval+1
  3181  0017AC  C003  F0F2         	movff	?___llmod+2,printf@tmpval+2
  3182  0017B0  C004  F0F3         	movff	?___llmod+3,printf@tmpval+3
  3183                           
  3184                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  3185  0017B4  0100               	movlb	0	; () banked
  3186  0017B6  51F0               	movf	printf@tmpval& (0+255),w,b
  3187  0017B8  0F30               	addlw	48
  3188  0017BA  EC46  F018         	call	_putch
  3189                           
  3190                           ;doprnt.c: 1232: val %= dpowers[c];
  3191  0017BE  C0EA  F001         	movff	printf@val,___llmod@dividend
  3192  0017C2  C0EB  F002         	movff	printf@val+1,___llmod@dividend+1
  3193  0017C6  C0EC  F003         	movff	printf@val+2,___llmod@dividend+2
  3194  0017CA  C0ED  F004         	movff	printf@val+3,___llmod@dividend+3
  3195  0017CE  0100               	movlb	0	; () banked
  3196  0017D0  51FD               	movf	printf@c& (0+255),w,b
  3197  0017D2  0D04               	mullw	4
  3198  0017D4  0E01               	movlw	low _dpowers
  3199  0017D6  24F3               	addwf	prodl,w,c
  3200  0017D8  6EF6               	movwf	tblptrl,c
  3201  0017DA  0E0F               	movlw	high _dpowers
  3202  0017DC  20F4               	addwfc	prodh,w,c
  3203  0017DE  6EF7               	movwf	tblptrh,c
  3204  0017E0                     	if	0	;There are less than 3 active tblptr bytes
  3205  0017E0                     	endif
  3206  0017E0  0009               	tblrd		*+
  3207  0017E2  CFF5 F005          	movff	tablat,___llmod@divisor
  3208  0017E6  0009               	tblrd		*+
  3209  0017E8  CFF5 F006          	movff	tablat,___llmod@divisor+1
  3210  0017EC  0009               	tblrd		*+
  3211  0017EE  CFF5 F007          	movff	tablat,___llmod@divisor+2
  3212  0017F2  000A               	tblrd		*-
  3213  0017F4  CFF5 F008          	movff	tablat,___llmod@divisor+3
  3214  0017F8  EC4E  F016         	call	___llmod	;wreg free
  3215  0017FC  C001  F0EA         	movff	?___llmod,printf@val
  3216  001800  C002  F0EB         	movff	?___llmod+1,printf@val+1
  3217  001804  C003  F0EC         	movff	?___llmod+2,printf@val+2
  3218  001808  C004  F0ED         	movff	?___llmod+3,printf@val+3
  3219  00180C                     l3189:
  3220  00180C  0100               	movlb	0	; () banked
  3221  00180E  07FD               	decf	printf@c& (0+255),f,b
  3222  001810  0100               	movlb	0	; () banked
  3223  001812  29FD               	incf	printf@c& (0+255),w,b
  3224  001814  B4D8               	btfsc	status,2,c
  3225  001816  D008               	goto	l3195
  3226  001818  D78C               	goto	l3183
  3227  00181A                     l3191:
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;doprnt.c: 1236: (putch('0') );
  3231  00181A  0E30               	movlw	48
  3232  00181C  EC46  F018         	call	_putch
  3233                           
  3234                           ;doprnt.c: 1237: prec--;
  3235  001820  0100               	movlb	0	; () banked
  3236  001822  07FB               	decf	printf@prec& (0+255),f,b
  3237  001824  A0D8               	btfss	status,0,c
  3238  001826  07FC               	decf	(printf@prec+1)& (0+255),f,b
  3239  001828                     l3195:
  3240                           
  3241                           ; BSR set to: 0
  3242  001828  0100               	movlb	0	; () banked
  3243  00182A  51FB               	movf	printf@prec& (0+255),w,b
  3244  00182C  0100               	movlb	0	; () banked
  3245  00182E  11FC               	iorwf	(printf@prec+1)& (0+255),w,b
  3246  001830  B4D8               	btfsc	status,2,c
  3247  001832  D0B2               	goto	l3241
  3248  001834  D7F2               	goto	l3191
  3249  001836                     l3197:
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;doprnt.c: 1246: }
  3253                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3254  001836  0100               	movlb	0	; () banked
  3255  001838  51FB               	movf	printf@prec& (0+255),w,b
  3256  00183A  0100               	movlb	0	; () banked
  3257  00183C  11FC               	iorwf	(printf@prec+1)& (0+255),w,b
  3258  00183E  A4D8               	btfss	status,2,c
  3259  001840  D00D               	goto	l3203
  3260                           
  3261                           ; BSR set to: 0
  3262  001842  0100               	movlb	0	; () banked
  3263  001844  51EA               	movf	printf@val& (0+255),w,b
  3264  001846  0100               	movlb	0	; () banked
  3265  001848  11EB               	iorwf	(printf@val+1)& (0+255),w,b
  3266  00184A  0100               	movlb	0	; () banked
  3267  00184C  11EC               	iorwf	(printf@val+2)& (0+255),w,b
  3268  00184E  0100               	movlb	0	; () banked
  3269  001850  11ED               	iorwf	(printf@val+3)& (0+255),w,b
  3270  001852  A4D8               	btfss	status,2,c
  3271  001854  D003               	goto	l3203
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;doprnt.c: 1291: prec++;
  3275  001856  0100               	movlb	0	; () banked
  3276  001858  4BFB               	infsnz	printf@prec& (0+255),f,b
  3277  00185A  2BFC               	incf	(printf@prec+1)& (0+255),f,b
  3278  00185C                     l3203:
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;doprnt.c: 1339: if(c < prec)
  3282  00185C  0E80               	movlw	128
  3283  00185E  0100               	movlb	0	; () banked
  3284  001860  BFFD               	btfsc	printf@c& (0+255),7,b
  3285  001862  0E7F               	movlw	127
  3286  001864  6E45               	movwf	??_printf& (0+255),c
  3287  001866  0100               	movlb	0	; () banked
  3288  001868  51FB               	movf	printf@prec& (0+255),w,b
  3289  00186A  0100               	movlb	0	; () banked
  3290  00186C  5DFD               	subwf	printf@c& (0+255),w,b
  3291  00186E  0100               	movlb	0	; () banked
  3292  001870  51FC               	movf	(printf@prec+1)& (0+255),w,b
  3293  001872  0A80               	xorlw	128
  3294  001874  5845               	subwfb	??_printf& (0+255),w,c
  3295  001876  B0D8               	btfsc	status,0,c
  3296  001878  D003               	goto	l3207
  3297                           
  3298                           ; BSR set to: 0
  3299                           ;doprnt.c: 1340: c = prec;
  3300  00187A  C0FB  F0FD         	movff	printf@prec,printf@c
  3301  00187E  D016               	goto	l3211
  3302  001880                     l3207:
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;doprnt.c: 1341: else if(prec < c)
  3306  001880  0100               	movlb	0	; () banked
  3307  001882  51FC               	movf	(printf@prec+1)& (0+255),w,b
  3308  001884  0A80               	xorlw	128
  3309  001886  6E45               	movwf	??_printf& (0+255),c
  3310  001888  0100               	movlb	0	; () banked
  3311  00188A  51FD               	movf	printf@c& (0+255),w,b
  3312  00188C  0100               	movlb	0	; () banked
  3313  00188E  5DFB               	subwf	printf@prec& (0+255),w,b
  3314  001890  0E80               	movlw	128
  3315  001892  0100               	movlb	0	; () banked
  3316  001894  BFFD               	btfsc	printf@c& (0+255),7,b
  3317  001896  0E7F               	movlw	127
  3318  001898  5845               	subwfb	??_printf& (0+255),w,c
  3319  00189A  B0D8               	btfsc	status,0,c
  3320  00189C  D007               	goto	l3211
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;doprnt.c: 1342: prec = c;
  3324  00189E  0100               	movlb	0	; () banked
  3325  0018A0  51FD               	movf	printf@c& (0+255),w,b
  3326  0018A2  0100               	movlb	0	; () banked
  3327  0018A4  6FFB               	movwf	printf@prec& (0+255),b
  3328  0018A6  6BFC               	clrf	(printf@prec+1)& (0+255),b
  3329  0018A8  BFFB               	btfsc	printf@prec& (0+255),7,b
  3330  0018AA  07FC               	decf	(printf@prec+1)& (0+255),f,b
  3331  0018AC                     l3211:
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3335  0018AC  0100               	movlb	0	; () banked
  3336  0018AE  51F6               	movf	printf@width& (0+255),w,b
  3337  0018B0  0100               	movlb	0	; () banked
  3338  0018B2  11F7               	iorwf	(printf@width+1)& (0+255),w,b
  3339  0018B4  B4D8               	btfsc	status,2,c
  3340  0018B6  D010               	goto	l3217
  3341                           
  3342                           ; BSR set to: 0
  3343  0018B8  0E03               	movlw	3
  3344  0018BA  0100               	movlb	0	; () banked
  3345  0018BC  15EE               	andwf	printf@flag& (0+255),w,b
  3346  0018BE  6E45               	movwf	??_printf& (0+255),c
  3347  0018C0  0E00               	movlw	0
  3348  0018C2  0100               	movlb	0	; () banked
  3349  0018C4  15EF               	andwf	(printf@flag+1)& (0+255),w,b
  3350  0018C6  6E46               	movwf	(??_printf+1)& (0+255),c
  3351  0018C8  5045               	movf	??_printf,w,c
  3352  0018CA  1046               	iorwf	??_printf+1,w,c
  3353  0018CC  B4D8               	btfsc	status,2,c
  3354  0018CE  D004               	goto	l3217
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;doprnt.c: 1346: width--;
  3358  0018D0  0100               	movlb	0	; () banked
  3359  0018D2  07F6               	decf	printf@width& (0+255),f,b
  3360  0018D4  A0D8               	btfss	status,0,c
  3361  0018D6  07F7               	decf	(printf@width+1)& (0+255),f,b
  3362  0018D8                     l3217:
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3366  0018D8  0100               	movlb	0	; () banked
  3367  0018DA  ADEF               	btfss	(printf@flag+1)& (0+255),6,b
  3368  0018DC  D01C               	goto	l3225
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;doprnt.c: 1349: if(width > prec)
  3372  0018DE  0100               	movlb	0	; () banked
  3373  0018E0  51F6               	movf	printf@width& (0+255),w,b
  3374  0018E2  0100               	movlb	0	; () banked
  3375  0018E4  5DFB               	subwf	printf@prec& (0+255),w,b
  3376  0018E6  0100               	movlb	0	; () banked
  3377  0018E8  51FC               	movf	(printf@prec+1)& (0+255),w,b
  3378  0018EA  0A80               	xorlw	128
  3379  0018EC  6E45               	movwf	??_printf& (0+255),c
  3380  0018EE  0100               	movlb	0	; () banked
  3381  0018F0  51F7               	movf	(printf@width+1)& (0+255),w,b
  3382  0018F2  0A80               	xorlw	128
  3383  0018F4  5845               	subwfb	??_printf& (0+255),w,c
  3384  0018F6  B0D8               	btfsc	status,0,c
  3385  0018F8  D009               	goto	l3223
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;doprnt.c: 1350: width -= prec;
  3389  0018FA  0100               	movlb	0	; () banked
  3390  0018FC  51FB               	movf	printf@prec& (0+255),w,b
  3391  0018FE  0100               	movlb	0	; () banked
  3392  001900  5FF6               	subwf	printf@width& (0+255),f,b
  3393  001902  0100               	movlb	0	; () banked
  3394  001904  51FC               	movf	(printf@prec+1)& (0+255),w,b
  3395  001906  0100               	movlb	0	; () banked
  3396  001908  5BF7               	subwfb	(printf@width+1)& (0+255),f,b
  3397  00190A  D005               	goto	l3225
  3398  00190C                     l3223:
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;doprnt.c: 1351: else
  3402                           ;doprnt.c: 1352: width = 0;
  3403  00190C  0E00               	movlw	0
  3404  00190E  0100               	movlb	0	; () banked
  3405  001910  6FF7               	movwf	(printf@width+1)& (0+255),b
  3406  001912  0E00               	movlw	0
  3407  001914  6FF6               	movwf	printf@width& (0+255),b
  3408  001916                     l3225:
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;doprnt.c: 1353: }
  3412                           ;doprnt.c: 1381: if(width > c)
  3413  001916  0E80               	movlw	128
  3414  001918  0100               	movlb	0	; () banked
  3415  00191A  BFFD               	btfsc	printf@c& (0+255),7,b
  3416  00191C  0E7F               	movlw	127
  3417  00191E  6E45               	movwf	??_printf& (0+255),c
  3418  001920  0100               	movlb	0	; () banked
  3419  001922  51F6               	movf	printf@width& (0+255),w,b
  3420  001924  0100               	movlb	0	; () banked
  3421  001926  5DFD               	subwf	printf@c& (0+255),w,b
  3422  001928  0100               	movlb	0	; () banked
  3423  00192A  51F7               	movf	(printf@width+1)& (0+255),w,b
  3424  00192C  0A80               	xorlw	128
  3425  00192E  5845               	subwfb	??_printf& (0+255),w,c
  3426  001930  B0D8               	btfsc	status,0,c
  3427  001932  D00B               	goto	l3229
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;doprnt.c: 1382: width -= c;
  3431  001934  0100               	movlb	0	; () banked
  3432  001936  51FD               	movf	printf@c& (0+255),w,b
  3433  001938  0100               	movlb	0	; () banked
  3434  00193A  5FF6               	subwf	printf@width& (0+255),f,b
  3435  00193C  0E00               	movlw	0
  3436  00193E  0100               	movlb	0	; () banked
  3437  001940  BFFD               	btfsc	printf@c& (0+255),7,b
  3438  001942  0EFF               	movlw	255
  3439  001944  0100               	movlb	0	; () banked
  3440  001946  5BF7               	subwfb	(printf@width+1)& (0+255),f,b
  3441  001948  D005               	goto	l3231
  3442  00194A                     l3229:
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;doprnt.c: 1383: else
  3446                           ;doprnt.c: 1384: width = 0;
  3447  00194A  0E00               	movlw	0
  3448  00194C  0100               	movlb	0	; () banked
  3449  00194E  6FF7               	movwf	(printf@width+1)& (0+255),b
  3450  001950  0E00               	movlw	0
  3451  001952  6FF6               	movwf	printf@width& (0+255),b
  3452  001954                     l3231:
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;doprnt.c: 1422: {
  3456                           ;doprnt.c: 1424: if(width
  3457                           ;doprnt.c: 1428: )
  3458  001954  0100               	movlb	0	; () banked
  3459  001956  51F6               	movf	printf@width& (0+255),w,b
  3460  001958  0100               	movlb	0	; () banked
  3461  00195A  11F7               	iorwf	(printf@width+1)& (0+255),w,b
  3462  00195C  B4D8               	btfsc	status,2,c
  3463  00195E  D00D               	goto	l3237
  3464  001960                     l3233:
  3465                           
  3466                           ; BSR set to: 0
  3467                           ;doprnt.c: 1430: (putch(' ') );
  3468  001960  0E20               	movlw	32
  3469  001962  EC46  F018         	call	_putch
  3470                           
  3471                           ;doprnt.c: 1431: while(--width);
  3472  001966  0100               	movlb	0	; () banked
  3473  001968  07F6               	decf	printf@width& (0+255),f,b
  3474  00196A  A0D8               	btfss	status,0,c
  3475  00196C  07F7               	decf	(printf@width+1)& (0+255),f,b
  3476  00196E  0100               	movlb	0	; () banked
  3477  001970  51F6               	movf	printf@width& (0+255),w,b
  3478  001972  0100               	movlb	0	; () banked
  3479  001974  11F7               	iorwf	(printf@width+1)& (0+255),w,b
  3480  001976  A4D8               	btfss	status,2,c
  3481  001978  D7F3               	goto	l3233
  3482  00197A                     l3237:
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;doprnt.c: 1438: if(flag & 0x03)
  3486  00197A  0E03               	movlw	3
  3487  00197C  0100               	movlb	0	; () banked
  3488  00197E  15EE               	andwf	printf@flag& (0+255),w,b
  3489  001980  6E45               	movwf	??_printf& (0+255),c
  3490  001982  0E00               	movlw	0
  3491  001984  0100               	movlb	0	; () banked
  3492  001986  15EF               	andwf	(printf@flag+1)& (0+255),w,b
  3493  001988  6E46               	movwf	(??_printf+1)& (0+255),c
  3494  00198A  5045               	movf	??_printf,w,c
  3495  00198C  1046               	iorwf	??_printf+1,w,c
  3496  00198E  B4D8               	btfsc	status,2,c
  3497  001990  D003               	goto	l3241
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;doprnt.c: 1439: (putch('-') );
  3501  001992  0E2D               	movlw	45
  3502  001994  EC46  F018         	call	_putch
  3503  001998                     l3241:
  3504  001998  C040  FFF6         	movff	printf@f,tblptrl
  3505  00199C  C041  FFF7         	movff	printf@f+1,tblptrh
  3506  0019A0  4A40               	infsnz	printf@f,f,c
  3507  0019A2  2A41               	incf	printf@f+1,f,c
  3508  0019A4                     	if	0	;tblptru may be non-zero
  3509  0019A4                     	endif
  3510  0019A4                     	if	0	;tblptru may be non-zero
  3511  0019A4                     	endif
  3512  0019A4  0008               	tblrd		*
  3513  0019A6  CFF5 F0FD          	movff	tablat,printf@c
  3514  0019AA  0100               	movlb	0	; () banked
  3515  0019AC  51FD               	movf	printf@c& (0+255),w,b
  3516  0019AE  B4D8               	btfsc	status,2,c
  3517  0019B0  0012               	return	
  3518  0019B2  EFD4  F007         	goto	l2979
  3519  0019B6                     __end_of_printf:
  3520                           	opt stack 0
  3521                           tblptru	equ	0xFF8
  3522                           tblptrh	equ	0xFF7
  3523                           tblptrl	equ	0xFF6
  3524                           tablat	equ	0xFF5
  3525                           prodh	equ	0xFF4
  3526                           prodl	equ	0xFF3
  3527                           postinc0	equ	0xFEE
  3528                           wreg	equ	0xFE8
  3529                           postdec1	equ	0xFE5
  3530                           fsr1l	equ	0xFE1
  3531                           indf2	equ	0xFDF
  3532                           postinc2	equ	0xFDE
  3533                           postdec2	equ	0xFDD
  3534                           fsr2h	equ	0xFDA
  3535                           fsr2l	equ	0xFD9
  3536                           status	equ	0xFD8
  3537                           
  3538 ;; *************** function _scale *****************
  3539 ;; Defined at:
  3540 ;;		line 425 in file "/opt/microchip/xc8/v1.42/sources/common/doprnt.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;  scl             1    wreg     char 
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;  scl             1   41[COMRAM] char 
  3545 ;; Return value:  Size  Location     Type
  3546 ;;                  3   35[COMRAM] char 
  3547 ;; Registers used:
  3548 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3549 ;; Tracked objects:
  3550 ;;		On entry : 0/0
  3551 ;;		On exit  : 0/0
  3552 ;;		Unchanged: 0/0
  3553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3554 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3555 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3557 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3558 ;;Total ram usage:        7 bytes
  3559 ;; Hardware stack levels used:    1
  3560 ;; Hardware stack levels required when called:    2
  3561 ;; This function calls:
  3562 ;;		___awdiv
  3563 ;;		___awmod
  3564 ;;		___ftmul
  3565 ;;		___wmul
  3566 ;; This function is called by:
  3567 ;;		_printf
  3568 ;; This function uses a non-reentrant model
  3569 ;;
  3570                           
  3571                           	psect	text10
  3572  0019B6                     __ptext10:
  3573                           	opt stack 0
  3574  0019B6                     _scale:
  3575                           	opt stack 27
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;incstack = 0
  3579                           ;scale@scl stored from wreg
  3580  0019B6  6E2A               	movwf	scale@scl,c
  3581                           
  3582                           ;doprnt.c: 428: if(scl < 0) {
  3583  0019B8  AE2A               	btfss	scale@scl,7,c
  3584  0019BA  D0FB               	goto	l2655
  3585                           
  3586                           ;doprnt.c: 429: scl = -scl;
  3587  0019BC  6C2A               	negf	scale@scl,c
  3588                           
  3589                           ;doprnt.c: 430: if(scl>=110)
  3590  0019BE  502A               	movf	scale@scl,w,c
  3591  0019C0  0A80               	xorlw	128
  3592  0019C2  0F12               	addlw	-238
  3593  0019C4  A0D8               	btfss	status,0,c
  3594  0019C6  D091               	goto	l2645
  3595                           
  3596                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3597  0019C8  0E00               	movlw	0
  3598  0019CA  6E12               	movwf	___wmul@multiplicand+1,c
  3599  0019CC  0E03               	movlw	3
  3600  0019CE  6E11               	movwf	___wmul@multiplicand,c
  3601  0019D0  0E00               	movlw	0
  3602  0019D2  6E0A               	movwf	___awdiv@divisor+1,c
  3603  0019D4  0E0A               	movlw	10
  3604  0019D6  6E09               	movwf	___awdiv@divisor,c
  3605  0019D8  0E00               	movlw	0
  3606  0019DA  6E04               	movwf	___awmod@divisor+1,c
  3607  0019DC  0E64               	movlw	100
  3608  0019DE  6E03               	movwf	___awmod@divisor,c
  3609  0019E0  502A               	movf	scale@scl,w,c
  3610  0019E2  6E01               	movwf	___awmod@dividend,c
  3611  0019E4  6A02               	clrf	___awmod@dividend+1,c
  3612  0019E6  BE01               	btfsc	___awmod@dividend,7,c
  3613  0019E8  0602               	decf	___awmod@dividend+1,f,c
  3614  0019EA  ECDF  F015         	call	___awmod	;wreg free
  3615  0019EE  C001  F007         	movff	?___awmod,___awdiv@dividend
  3616  0019F2  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3617  0019F6  EC20  F015         	call	___awdiv	;wreg free
  3618  0019FA  0E09               	movlw	9
  3619  0019FC  2407               	addwf	?___awdiv,w,c
  3620  0019FE  6E0F               	movwf	___wmul@multiplier,c
  3621  001A00  0E00               	movlw	0
  3622  001A02  2008               	addwfc	?___awdiv+1,w,c
  3623  001A04  6E10               	movwf	___wmul@multiplier+1,c
  3624  001A06  ECEA  F017         	call	___wmul	;wreg free
  3625  001A0A  0E50               	movlw	low __npowers_
  3626  001A0C  240F               	addwf	?___wmul,w,c
  3627  001A0E  6EF6               	movwf	tblptrl,c
  3628  001A10  0E0F               	movlw	high __npowers_
  3629  001A12  2010               	addwfc	?___wmul+1,w,c
  3630  001A14  6EF7               	movwf	tblptrh,c
  3631  001A16                     	if	0	;There are less than 3 active tblptr bytes
  3632  001A16                     	endif
  3633  001A16  0009               	tblrd		*+
  3634  001A18  CFF5 F018          	movff	tablat,___ftmul@f2
  3635  001A1C  0009               	tblrd		*+
  3636  001A1E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3637  001A22  000A               	tblrd		*-
  3638  001A24  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3639  001A28  0E00               	movlw	0
  3640  001A2A  6E0A               	movwf	___awdiv@divisor+1,c
  3641  001A2C  0E64               	movlw	100
  3642  001A2E  6E09               	movwf	___awdiv@divisor,c
  3643  001A30  502A               	movf	scale@scl,w,c
  3644  001A32  6E07               	movwf	___awdiv@dividend,c
  3645  001A34  6A08               	clrf	___awdiv@dividend+1,c
  3646  001A36  BE07               	btfsc	___awdiv@dividend,7,c
  3647  001A38  0608               	decf	___awdiv@dividend+1,f,c
  3648  001A3A  EC20  F015         	call	___awdiv	;wreg free
  3649  001A3E  0E12               	movlw	18
  3650  001A40  2407               	addwf	?___awdiv,w,c
  3651  001A42  6E0F               	movwf	___wmul@multiplier,c
  3652  001A44  0E00               	movlw	0
  3653  001A46  2008               	addwfc	?___awdiv+1,w,c
  3654  001A48  6E10               	movwf	___wmul@multiplier+1,c
  3655  001A4A  0E00               	movlw	0
  3656  001A4C  6E12               	movwf	___wmul@multiplicand+1,c
  3657  001A4E  0E03               	movlw	3
  3658  001A50  6E11               	movwf	___wmul@multiplicand,c
  3659  001A52  ECEA  F017         	call	___wmul	;wreg free
  3660  001A56  0E50               	movlw	low __npowers_
  3661  001A58  240F               	addwf	?___wmul,w,c
  3662  001A5A  6EF6               	movwf	tblptrl,c
  3663  001A5C  0E0F               	movlw	high __npowers_
  3664  001A5E  2010               	addwfc	?___wmul+1,w,c
  3665  001A60  6EF7               	movwf	tblptrh,c
  3666  001A62                     	if	0	;There are less than 3 active tblptr bytes
  3667  001A62                     	endif
  3668  001A62  0009               	tblrd		*+
  3669  001A64  CFF5 F015          	movff	tablat,___ftmul@f1
  3670  001A68  0009               	tblrd		*+
  3671  001A6A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3672  001A6E  000A               	tblrd		*-
  3673  001A70  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3674  001A74  ECF9  F011         	call	___ftmul	;wreg free
  3675  001A78  C015  F027         	movff	?___ftmul,_scale$1833
  3676  001A7C  C016  F028         	movff	?___ftmul+1,_scale$1833+1
  3677  001A80  C017  F029         	movff	?___ftmul+2,_scale$1833+2
  3678                           
  3679                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3680  001A84  C027  F015         	movff	_scale$1833,___ftmul@f1
  3681  001A88  C028  F016         	movff	_scale$1833+1,___ftmul@f1+1
  3682  001A8C  C029  F017         	movff	_scale$1833+2,___ftmul@f1+2
  3683  001A90  0E00               	movlw	0
  3684  001A92  6E12               	movwf	___wmul@multiplicand+1,c
  3685  001A94  0E03               	movlw	3
  3686  001A96  6E11               	movwf	___wmul@multiplicand,c
  3687  001A98  0E00               	movlw	0
  3688  001A9A  6E04               	movwf	___awmod@divisor+1,c
  3689  001A9C  0E0A               	movlw	10
  3690  001A9E  6E03               	movwf	___awmod@divisor,c
  3691  001AA0  502A               	movf	scale@scl,w,c
  3692  001AA2  6E01               	movwf	___awmod@dividend,c
  3693  001AA4  6A02               	clrf	___awmod@dividend+1,c
  3694  001AA6  BE01               	btfsc	___awmod@dividend,7,c
  3695  001AA8  0602               	decf	___awmod@dividend+1,f,c
  3696  001AAA  ECDF  F015         	call	___awmod	;wreg free
  3697  001AAE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3698  001AB2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3699  001AB6  ECEA  F017         	call	___wmul	;wreg free
  3700  001ABA  0E50               	movlw	low __npowers_
  3701  001ABC  240F               	addwf	?___wmul,w,c
  3702  001ABE  6EF6               	movwf	tblptrl,c
  3703  001AC0  0E0F               	movlw	high __npowers_
  3704  001AC2  2010               	addwfc	?___wmul+1,w,c
  3705  001AC4  6EF7               	movwf	tblptrh,c
  3706  001AC6                     	if	0	;There are less than 3 active tblptr bytes
  3707  001AC6                     	endif
  3708  001AC6  0009               	tblrd		*+
  3709  001AC8  CFF5 F018          	movff	tablat,___ftmul@f2
  3710  001ACC  0009               	tblrd		*+
  3711  001ACE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3712  001AD2  000A               	tblrd		*-
  3713  001AD4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3714  001AD8  ECF9  F011         	call	___ftmul	;wreg free
  3715  001ADC  C015  F024         	movff	?___ftmul,?_scale
  3716  001AE0  C016  F025         	movff	?___ftmul+1,?_scale+1
  3717  001AE4  C017  F026         	movff	?___ftmul+2,?_scale+2
  3718  001AE8  0012               	return	
  3719  001AEA                     l2645:
  3720                           
  3721                           ;doprnt.c: 432: else if(scl > 10)
  3722  001AEA  502A               	movf	scale@scl,w,c
  3723  001AEC  0A80               	xorlw	128
  3724  001AEE  0F75               	addlw	-139
  3725  001AF0  A0D8               	btfss	status,0,c
  3726  001AF2  D04D               	goto	l2651
  3727                           
  3728                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3729  001AF4  0E00               	movlw	0
  3730  001AF6  6E0A               	movwf	___awdiv@divisor+1,c
  3731  001AF8  0E0A               	movlw	10
  3732  001AFA  6E09               	movwf	___awdiv@divisor,c
  3733  001AFC  502A               	movf	scale@scl,w,c
  3734  001AFE  6E07               	movwf	___awdiv@dividend,c
  3735  001B00  6A08               	clrf	___awdiv@dividend+1,c
  3736  001B02  BE07               	btfsc	___awdiv@dividend,7,c
  3737  001B04  0608               	decf	___awdiv@dividend+1,f,c
  3738  001B06  EC20  F015         	call	___awdiv	;wreg free
  3739  001B0A  0E09               	movlw	9
  3740  001B0C  2407               	addwf	?___awdiv,w,c
  3741  001B0E  6E0F               	movwf	___wmul@multiplier,c
  3742  001B10  0E00               	movlw	0
  3743  001B12  2008               	addwfc	?___awdiv+1,w,c
  3744  001B14  6E10               	movwf	___wmul@multiplier+1,c
  3745  001B16  0E00               	movlw	0
  3746  001B18  6E12               	movwf	___wmul@multiplicand+1,c
  3747  001B1A  0E03               	movlw	3
  3748  001B1C  6E11               	movwf	___wmul@multiplicand,c
  3749  001B1E  ECEA  F017         	call	___wmul	;wreg free
  3750  001B22  0E50               	movlw	low __npowers_
  3751  001B24  240F               	addwf	?___wmul,w,c
  3752  001B26  6EF6               	movwf	tblptrl,c
  3753  001B28  0E0F               	movlw	high __npowers_
  3754  001B2A  2010               	addwfc	?___wmul+1,w,c
  3755  001B2C  6EF7               	movwf	tblptrh,c
  3756  001B2E                     	if	0	;There are less than 3 active tblptr bytes
  3757  001B2E                     	endif
  3758  001B2E  0009               	tblrd		*+
  3759  001B30  CFF5 F015          	movff	tablat,___ftmul@f1
  3760  001B34  0009               	tblrd		*+
  3761  001B36  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3762  001B3A  000A               	tblrd		*-
  3763  001B3C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3764  001B40  0E00               	movlw	0
  3765  001B42  6E12               	movwf	___wmul@multiplicand+1,c
  3766  001B44  0E03               	movlw	3
  3767  001B46  6E11               	movwf	___wmul@multiplicand,c
  3768  001B48  0E00               	movlw	0
  3769  001B4A  6E04               	movwf	___awmod@divisor+1,c
  3770  001B4C  0E0A               	movlw	10
  3771  001B4E  6E03               	movwf	___awmod@divisor,c
  3772  001B50  502A               	movf	scale@scl,w,c
  3773  001B52  6E01               	movwf	___awmod@dividend,c
  3774  001B54  6A02               	clrf	___awmod@dividend+1,c
  3775  001B56  BE01               	btfsc	___awmod@dividend,7,c
  3776  001B58  0602               	decf	___awmod@dividend+1,f,c
  3777  001B5A  ECDF  F015         	call	___awmod	;wreg free
  3778  001B5E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3779  001B62  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3780  001B66  ECEA  F017         	call	___wmul	;wreg free
  3781  001B6A  0E50               	movlw	low __npowers_
  3782  001B6C  240F               	addwf	?___wmul,w,c
  3783  001B6E  6EF6               	movwf	tblptrl,c
  3784  001B70  0E0F               	movlw	high __npowers_
  3785  001B72  2010               	addwfc	?___wmul+1,w,c
  3786  001B74  6EF7               	movwf	tblptrh,c
  3787  001B76                     	if	0	;There are less than 3 active tblptr bytes
  3788  001B76                     	endif
  3789  001B76  0009               	tblrd		*+
  3790  001B78  CFF5 F018          	movff	tablat,___ftmul@f2
  3791  001B7C  0009               	tblrd		*+
  3792  001B7E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3793  001B82  000A               	tblrd		*-
  3794  001B84  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3795  001B88  ECF9  F011         	call	___ftmul	;wreg free
  3796  001B8C  D7A7               	goto	L2
  3797  001B8E                     l2651:
  3798                           
  3799                           ;doprnt.c: 434: return _npowers_[scl];
  3800  001B8E  502A               	movf	scale@scl,w,c
  3801  001B90  0D03               	mullw	3
  3802  001B92  0E50               	movlw	low __npowers_
  3803  001B94  24F3               	addwf	prodl,w,c
  3804  001B96  6EF6               	movwf	tblptrl,c
  3805  001B98  0E0F               	movlw	high __npowers_
  3806  001B9A  20F4               	addwfc	prodh,w,c
  3807  001B9C  6EF7               	movwf	tblptrh,c
  3808  001B9E                     	if	0	;There are less than 3 active tblptr bytes
  3809  001B9E                     	endif
  3810  001B9E  0009               	tblrd		*+
  3811  001BA0  CFF5 F024          	movff	tablat,?_scale
  3812  001BA4  0009               	tblrd		*+
  3813  001BA6  CFF5 F025          	movff	tablat,?_scale+1
  3814  001BAA  000A               	tblrd		*-
  3815  001BAC  CFF5 F026          	movff	tablat,?_scale+2
  3816  001BB0  0012               	return	
  3817  001BB2                     l2655:
  3818                           
  3819                           ;doprnt.c: 435: }
  3820                           ;doprnt.c: 436: if(scl>=110)
  3821  001BB2  502A               	movf	scale@scl,w,c
  3822  001BB4  0A80               	xorlw	128
  3823  001BB6  0F12               	addlw	-238
  3824  001BB8  A0D8               	btfss	status,0,c
  3825  001BBA  D091               	goto	l2663
  3826                           
  3827                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3828  001BBC  0E00               	movlw	0
  3829  001BBE  6E12               	movwf	___wmul@multiplicand+1,c
  3830  001BC0  0E03               	movlw	3
  3831  001BC2  6E11               	movwf	___wmul@multiplicand,c
  3832  001BC4  0E00               	movlw	0
  3833  001BC6  6E0A               	movwf	___awdiv@divisor+1,c
  3834  001BC8  0E0A               	movlw	10
  3835  001BCA  6E09               	movwf	___awdiv@divisor,c
  3836  001BCC  0E00               	movlw	0
  3837  001BCE  6E04               	movwf	___awmod@divisor+1,c
  3838  001BD0  0E64               	movlw	100
  3839  001BD2  6E03               	movwf	___awmod@divisor,c
  3840  001BD4  502A               	movf	scale@scl,w,c
  3841  001BD6  6E01               	movwf	___awmod@dividend,c
  3842  001BD8  6A02               	clrf	___awmod@dividend+1,c
  3843  001BDA  BE01               	btfsc	___awmod@dividend,7,c
  3844  001BDC  0602               	decf	___awmod@dividend+1,f,c
  3845  001BDE  ECDF  F015         	call	___awmod	;wreg free
  3846  001BE2  C001  F007         	movff	?___awmod,___awdiv@dividend
  3847  001BE6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3848  001BEA  EC20  F015         	call	___awdiv	;wreg free
  3849  001BEE  0E09               	movlw	9
  3850  001BF0  2407               	addwf	?___awdiv,w,c
  3851  001BF2  6E0F               	movwf	___wmul@multiplier,c
  3852  001BF4  0E00               	movlw	0
  3853  001BF6  2008               	addwfc	?___awdiv+1,w,c
  3854  001BF8  6E10               	movwf	___wmul@multiplier+1,c
  3855  001BFA  ECEA  F017         	call	___wmul	;wreg free
  3856  001BFE  0E29               	movlw	low __powers_
  3857  001C00  240F               	addwf	?___wmul,w,c
  3858  001C02  6EF6               	movwf	tblptrl,c
  3859  001C04  0E0F               	movlw	high __powers_
  3860  001C06  2010               	addwfc	?___wmul+1,w,c
  3861  001C08  6EF7               	movwf	tblptrh,c
  3862  001C0A                     	if	0	;There are less than 3 active tblptr bytes
  3863  001C0A                     	endif
  3864  001C0A  0009               	tblrd		*+
  3865  001C0C  CFF5 F018          	movff	tablat,___ftmul@f2
  3866  001C10  0009               	tblrd		*+
  3867  001C12  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3868  001C16  000A               	tblrd		*-
  3869  001C18  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3870  001C1C  0E00               	movlw	0
  3871  001C1E  6E0A               	movwf	___awdiv@divisor+1,c
  3872  001C20  0E64               	movlw	100
  3873  001C22  6E09               	movwf	___awdiv@divisor,c
  3874  001C24  502A               	movf	scale@scl,w,c
  3875  001C26  6E07               	movwf	___awdiv@dividend,c
  3876  001C28  6A08               	clrf	___awdiv@dividend+1,c
  3877  001C2A  BE07               	btfsc	___awdiv@dividend,7,c
  3878  001C2C  0608               	decf	___awdiv@dividend+1,f,c
  3879  001C2E  EC20  F015         	call	___awdiv	;wreg free
  3880  001C32  0E12               	movlw	18
  3881  001C34  2407               	addwf	?___awdiv,w,c
  3882  001C36  6E0F               	movwf	___wmul@multiplier,c
  3883  001C38  0E00               	movlw	0
  3884  001C3A  2008               	addwfc	?___awdiv+1,w,c
  3885  001C3C  6E10               	movwf	___wmul@multiplier+1,c
  3886  001C3E  0E00               	movlw	0
  3887  001C40  6E12               	movwf	___wmul@multiplicand+1,c
  3888  001C42  0E03               	movlw	3
  3889  001C44  6E11               	movwf	___wmul@multiplicand,c
  3890  001C46  ECEA  F017         	call	___wmul	;wreg free
  3891  001C4A  0E29               	movlw	low __powers_
  3892  001C4C  240F               	addwf	?___wmul,w,c
  3893  001C4E  6EF6               	movwf	tblptrl,c
  3894  001C50  0E0F               	movlw	high __powers_
  3895  001C52  2010               	addwfc	?___wmul+1,w,c
  3896  001C54  6EF7               	movwf	tblptrh,c
  3897  001C56                     	if	0	;There are less than 3 active tblptr bytes
  3898  001C56                     	endif
  3899  001C56  0009               	tblrd		*+
  3900  001C58  CFF5 F015          	movff	tablat,___ftmul@f1
  3901  001C5C  0009               	tblrd		*+
  3902  001C5E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3903  001C62  000A               	tblrd		*-
  3904  001C64  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3905  001C68  ECF9  F011         	call	___ftmul	;wreg free
  3906  001C6C  C015  F027         	movff	?___ftmul,_scale$1833
  3907  001C70  C016  F028         	movff	?___ftmul+1,_scale$1833+1
  3908  001C74  C017  F029         	movff	?___ftmul+2,_scale$1833+2
  3909                           
  3910                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3911  001C78  C027  F015         	movff	_scale$1833,___ftmul@f1
  3912  001C7C  C028  F016         	movff	_scale$1833+1,___ftmul@f1+1
  3913  001C80  C029  F017         	movff	_scale$1833+2,___ftmul@f1+2
  3914  001C84  0E00               	movlw	0
  3915  001C86  6E12               	movwf	___wmul@multiplicand+1,c
  3916  001C88  0E03               	movlw	3
  3917  001C8A  6E11               	movwf	___wmul@multiplicand,c
  3918  001C8C  0E00               	movlw	0
  3919  001C8E  6E04               	movwf	___awmod@divisor+1,c
  3920  001C90  0E0A               	movlw	10
  3921  001C92  6E03               	movwf	___awmod@divisor,c
  3922  001C94  502A               	movf	scale@scl,w,c
  3923  001C96  6E01               	movwf	___awmod@dividend,c
  3924  001C98  6A02               	clrf	___awmod@dividend+1,c
  3925  001C9A  BE01               	btfsc	___awmod@dividend,7,c
  3926  001C9C  0602               	decf	___awmod@dividend+1,f,c
  3927  001C9E  ECDF  F015         	call	___awmod	;wreg free
  3928  001CA2  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3929  001CA6  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3930  001CAA  ECEA  F017         	call	___wmul	;wreg free
  3931  001CAE  0E29               	movlw	low __powers_
  3932  001CB0  240F               	addwf	?___wmul,w,c
  3933  001CB2  6EF6               	movwf	tblptrl,c
  3934  001CB4  0E0F               	movlw	high __powers_
  3935  001CB6  2010               	addwfc	?___wmul+1,w,c
  3936  001CB8  6EF7               	movwf	tblptrh,c
  3937  001CBA                     	if	0	;There are less than 3 active tblptr bytes
  3938  001CBA                     	endif
  3939  001CBA  0009               	tblrd		*+
  3940  001CBC  CFF5 F018          	movff	tablat,___ftmul@f2
  3941  001CC0  0009               	tblrd		*+
  3942  001CC2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3943  001CC6  000A               	tblrd		*-
  3944  001CC8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3945  001CCC  ECF9  F011         	call	___ftmul	;wreg free
  3946  001CD0  C015  F024         	movff	?___ftmul,?_scale
  3947  001CD4  C016  F025         	movff	?___ftmul+1,?_scale+1
  3948  001CD8  C017  F026         	movff	?___ftmul+2,?_scale+2
  3949  001CDC  0012               	return	
  3950  001CDE                     l2663:
  3951                           
  3952                           ;doprnt.c: 438: else if(scl > 10)
  3953  001CDE  502A               	movf	scale@scl,w,c
  3954  001CE0  0A80               	xorlw	128
  3955  001CE2  0F75               	addlw	-139
  3956  001CE4  A0D8               	btfss	status,0,c
  3957  001CE6  D04D               	goto	l2669
  3958                           
  3959                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3960  001CE8  0E00               	movlw	0
  3961  001CEA  6E0A               	movwf	___awdiv@divisor+1,c
  3962  001CEC  0E0A               	movlw	10
  3963  001CEE  6E09               	movwf	___awdiv@divisor,c
  3964  001CF0  502A               	movf	scale@scl,w,c
  3965  001CF2  6E07               	movwf	___awdiv@dividend,c
  3966  001CF4  6A08               	clrf	___awdiv@dividend+1,c
  3967  001CF6  BE07               	btfsc	___awdiv@dividend,7,c
  3968  001CF8  0608               	decf	___awdiv@dividend+1,f,c
  3969  001CFA  EC20  F015         	call	___awdiv	;wreg free
  3970  001CFE  0E09               	movlw	9
  3971  001D00  2407               	addwf	?___awdiv,w,c
  3972  001D02  6E0F               	movwf	___wmul@multiplier,c
  3973  001D04  0E00               	movlw	0
  3974  001D06  2008               	addwfc	?___awdiv+1,w,c
  3975  001D08  6E10               	movwf	___wmul@multiplier+1,c
  3976  001D0A  0E00               	movlw	0
  3977  001D0C  6E12               	movwf	___wmul@multiplicand+1,c
  3978  001D0E  0E03               	movlw	3
  3979  001D10  6E11               	movwf	___wmul@multiplicand,c
  3980  001D12  ECEA  F017         	call	___wmul	;wreg free
  3981  001D16  0E29               	movlw	low __powers_
  3982  001D18  240F               	addwf	?___wmul,w,c
  3983  001D1A  6EF6               	movwf	tblptrl,c
  3984  001D1C  0E0F               	movlw	high __powers_
  3985  001D1E  2010               	addwfc	?___wmul+1,w,c
  3986  001D20  6EF7               	movwf	tblptrh,c
  3987  001D22                     	if	0	;There are less than 3 active tblptr bytes
  3988  001D22                     	endif
  3989  001D22  0009               	tblrd		*+
  3990  001D24  CFF5 F015          	movff	tablat,___ftmul@f1
  3991  001D28  0009               	tblrd		*+
  3992  001D2A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3993  001D2E  000A               	tblrd		*-
  3994  001D30  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3995  001D34  0E00               	movlw	0
  3996  001D36  6E12               	movwf	___wmul@multiplicand+1,c
  3997  001D38  0E03               	movlw	3
  3998  001D3A  6E11               	movwf	___wmul@multiplicand,c
  3999  001D3C  0E00               	movlw	0
  4000  001D3E  6E04               	movwf	___awmod@divisor+1,c
  4001  001D40  0E0A               	movlw	10
  4002  001D42  6E03               	movwf	___awmod@divisor,c
  4003  001D44  502A               	movf	scale@scl,w,c
  4004  001D46  6E01               	movwf	___awmod@dividend,c
  4005  001D48  6A02               	clrf	___awmod@dividend+1,c
  4006  001D4A  BE01               	btfsc	___awmod@dividend,7,c
  4007  001D4C  0602               	decf	___awmod@dividend+1,f,c
  4008  001D4E  ECDF  F015         	call	___awmod	;wreg free
  4009  001D52  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4010  001D56  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4011  001D5A  ECEA  F017         	call	___wmul	;wreg free
  4012  001D5E  0E29               	movlw	low __powers_
  4013  001D60  240F               	addwf	?___wmul,w,c
  4014  001D62  6EF6               	movwf	tblptrl,c
  4015  001D64  0E0F               	movlw	high __powers_
  4016  001D66  2010               	addwfc	?___wmul+1,w,c
  4017  001D68  6EF7               	movwf	tblptrh,c
  4018  001D6A                     	if	0	;There are less than 3 active tblptr bytes
  4019  001D6A                     	endif
  4020  001D6A  0009               	tblrd		*+
  4021  001D6C  CFF5 F018          	movff	tablat,___ftmul@f2
  4022  001D70  0009               	tblrd		*+
  4023  001D72  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4024  001D76  000A               	tblrd		*-
  4025  001D78  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4026  001D7C  ECF9  F011         	call	___ftmul	;wreg free
  4027  001D80  D7A7               	goto	L3
  4028  001D82                     l2669:
  4029                           
  4030                           ;doprnt.c: 440: return _powers_[scl];
  4031  001D82  502A               	movf	scale@scl,w,c
  4032  001D84  0D03               	mullw	3
  4033  001D86  0E29               	movlw	low __powers_
  4034  001D88  24F3               	addwf	prodl,w,c
  4035  001D8A  6EF6               	movwf	tblptrl,c
  4036  001D8C  0E0F               	movlw	high __powers_
  4037  001D8E  20F4               	addwfc	prodh,w,c
  4038  001D90  6EF7               	movwf	tblptrh,c
  4039  001D92                     	if	0	;There are less than 3 active tblptr bytes
  4040  001D92                     	endif
  4041  001D92  0009               	tblrd		*+
  4042  001D94  CFF5 F024          	movff	tablat,?_scale
  4043  001D98  0009               	tblrd		*+
  4044  001D9A  CFF5 F025          	movff	tablat,?_scale+1
  4045  001D9E  000A               	tblrd		*-
  4046  001DA0  CFF5 F026          	movff	tablat,?_scale+2
  4047  001DA4  0012               	return	
  4048  001DA6                     __end_of_scale:
  4049                           	opt stack 0
  4050                           tblptru	equ	0xFF8
  4051                           tblptrh	equ	0xFF7
  4052                           tblptrl	equ	0xFF6
  4053                           tablat	equ	0xFF5
  4054                           prodh	equ	0xFF4
  4055                           prodl	equ	0xFF3
  4056                           postinc0	equ	0xFEE
  4057                           wreg	equ	0xFE8
  4058                           postdec1	equ	0xFE5
  4059                           fsr1l	equ	0xFE1
  4060                           indf2	equ	0xFDF
  4061                           postinc2	equ	0xFDE
  4062                           postdec2	equ	0xFDD
  4063                           fsr2h	equ	0xFDA
  4064                           fsr2l	equ	0xFD9
  4065                           status	equ	0xFD8
  4066                           
  4067 ;; *************** function _putch *****************
  4068 ;; Defined at:
  4069 ;;		line 166 in file "main.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;  data            1    wreg     unsigned char 
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;  data            1    0[COMRAM] unsigned char 
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  1    wreg      void 
  4076 ;; Registers used:
  4077 ;;		wreg
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4084 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4086 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4087 ;;Total ram usage:        1 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; This function calls:
  4090 ;;		Nothing
  4091 ;; This function is called by:
  4092 ;;		_printf
  4093 ;; This function uses a non-reentrant model
  4094 ;;
  4095                           
  4096                           	psect	text11
  4097  00308C                     __ptext11:
  4098                           	opt stack 0
  4099  00308C                     _putch:
  4100                           	opt stack 29
  4101                           
  4102                           ;incstack = 0
  4103                           ;putch@data stored from wreg
  4104  00308C  6E01               	movwf	putch@data,c
  4105  00308E                     l110:
  4106  00308E  A89E               	btfss	3998,4,c	;volatile
  4107  003090  D7FE               	goto	l110
  4108                           
  4109                           ;main.c: 169: TXREG = data;
  4110  003092  C001  FFAD         	movff	putch@data,4013	;volatile
  4111  003096  0012               	return		;funcret
  4112  003098                     __end_of_putch:
  4113                           	opt stack 0
  4114                           tblptru	equ	0xFF8
  4115                           tblptrh	equ	0xFF7
  4116                           tblptrl	equ	0xFF6
  4117                           tablat	equ	0xFF5
  4118                           prodh	equ	0xFF4
  4119                           prodl	equ	0xFF3
  4120                           postinc0	equ	0xFEE
  4121                           wreg	equ	0xFE8
  4122                           postdec1	equ	0xFE5
  4123                           fsr1l	equ	0xFE1
  4124                           indf2	equ	0xFDF
  4125                           postinc2	equ	0xFDE
  4126                           postdec2	equ	0xFDD
  4127                           fsr2h	equ	0xFDA
  4128                           fsr2l	equ	0xFD9
  4129                           status	equ	0xFD8
  4130                           
  4131 ;; *************** function _isdigit *****************
  4132 ;; Defined at:
  4133 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/isdigit.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;  c               1    wreg     unsigned char 
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;  c               1    2[COMRAM] unsigned char 
  4138 ;; Return value:  Size  Location     Type
  4139 ;;		None               void
  4140 ;; Registers used:
  4141 ;;		wreg, status,2, status,0
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4148 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4149 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4150 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4151 ;;Total ram usage:        3 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; This function calls:
  4154 ;;		Nothing
  4155 ;; This function is called by:
  4156 ;;		_printf
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           	psect	text12
  4161  003042                     __ptext12:
  4162                           	opt stack 0
  4163  003042                     _isdigit:
  4164                           	opt stack 29
  4165                           
  4166                           ;incstack = 0
  4167                           ;isdigit@c stored from wreg
  4168  003042  6E03               	movwf	isdigit@c,c
  4169  003044  0E00               	movlw	0
  4170  003046  6E02               	movwf	_isdigit$1437,c
  4171  003048  0E3A               	movlw	58
  4172  00304A  6003               	cpfslt	isdigit@c,c
  4173  00304C  D005               	goto	l2681
  4174  00304E  0E2F               	movlw	47
  4175  003050  6403               	cpfsgt	isdigit@c,c
  4176  003052  D002               	goto	l2681
  4177  003054  0E01               	movlw	1
  4178  003056  6E02               	movwf	_isdigit$1437,c
  4179  003058                     l2681:
  4180  003058  C002  F001         	movff	_isdigit$1437,??_isdigit
  4181  00305C  3001               	rrcf	??_isdigit,w,c
  4182  00305E  0012               	return	
  4183  003060                     __end_of_isdigit:
  4184                           	opt stack 0
  4185                           tblptru	equ	0xFF8
  4186                           tblptrh	equ	0xFF7
  4187                           tblptrl	equ	0xFF6
  4188                           tablat	equ	0xFF5
  4189                           prodh	equ	0xFF4
  4190                           prodl	equ	0xFF3
  4191                           postinc0	equ	0xFEE
  4192                           wreg	equ	0xFE8
  4193                           postdec1	equ	0xFE5
  4194                           fsr1l	equ	0xFE1
  4195                           indf2	equ	0xFDF
  4196                           postinc2	equ	0xFDE
  4197                           postdec2	equ	0xFDD
  4198                           fsr2h	equ	0xFDA
  4199                           fsr2l	equ	0xFD9
  4200                           status	equ	0xFD8
  4201                           
  4202 ;; *************** function _fround *****************
  4203 ;; Defined at:
  4204 ;;		line 409 in file "/opt/microchip/xc8/v1.42/sources/common/doprnt.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;  prec            1    wreg     unsigned char 
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;  prec            1   44[COMRAM] unsigned char 
  4209 ;; Return value:  Size  Location     Type
  4210 ;;                  3   35[COMRAM] unsigned char 
  4211 ;; Registers used:
  4212 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4218 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4219 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4221 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4222 ;;Total ram usage:       10 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; Hardware stack levels required when called:    2
  4225 ;; This function calls:
  4226 ;;		___awdiv
  4227 ;;		___awmod
  4228 ;;		___ftmul
  4229 ;;		___wmul
  4230 ;; This function is called by:
  4231 ;;		_printf
  4232 ;; This function uses a non-reentrant model
  4233 ;;
  4234                           
  4235                           	psect	text13
  4236  001DA6                     __ptext13:
  4237                           	opt stack 0
  4238  001DA6                     _fround:
  4239                           	opt stack 27
  4240                           
  4241                           ;incstack = 0
  4242                           ;fround@prec stored from wreg
  4243  001DA6  6E2D               	movwf	fround@prec,c
  4244                           
  4245                           ;doprnt.c: 413: if(prec>=110)
  4246  001DA8  0E6D               	movlw	109
  4247  001DAA  642D               	cpfsgt	fround@prec,c
  4248  001DAC  D09F               	goto	l2623
  4249                           
  4250                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4251  001DAE  0E00               	movlw	0
  4252  001DB0  6E12               	movwf	___wmul@multiplicand+1,c
  4253  001DB2  0E03               	movlw	3
  4254  001DB4  6E11               	movwf	___wmul@multiplicand,c
  4255  001DB6  0E00               	movlw	0
  4256  001DB8  6E0A               	movwf	___awdiv@divisor+1,c
  4257  001DBA  0E0A               	movlw	10
  4258  001DBC  6E09               	movwf	___awdiv@divisor,c
  4259  001DBE  0E00               	movlw	0
  4260  001DC0  6E04               	movwf	___awmod@divisor+1,c
  4261  001DC2  0E64               	movlw	100
  4262  001DC4  6E03               	movwf	___awmod@divisor,c
  4263  001DC6  C02D  F001         	movff	fround@prec,___awmod@dividend
  4264  001DCA  6A02               	clrf	___awmod@dividend+1,c
  4265  001DCC  ECDF  F015         	call	___awmod	;wreg free
  4266  001DD0  C001  F007         	movff	?___awmod,___awdiv@dividend
  4267  001DD4  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4268  001DD8  EC20  F015         	call	___awdiv	;wreg free
  4269  001DDC  0E09               	movlw	9
  4270  001DDE  2407               	addwf	?___awdiv,w,c
  4271  001DE0  6E0F               	movwf	___wmul@multiplier,c
  4272  001DE2  0E00               	movlw	0
  4273  001DE4  2008               	addwfc	?___awdiv+1,w,c
  4274  001DE6  6E10               	movwf	___wmul@multiplier+1,c
  4275  001DE8  ECEA  F017         	call	___wmul	;wreg free
  4276  001DEC  0E50               	movlw	low __npowers_
  4277  001DEE  240F               	addwf	?___wmul,w,c
  4278  001DF0  6EF6               	movwf	tblptrl,c
  4279  001DF2  0E0F               	movlw	high __npowers_
  4280  001DF4  2010               	addwfc	?___wmul+1,w,c
  4281  001DF6  6EF7               	movwf	tblptrh,c
  4282  001DF8                     	if	0	;There are less than 3 active tblptr bytes
  4283  001DF8                     	endif
  4284  001DF8  0009               	tblrd		*+
  4285  001DFA  CFF5 F018          	movff	tablat,___ftmul@f2
  4286  001DFE  0009               	tblrd		*+
  4287  001E00  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4288  001E04  000A               	tblrd		*-
  4289  001E06  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4290  001E0A  0E00               	movlw	0
  4291  001E0C  6E0A               	movwf	___awdiv@divisor+1,c
  4292  001E0E  0E64               	movlw	100
  4293  001E10  6E09               	movwf	___awdiv@divisor,c
  4294  001E12  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4295  001E16  6A08               	clrf	___awdiv@dividend+1,c
  4296  001E18  EC20  F015         	call	___awdiv	;wreg free
  4297  001E1C  0E12               	movlw	18
  4298  001E1E  2407               	addwf	?___awdiv,w,c
  4299  001E20  6E0F               	movwf	___wmul@multiplier,c
  4300  001E22  0E00               	movlw	0
  4301  001E24  2008               	addwfc	?___awdiv+1,w,c
  4302  001E26  6E10               	movwf	___wmul@multiplier+1,c
  4303  001E28  0E00               	movlw	0
  4304  001E2A  6E12               	movwf	___wmul@multiplicand+1,c
  4305  001E2C  0E03               	movlw	3
  4306  001E2E  6E11               	movwf	___wmul@multiplicand,c
  4307  001E30  ECEA  F017         	call	___wmul	;wreg free
  4308  001E34  0E50               	movlw	low __npowers_
  4309  001E36  240F               	addwf	?___wmul,w,c
  4310  001E38  6EF6               	movwf	tblptrl,c
  4311  001E3A  0E0F               	movlw	high __npowers_
  4312  001E3C  2010               	addwfc	?___wmul+1,w,c
  4313  001E3E  6EF7               	movwf	tblptrh,c
  4314  001E40                     	if	0	;There are less than 3 active tblptr bytes
  4315  001E40                     	endif
  4316  001E40  0009               	tblrd		*+
  4317  001E42  CFF5 F015          	movff	tablat,___ftmul@f1
  4318  001E46  0009               	tblrd		*+
  4319  001E48  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4320  001E4C  000A               	tblrd		*-
  4321  001E4E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4322  001E52  ECF9  F011         	call	___ftmul	;wreg free
  4323  001E56  C015  F02A         	movff	?___ftmul,_fround$1831
  4324  001E5A  C016  F02B         	movff	?___ftmul+1,_fround$1831+1
  4325  001E5E  C017  F02C         	movff	?___ftmul+2,_fround$1831+2
  4326                           
  4327                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4328  001E62  0E00               	movlw	0
  4329  001E64  6E12               	movwf	___wmul@multiplicand+1,c
  4330  001E66  0E03               	movlw	3
  4331  001E68  6E11               	movwf	___wmul@multiplicand,c
  4332  001E6A  0E00               	movlw	0
  4333  001E6C  6E04               	movwf	___awmod@divisor+1,c
  4334  001E6E  0E0A               	movlw	10
  4335  001E70  6E03               	movwf	___awmod@divisor,c
  4336  001E72  C02D  F001         	movff	fround@prec,___awmod@dividend
  4337  001E76  6A02               	clrf	___awmod@dividend+1,c
  4338  001E78  ECDF  F015         	call	___awmod	;wreg free
  4339  001E7C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4340  001E80  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4341  001E84  ECEA  F017         	call	___wmul	;wreg free
  4342  001E88  0E50               	movlw	low __npowers_
  4343  001E8A  240F               	addwf	?___wmul,w,c
  4344  001E8C  6EF6               	movwf	tblptrl,c
  4345  001E8E  0E0F               	movlw	high __npowers_
  4346  001E90  2010               	addwfc	?___wmul+1,w,c
  4347  001E92  6EF7               	movwf	tblptrh,c
  4348  001E94                     	if	0	;There are less than 3 active tblptr bytes
  4349  001E94                     	endif
  4350  001E94  0009               	tblrd		*+
  4351  001E96  CFF5 F018          	movff	tablat,___ftmul@f2
  4352  001E9A  0009               	tblrd		*+
  4353  001E9C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4354  001EA0  000A               	tblrd		*-
  4355  001EA2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4356  001EA6  C02A  F015         	movff	_fround$1831,___ftmul@f1
  4357  001EAA  C02B  F016         	movff	_fround$1831+1,___ftmul@f1+1
  4358  001EAE  C02C  F017         	movff	_fround$1831+2,___ftmul@f1+2
  4359  001EB2  ECF9  F011         	call	___ftmul	;wreg free
  4360  001EB6  C015  F027         	movff	?___ftmul,_fround$1832
  4361  001EBA  C016  F028         	movff	?___ftmul+1,_fround$1832+1
  4362  001EBE  C017  F029         	movff	?___ftmul+2,_fround$1832+2
  4363                           
  4364                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4365  001EC2  C027  F015         	movff	_fround$1832,___ftmul@f1
  4366  001EC6  C028  F016         	movff	_fround$1832+1,___ftmul@f1+1
  4367  001ECA  C029  F017         	movff	_fround$1832+2,___ftmul@f1+2
  4368  001ECE  0E00               	movlw	0
  4369  001ED0  6E18               	movwf	___ftmul@f2,c
  4370  001ED2  0E00               	movlw	0
  4371  001ED4  6E19               	movwf	___ftmul@f2+1,c
  4372  001ED6  0E3F               	movlw	63
  4373  001ED8  6E1A               	movwf	___ftmul@f2+2,c
  4374  001EDA  ECF9  F011         	call	___ftmul	;wreg free
  4375  001EDE  C015  F024         	movff	?___ftmul,?_fround
  4376  001EE2  C016  F025         	movff	?___ftmul+1,?_fround+1
  4377  001EE6  C017  F026         	movff	?___ftmul+2,?_fround+2
  4378  001EEA  0012               	return	
  4379  001EEC                     l2623:
  4380                           
  4381                           ;doprnt.c: 415: else if(prec > 10)
  4382  001EEC  0E0A               	movlw	10
  4383  001EEE  642D               	cpfsgt	fround@prec,c
  4384  001EF0  D05D               	goto	l2631
  4385                           
  4386                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4387  001EF2  0E00               	movlw	0
  4388  001EF4  6E12               	movwf	___wmul@multiplicand+1,c
  4389  001EF6  0E03               	movlw	3
  4390  001EF8  6E11               	movwf	___wmul@multiplicand,c
  4391  001EFA  0E00               	movlw	0
  4392  001EFC  6E04               	movwf	___awmod@divisor+1,c
  4393  001EFE  0E0A               	movlw	10
  4394  001F00  6E03               	movwf	___awmod@divisor,c
  4395  001F02  C02D  F001         	movff	fround@prec,___awmod@dividend
  4396  001F06  6A02               	clrf	___awmod@dividend+1,c
  4397  001F08  ECDF  F015         	call	___awmod	;wreg free
  4398  001F0C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4399  001F10  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4400  001F14  ECEA  F017         	call	___wmul	;wreg free
  4401  001F18  0E50               	movlw	low __npowers_
  4402  001F1A  240F               	addwf	?___wmul,w,c
  4403  001F1C  6EF6               	movwf	tblptrl,c
  4404  001F1E  0E0F               	movlw	high __npowers_
  4405  001F20  2010               	addwfc	?___wmul+1,w,c
  4406  001F22  6EF7               	movwf	tblptrh,c
  4407  001F24                     	if	0	;There are less than 3 active tblptr bytes
  4408  001F24                     	endif
  4409  001F24  0009               	tblrd		*+
  4410  001F26  CFF5 F018          	movff	tablat,___ftmul@f2
  4411  001F2A  0009               	tblrd		*+
  4412  001F2C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4413  001F30  000A               	tblrd		*-
  4414  001F32  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4415  001F36  0E00               	movlw	0
  4416  001F38  6E0A               	movwf	___awdiv@divisor+1,c
  4417  001F3A  0E0A               	movlw	10
  4418  001F3C  6E09               	movwf	___awdiv@divisor,c
  4419  001F3E  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4420  001F42  6A08               	clrf	___awdiv@dividend+1,c
  4421  001F44  EC20  F015         	call	___awdiv	;wreg free
  4422  001F48  0E09               	movlw	9
  4423  001F4A  2407               	addwf	?___awdiv,w,c
  4424  001F4C  6E0F               	movwf	___wmul@multiplier,c
  4425  001F4E  0E00               	movlw	0
  4426  001F50  2008               	addwfc	?___awdiv+1,w,c
  4427  001F52  6E10               	movwf	___wmul@multiplier+1,c
  4428  001F54  0E00               	movlw	0
  4429  001F56  6E12               	movwf	___wmul@multiplicand+1,c
  4430  001F58  0E03               	movlw	3
  4431  001F5A  6E11               	movwf	___wmul@multiplicand,c
  4432  001F5C  ECEA  F017         	call	___wmul	;wreg free
  4433  001F60  0E50               	movlw	low __npowers_
  4434  001F62  240F               	addwf	?___wmul,w,c
  4435  001F64  6EF6               	movwf	tblptrl,c
  4436  001F66  0E0F               	movlw	high __npowers_
  4437  001F68  2010               	addwfc	?___wmul+1,w,c
  4438  001F6A  6EF7               	movwf	tblptrh,c
  4439  001F6C                     	if	0	;There are less than 3 active tblptr bytes
  4440  001F6C                     	endif
  4441  001F6C  0009               	tblrd		*+
  4442  001F6E  CFF5 F015          	movff	tablat,___ftmul@f1
  4443  001F72  0009               	tblrd		*+
  4444  001F74  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4445  001F78  000A               	tblrd		*-
  4446  001F7A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4447  001F7E  ECF9  F011         	call	___ftmul	;wreg free
  4448  001F82  C015  F02A         	movff	?___ftmul,_fround$1831
  4449  001F86  C016  F02B         	movff	?___ftmul+1,_fround$1831+1
  4450  001F8A  C017  F02C         	movff	?___ftmul+2,_fround$1831+2
  4451                           
  4452                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4453  001F8E  C02A  F015         	movff	_fround$1831,___ftmul@f1
  4454  001F92  C02B  F016         	movff	_fround$1831+1,___ftmul@f1+1
  4455  001F96  C02C  F017         	movff	_fround$1831+2,___ftmul@f1+2
  4456  001F9A  0E00               	movlw	0
  4457  001F9C  6E18               	movwf	___ftmul@f2,c
  4458  001F9E  0E00               	movlw	0
  4459  001FA0  6E19               	movwf	___ftmul@f2+1,c
  4460  001FA2  0E3F               	movlw	63
  4461  001FA4  6E1A               	movwf	___ftmul@f2+2,c
  4462  001FA6  ECF9  F011         	call	___ftmul	;wreg free
  4463  001FAA  D799               	goto	L4
  4464  001FAC                     l2631:
  4465                           
  4466                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4467  001FAC  502D               	movf	fround@prec,w,c
  4468  001FAE  0D03               	mullw	3
  4469  001FB0  0E50               	movlw	low __npowers_
  4470  001FB2  24F3               	addwf	prodl,w,c
  4471  001FB4  6EF6               	movwf	tblptrl,c
  4472  001FB6  0E0F               	movlw	high __npowers_
  4473  001FB8  20F4               	addwfc	prodh,w,c
  4474  001FBA  6EF7               	movwf	tblptrh,c
  4475  001FBC                     	if	0	;There are less than 3 active tblptr bytes
  4476  001FBC                     	endif
  4477  001FBC  0009               	tblrd		*+
  4478  001FBE  CFF5 F015          	movff	tablat,___ftmul@f1
  4479  001FC2  0009               	tblrd		*+
  4480  001FC4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4481  001FC8  000A               	tblrd		*-
  4482  001FCA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4483  001FCE  0E00               	movlw	0
  4484  001FD0  6E18               	movwf	___ftmul@f2,c
  4485  001FD2  0E00               	movlw	0
  4486  001FD4  6E19               	movwf	___ftmul@f2+1,c
  4487  001FD6  0E3F               	movlw	63
  4488  001FD8  6E1A               	movwf	___ftmul@f2+2,c
  4489  001FDA  ECF9  F011         	call	___ftmul	;wreg free
  4490  001FDE  C015  F024         	movff	?___ftmul,?_fround
  4491  001FE2  C016  F025         	movff	?___ftmul+1,?_fround+1
  4492  001FE6  C017  F026         	movff	?___ftmul+2,?_fround+2
  4493  001FEA  0012               	return	
  4494  001FEC                     __end_of_fround:
  4495                           	opt stack 0
  4496                           tblptru	equ	0xFF8
  4497                           tblptrh	equ	0xFF7
  4498                           tblptrl	equ	0xFF6
  4499                           tablat	equ	0xFF5
  4500                           prodh	equ	0xFF4
  4501                           prodl	equ	0xFF3
  4502                           postinc0	equ	0xFEE
  4503                           wreg	equ	0xFE8
  4504                           postdec1	equ	0xFE5
  4505                           fsr1l	equ	0xFE1
  4506                           indf2	equ	0xFDF
  4507                           postinc2	equ	0xFDE
  4508                           postdec2	equ	0xFDD
  4509                           fsr2h	equ	0xFDA
  4510                           fsr2l	equ	0xFD9
  4511                           status	equ	0xFD8
  4512                           
  4513 ;; *************** function ___wmul *****************
  4514 ;; Defined at:
  4515 ;;		line 15 in file "/opt/microchip/xc8/v1.42/sources/common/Umul16.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;  multiplier      2   14[COMRAM] unsigned int 
  4518 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;  product         2   18[COMRAM] unsigned int 
  4521 ;; Return value:  Size  Location     Type
  4522 ;;                  2   14[COMRAM] unsigned int 
  4523 ;; Registers used:
  4524 ;;		wreg, status,2, status,0, prodl, prodh
  4525 ;; Tracked objects:
  4526 ;;		On entry : 0/0
  4527 ;;		On exit  : 0/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4530 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4531 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4533 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4534 ;;Total ram usage:        6 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; This function calls:
  4537 ;;		Nothing
  4538 ;; This function is called by:
  4539 ;;		_fround
  4540 ;;		_scale
  4541 ;;		_printf
  4542 ;; This function uses a non-reentrant model
  4543 ;;
  4544                           
  4545                           	psect	text14
  4546  002FD4                     __ptext14:
  4547                           	opt stack 0
  4548  002FD4                     ___wmul:
  4549                           	opt stack 28
  4550                           
  4551                           ;incstack = 0
  4552  002FD4  500F               	movf	___wmul@multiplier,w,c
  4553  002FD6  0211               	mulwf	___wmul@multiplicand,c
  4554  002FD8  CFF3 F013          	movff	prodl,___wmul@product
  4555  002FDC  CFF4 F014          	movff	prodh,___wmul@product+1
  4556  002FE0  500F               	movf	___wmul@multiplier,w,c
  4557  002FE2  0212               	mulwf	___wmul@multiplicand+1,c
  4558  002FE4  50F3               	movf	prodl,w,c
  4559  002FE6  2614               	addwf	___wmul@product+1,f,c
  4560  002FE8  5010               	movf	___wmul@multiplier+1,w,c
  4561  002FEA  0211               	mulwf	___wmul@multiplicand,c
  4562  002FEC  50F3               	movf	prodl,w,c
  4563  002FEE  2614               	addwf	___wmul@product+1,f,c
  4564  002FF0  C013  F00F         	movff	___wmul@product,?___wmul
  4565  002FF4  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4566  002FF8  0012               	return	
  4567  002FFA                     __end_of___wmul:
  4568                           	opt stack 0
  4569                           tblptru	equ	0xFF8
  4570                           tblptrh	equ	0xFF7
  4571                           tblptrl	equ	0xFF6
  4572                           tablat	equ	0xFF5
  4573                           prodh	equ	0xFF4
  4574                           prodl	equ	0xFF3
  4575                           postinc0	equ	0xFEE
  4576                           wreg	equ	0xFE8
  4577                           postdec1	equ	0xFE5
  4578                           fsr1l	equ	0xFE1
  4579                           indf2	equ	0xFDF
  4580                           postinc2	equ	0xFDE
  4581                           postdec2	equ	0xFDD
  4582                           fsr2h	equ	0xFDA
  4583                           fsr2l	equ	0xFD9
  4584                           status	equ	0xFD8
  4585                           
  4586 ;; *************** function ___ftmul *****************
  4587 ;; Defined at:
  4588 ;;		line 62 in file "/opt/microchip/xc8/v1.42/sources/common/ftmul.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;  f1              3   20[COMRAM] float 
  4591 ;;  f2              3   23[COMRAM] float 
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  4594 ;;  sign            1   34[COMRAM] unsigned char 
  4595 ;;  cntr            1   33[COMRAM] unsigned char 
  4596 ;;  exp             1   29[COMRAM] unsigned char 
  4597 ;; Return value:  Size  Location     Type
  4598 ;;                  3   20[COMRAM] float 
  4599 ;; Registers used:
  4600 ;;		wreg, status,2, status,0, cstack
  4601 ;; Tracked objects:
  4602 ;;		On entry : 0/0
  4603 ;;		On exit  : 0/0
  4604 ;;		Unchanged: 0/0
  4605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4606 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4607 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4608 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4609 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4610 ;;Total ram usage:       15 bytes
  4611 ;; Hardware stack levels used:    1
  4612 ;; Hardware stack levels required when called:    1
  4613 ;; This function calls:
  4614 ;;		___ftpack
  4615 ;; This function is called by:
  4616 ;;		_do_voltage
  4617 ;;		_fround
  4618 ;;		_scale
  4619 ;;		_printf
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623                           	psect	text15
  4624  0023F2                     __ptext15:
  4625                           	opt stack 0
  4626  0023F2                     ___ftmul:
  4627                           	opt stack 27
  4628                           
  4629                           ;incstack = 0
  4630  0023F2  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  4631  0023F6  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  4632  0023F8  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  4633  0023FA  3416               	rlcf	___ftmul@f1+1,w,c
  4634  0023FC  361B               	rlcf	??___ftmul& (0+255),f,c
  4635  0023FE  E301               	bnc	u2331
  4636  002400  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  4637  002402                     u2331:
  4638  002402  501B               	movf	??___ftmul,w,c
  4639  002404  6E1E               	movwf	___ftmul@exp,c
  4640  002406  501E               	movf	___ftmul@exp,w,c
  4641  002408  A4D8               	btfss	status,2,c
  4642  00240A  D007               	goto	l2487
  4643  00240C  0E00               	movlw	0
  4644  00240E  6E15               	movwf	?___ftmul,c
  4645  002410  0E00               	movlw	0
  4646  002412  6E16               	movwf	?___ftmul+1,c
  4647  002414  0E00               	movlw	0
  4648  002416  6E17               	movwf	?___ftmul+2,c
  4649  002418  0012               	return	
  4650  00241A                     l2487:
  4651  00241A  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  4652  00241E  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  4653  002420  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  4654  002422  3419               	rlcf	___ftmul@f2+1,w,c
  4655  002424  361B               	rlcf	??___ftmul& (0+255),f,c
  4656  002426  E301               	bnc	u2351
  4657  002428  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  4658  00242A                     u2351:
  4659  00242A  501B               	movf	??___ftmul,w,c
  4660  00242C  6E23               	movwf	___ftmul@sign,c
  4661  00242E  5023               	movf	___ftmul@sign,w,c
  4662  002430  A4D8               	btfss	status,2,c
  4663  002432  D007               	goto	l2493
  4664  002434  0E00               	movlw	0
  4665  002436  6E15               	movwf	?___ftmul,c
  4666  002438  0E00               	movlw	0
  4667  00243A  6E16               	movwf	?___ftmul+1,c
  4668  00243C  0E00               	movlw	0
  4669  00243E  6E17               	movwf	?___ftmul+2,c
  4670  002440  0012               	return	
  4671  002442                     l2493:
  4672  002442  5023               	movf	___ftmul@sign,w,c
  4673  002444  0F7B               	addlw	123
  4674  002446  261E               	addwf	___ftmul@exp,f,c
  4675  002448  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  4676  00244C  501A               	movf	___ftmul@f2+2,w,c
  4677  00244E  1A23               	xorwf	___ftmul@sign,f,c
  4678  002450  0E80               	movlw	128
  4679  002452  1623               	andwf	___ftmul@sign,f,c
  4680  002454  8E16               	bsf	___ftmul@f1+1,7,c
  4681  002456  8E19               	bsf	___ftmul@f2+1,7,c
  4682  002458  0EFF               	movlw	255
  4683  00245A  1618               	andwf	___ftmul@f2,f,c
  4684  00245C  0EFF               	movlw	255
  4685  00245E  1619               	andwf	___ftmul@f2+1,f,c
  4686  002460  0E00               	movlw	0
  4687  002462  161A               	andwf	___ftmul@f2+2,f,c
  4688  002464  0E00               	movlw	0
  4689  002466  6E1F               	movwf	___ftmul@f3_as_product,c
  4690  002468  0E00               	movlw	0
  4691  00246A  6E20               	movwf	___ftmul@f3_as_product+1,c
  4692  00246C  0E00               	movlw	0
  4693  00246E  6E21               	movwf	___ftmul@f3_as_product+2,c
  4694  002470  0E07               	movlw	7
  4695  002472  6E22               	movwf	___ftmul@cntr,c
  4696  002474                     l2507:
  4697  002474  A015               	btfss	___ftmul@f1,0,c
  4698  002476  D006               	goto	l2511
  4699  002478  5018               	movf	___ftmul@f2,w,c
  4700  00247A  261F               	addwf	___ftmul@f3_as_product,f,c
  4701  00247C  5019               	movf	___ftmul@f2+1,w,c
  4702  00247E  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  4703  002480  501A               	movf	___ftmul@f2+2,w,c
  4704  002482  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  4705  002484                     l2511:
  4706  002484  90D8               	bcf	status,0,c
  4707  002486  3217               	rrcf	___ftmul@f1+2,f,c
  4708  002488  3216               	rrcf	___ftmul@f1+1,f,c
  4709  00248A  3215               	rrcf	___ftmul@f1,f,c
  4710  00248C  90D8               	bcf	status,0,c
  4711  00248E  3618               	rlcf	___ftmul@f2,f,c
  4712  002490  3619               	rlcf	___ftmul@f2+1,f,c
  4713  002492  361A               	rlcf	___ftmul@f2+2,f,c
  4714  002494  2E22               	decfsz	___ftmul@cntr,f,c
  4715  002496  D7EE               	goto	l2507
  4716  002498  0E09               	movlw	9
  4717  00249A  6E22               	movwf	___ftmul@cntr,c
  4718  00249C                     l2517:
  4719  00249C  A015               	btfss	___ftmul@f1,0,c
  4720  00249E  D006               	goto	l2521
  4721  0024A0  5018               	movf	___ftmul@f2,w,c
  4722  0024A2  261F               	addwf	___ftmul@f3_as_product,f,c
  4723  0024A4  5019               	movf	___ftmul@f2+1,w,c
  4724  0024A6  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  4725  0024A8  501A               	movf	___ftmul@f2+2,w,c
  4726  0024AA  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  4727  0024AC                     l2521:
  4728  0024AC  90D8               	bcf	status,0,c
  4729  0024AE  3217               	rrcf	___ftmul@f1+2,f,c
  4730  0024B0  3216               	rrcf	___ftmul@f1+1,f,c
  4731  0024B2  3215               	rrcf	___ftmul@f1,f,c
  4732  0024B4  90D8               	bcf	status,0,c
  4733  0024B6  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  4734  0024B8  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  4735  0024BA  321F               	rrcf	___ftmul@f3_as_product,f,c
  4736  0024BC  2E22               	decfsz	___ftmul@cntr,f,c
  4737  0024BE  D7EE               	goto	l2517
  4738  0024C0  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4739  0024C4  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4740  0024C8  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4741  0024CC  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  4742  0024D0  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  4743  0024D4  EC2F  F014         	call	___ftpack	;wreg free
  4744  0024D8  C001  F015         	movff	?___ftpack,?___ftmul
  4745  0024DC  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  4746  0024E0  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  4747  0024E4  0012               	return	
  4748  0024E6                     __end_of___ftmul:
  4749                           	opt stack 0
  4750                           tblptru	equ	0xFF8
  4751                           tblptrh	equ	0xFF7
  4752                           tblptrl	equ	0xFF6
  4753                           tablat	equ	0xFF5
  4754                           prodh	equ	0xFF4
  4755                           prodl	equ	0xFF3
  4756                           postinc0	equ	0xFEE
  4757                           wreg	equ	0xFE8
  4758                           postdec1	equ	0xFE5
  4759                           fsr1l	equ	0xFE1
  4760                           indf2	equ	0xFDF
  4761                           postinc2	equ	0xFDE
  4762                           postdec2	equ	0xFDD
  4763                           fsr2h	equ	0xFDA
  4764                           fsr2l	equ	0xFD9
  4765                           status	equ	0xFD8
  4766                           
  4767 ;; *************** function ___awmod *****************
  4768 ;; Defined at:
  4769 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/awmod.c"
  4770 ;; Parameters:    Size  Location     Type
  4771 ;;  dividend        2    0[COMRAM] int 
  4772 ;;  divisor         2    2[COMRAM] int 
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;  sign            1    5[COMRAM] unsigned char 
  4775 ;;  counter         1    4[COMRAM] unsigned char 
  4776 ;; Return value:  Size  Location     Type
  4777 ;;                  2    0[COMRAM] int 
  4778 ;; Registers used:
  4779 ;;		wreg, status,2, status,0
  4780 ;; Tracked objects:
  4781 ;;		On entry : 0/0
  4782 ;;		On exit  : 0/0
  4783 ;;		Unchanged: 0/0
  4784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4785 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4786 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4788 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4789 ;;Total ram usage:        6 bytes
  4790 ;; Hardware stack levels used:    1
  4791 ;; This function calls:
  4792 ;;		Nothing
  4793 ;; This function is called by:
  4794 ;;		_fround
  4795 ;;		_scale
  4796 ;; This function uses a non-reentrant model
  4797 ;;
  4798                           
  4799                           	psect	text16
  4800  002BBE                     __ptext16:
  4801                           	opt stack 0
  4802  002BBE                     ___awmod:
  4803                           	opt stack 28
  4804                           
  4805                           ;incstack = 0
  4806  002BBE  0E00               	movlw	0
  4807  002BC0  6E06               	movwf	___awmod@sign,c
  4808  002BC2  AE02               	btfss	___awmod@dividend+1,7,c
  4809  002BC4  D006               	goto	l2581
  4810  002BC6  6C01               	negf	___awmod@dividend,c
  4811  002BC8  1E02               	comf	___awmod@dividend+1,f,c
  4812  002BCA  B0D8               	btfsc	status,0,c
  4813  002BCC  2A02               	incf	___awmod@dividend+1,f,c
  4814  002BCE  0E01               	movlw	1
  4815  002BD0  6E06               	movwf	___awmod@sign,c
  4816  002BD2                     l2581:
  4817  002BD2  AE04               	btfss	___awmod@divisor+1,7,c
  4818  002BD4  D004               	goto	l2585
  4819  002BD6  6C03               	negf	___awmod@divisor,c
  4820  002BD8  1E04               	comf	___awmod@divisor+1,f,c
  4821  002BDA  B0D8               	btfsc	status,0,c
  4822  002BDC  2A04               	incf	___awmod@divisor+1,f,c
  4823  002BDE                     l2585:
  4824  002BDE  5003               	movf	___awmod@divisor,w,c
  4825  002BE0  1004               	iorwf	___awmod@divisor+1,w,c
  4826  002BE2  B4D8               	btfsc	status,2,c
  4827  002BE4  D018               	goto	l2601
  4828  002BE6  0E01               	movlw	1
  4829  002BE8  6E05               	movwf	___awmod@counter,c
  4830  002BEA  D004               	goto	l2591
  4831  002BEC                     l2589:
  4832  002BEC  90D8               	bcf	status,0,c
  4833  002BEE  3603               	rlcf	___awmod@divisor,f,c
  4834  002BF0  3604               	rlcf	___awmod@divisor+1,f,c
  4835  002BF2  2A05               	incf	___awmod@counter,f,c
  4836  002BF4                     l2591:
  4837  002BF4  AE04               	btfss	___awmod@divisor+1,7,c
  4838  002BF6  D7FA               	goto	l2589
  4839  002BF8                     l2593:
  4840  002BF8  5003               	movf	___awmod@divisor,w,c
  4841  002BFA  5C01               	subwf	___awmod@dividend,w,c
  4842  002BFC  5004               	movf	___awmod@divisor+1,w,c
  4843  002BFE  5802               	subwfb	___awmod@dividend+1,w,c
  4844  002C00  A0D8               	btfss	status,0,c
  4845  002C02  D004               	goto	l2597
  4846  002C04  5003               	movf	___awmod@divisor,w,c
  4847  002C06  5E01               	subwf	___awmod@dividend,f,c
  4848  002C08  5004               	movf	___awmod@divisor+1,w,c
  4849  002C0A  5A02               	subwfb	___awmod@dividend+1,f,c
  4850  002C0C                     l2597:
  4851  002C0C  90D8               	bcf	status,0,c
  4852  002C0E  3204               	rrcf	___awmod@divisor+1,f,c
  4853  002C10  3203               	rrcf	___awmod@divisor,f,c
  4854  002C12  2E05               	decfsz	___awmod@counter,f,c
  4855  002C14  D7F1               	goto	l2593
  4856  002C16                     l2601:
  4857  002C16  5006               	movf	___awmod@sign,w,c
  4858  002C18  B4D8               	btfsc	status,2,c
  4859  002C1A  D004               	goto	l2605
  4860  002C1C  6C01               	negf	___awmod@dividend,c
  4861  002C1E  1E02               	comf	___awmod@dividend+1,f,c
  4862  002C20  B0D8               	btfsc	status,0,c
  4863  002C22  2A02               	incf	___awmod@dividend+1,f,c
  4864  002C24                     l2605:
  4865  002C24  C001  F001         	movff	___awmod@dividend,?___awmod
  4866  002C28  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4867  002C2C  0012               	return	
  4868  002C2E                     __end_of___awmod:
  4869                           	opt stack 0
  4870                           tblptru	equ	0xFF8
  4871                           tblptrh	equ	0xFF7
  4872                           tblptrl	equ	0xFF6
  4873                           tablat	equ	0xFF5
  4874                           prodh	equ	0xFF4
  4875                           prodl	equ	0xFF3
  4876                           postinc0	equ	0xFEE
  4877                           wreg	equ	0xFE8
  4878                           postdec1	equ	0xFE5
  4879                           fsr1l	equ	0xFE1
  4880                           indf2	equ	0xFDF
  4881                           postinc2	equ	0xFDE
  4882                           postdec2	equ	0xFDD
  4883                           fsr2h	equ	0xFDA
  4884                           fsr2l	equ	0xFD9
  4885                           status	equ	0xFD8
  4886                           
  4887 ;; *************** function ___awdiv *****************
  4888 ;; Defined at:
  4889 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/awdiv.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;  dividend        2    6[COMRAM] int 
  4892 ;;  divisor         2    8[COMRAM] int 
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;  quotient        2   12[COMRAM] int 
  4895 ;;  sign            1   11[COMRAM] unsigned char 
  4896 ;;  counter         1   10[COMRAM] unsigned char 
  4897 ;; Return value:  Size  Location     Type
  4898 ;;                  2    6[COMRAM] int 
  4899 ;; Registers used:
  4900 ;;		wreg, status,2, status,0
  4901 ;; Tracked objects:
  4902 ;;		On entry : 0/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4906 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4907 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4909 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4910 ;;Total ram usage:        8 bytes
  4911 ;; Hardware stack levels used:    1
  4912 ;; This function calls:
  4913 ;;		Nothing
  4914 ;; This function is called by:
  4915 ;;		_fround
  4916 ;;		_scale
  4917 ;;		_printf
  4918 ;; This function uses a non-reentrant model
  4919 ;;
  4920                           
  4921                           	psect	text17
  4922  002A40                     __ptext17:
  4923                           	opt stack 0
  4924  002A40                     ___awdiv:
  4925                           	opt stack 28
  4926                           
  4927                           ;incstack = 0
  4928  002A40  0E00               	movlw	0
  4929  002A42  6E0C               	movwf	___awdiv@sign,c
  4930  002A44  AE0A               	btfss	___awdiv@divisor+1,7,c
  4931  002A46  D006               	goto	l2537
  4932  002A48  6C09               	negf	___awdiv@divisor,c
  4933  002A4A  1E0A               	comf	___awdiv@divisor+1,f,c
  4934  002A4C  B0D8               	btfsc	status,0,c
  4935  002A4E  2A0A               	incf	___awdiv@divisor+1,f,c
  4936  002A50  0E01               	movlw	1
  4937  002A52  6E0C               	movwf	___awdiv@sign,c
  4938  002A54                     l2537:
  4939  002A54  AE08               	btfss	___awdiv@dividend+1,7,c
  4940  002A56  D006               	goto	l2543
  4941  002A58  6C07               	negf	___awdiv@dividend,c
  4942  002A5A  1E08               	comf	___awdiv@dividend+1,f,c
  4943  002A5C  B0D8               	btfsc	status,0,c
  4944  002A5E  2A08               	incf	___awdiv@dividend+1,f,c
  4945  002A60  0E01               	movlw	1
  4946  002A62  1A0C               	xorwf	___awdiv@sign,f,c
  4947  002A64                     l2543:
  4948  002A64  0E00               	movlw	0
  4949  002A66  6E0E               	movwf	___awdiv@quotient+1,c
  4950  002A68  0E00               	movlw	0
  4951  002A6A  6E0D               	movwf	___awdiv@quotient,c
  4952  002A6C  5009               	movf	___awdiv@divisor,w,c
  4953  002A6E  100A               	iorwf	___awdiv@divisor+1,w,c
  4954  002A70  B4D8               	btfsc	status,2,c
  4955  002A72  D01C               	goto	l2565
  4956  002A74  0E01               	movlw	1
  4957  002A76  6E0B               	movwf	___awdiv@counter,c
  4958  002A78  D004               	goto	l2551
  4959  002A7A                     l2549:
  4960  002A7A  90D8               	bcf	status,0,c
  4961  002A7C  3609               	rlcf	___awdiv@divisor,f,c
  4962  002A7E  360A               	rlcf	___awdiv@divisor+1,f,c
  4963  002A80  2A0B               	incf	___awdiv@counter,f,c
  4964  002A82                     l2551:
  4965  002A82  AE0A               	btfss	___awdiv@divisor+1,7,c
  4966  002A84  D7FA               	goto	l2549
  4967  002A86                     l2553:
  4968  002A86  90D8               	bcf	status,0,c
  4969  002A88  360D               	rlcf	___awdiv@quotient,f,c
  4970  002A8A  360E               	rlcf	___awdiv@quotient+1,f,c
  4971  002A8C  5009               	movf	___awdiv@divisor,w,c
  4972  002A8E  5C07               	subwf	___awdiv@dividend,w,c
  4973  002A90  500A               	movf	___awdiv@divisor+1,w,c
  4974  002A92  5808               	subwfb	___awdiv@dividend+1,w,c
  4975  002A94  A0D8               	btfss	status,0,c
  4976  002A96  D005               	goto	l2561
  4977  002A98  5009               	movf	___awdiv@divisor,w,c
  4978  002A9A  5E07               	subwf	___awdiv@dividend,f,c
  4979  002A9C  500A               	movf	___awdiv@divisor+1,w,c
  4980  002A9E  5A08               	subwfb	___awdiv@dividend+1,f,c
  4981  002AA0  800D               	bsf	___awdiv@quotient,0,c
  4982  002AA2                     l2561:
  4983  002AA2  90D8               	bcf	status,0,c
  4984  002AA4  320A               	rrcf	___awdiv@divisor+1,f,c
  4985  002AA6  3209               	rrcf	___awdiv@divisor,f,c
  4986  002AA8  2E0B               	decfsz	___awdiv@counter,f,c
  4987  002AAA  D7ED               	goto	l2553
  4988  002AAC                     l2565:
  4989  002AAC  500C               	movf	___awdiv@sign,w,c
  4990  002AAE  B4D8               	btfsc	status,2,c
  4991  002AB0  D004               	goto	l2569
  4992  002AB2  6C0D               	negf	___awdiv@quotient,c
  4993  002AB4  1E0E               	comf	___awdiv@quotient+1,f,c
  4994  002AB6  B0D8               	btfsc	status,0,c
  4995  002AB8  2A0E               	incf	___awdiv@quotient+1,f,c
  4996  002ABA                     l2569:
  4997  002ABA  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4998  002ABE  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4999  002AC2  0012               	return	
  5000  002AC4                     __end_of___awdiv:
  5001                           	opt stack 0
  5002                           tblptru	equ	0xFF8
  5003                           tblptrh	equ	0xFF7
  5004                           tblptrl	equ	0xFF6
  5005                           tablat	equ	0xFF5
  5006                           prodh	equ	0xFF4
  5007                           prodl	equ	0xFF3
  5008                           postinc0	equ	0xFEE
  5009                           wreg	equ	0xFE8
  5010                           postdec1	equ	0xFE5
  5011                           fsr1l	equ	0xFE1
  5012                           indf2	equ	0xFDF
  5013                           postinc2	equ	0xFDE
  5014                           postdec2	equ	0xFDD
  5015                           fsr2h	equ	0xFDA
  5016                           fsr2l	equ	0xFD9
  5017                           status	equ	0xFD8
  5018                           
  5019 ;; *************** function __tdiv_to_l_ *****************
  5020 ;; Defined at:
  5021 ;;		line 60 in file "/opt/microchip/xc8/v1.42/sources/common/ftdivl.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;  f1              3    0[COMRAM] float 
  5024 ;;  f2              3    3[COMRAM] float 
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;  quot            4    9[COMRAM] unsigned long 
  5027 ;;  exp1            1   14[COMRAM] unsigned char 
  5028 ;;  cntr            1   13[COMRAM] unsigned char 
  5029 ;; Return value:  Size  Location     Type
  5030 ;;                  4    0[COMRAM] unsigned long 
  5031 ;; Registers used:
  5032 ;;		wreg, status,2, status,0
  5033 ;; Tracked objects:
  5034 ;;		On entry : 0/0
  5035 ;;		On exit  : 0/0
  5036 ;;		Unchanged: 0/0
  5037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5038 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5039 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5040 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5041 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5042 ;;Total ram usage:       15 bytes
  5043 ;; Hardware stack levels used:    1
  5044 ;; This function calls:
  5045 ;;		Nothing
  5046 ;; This function is called by:
  5047 ;;		_printf
  5048 ;; This function uses a non-reentrant model
  5049 ;;
  5050                           
  5051                           	psect	text18
  5052  002198                     __ptext18:
  5053                           	opt stack 0
  5054  002198                     __tdiv_to_l_:
  5055                           	opt stack 29
  5056                           
  5057                           ;incstack = 0
  5058  002198  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5059  00219C  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5060  00219E  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5061  0021A0  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  5062  0021A2  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5063  0021A4  E301               	bnc	u2611
  5064  0021A6  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5065  0021A8                     u2611:
  5066  0021A8  5007               	movf	??__tdiv_to_l_,w,c
  5067  0021AA  6E0F               	movwf	__tdiv_to_l_@exp1,c
  5068  0021AC  500F               	movf	__tdiv_to_l_@exp1,w,c
  5069  0021AE  A4D8               	btfss	status,2,c
  5070  0021B0  D009               	goto	l2691
  5071  0021B2  0E00               	movlw	0
  5072  0021B4  6E01               	movwf	?__tdiv_to_l_,c
  5073  0021B6  0E00               	movlw	0
  5074  0021B8  6E02               	movwf	?__tdiv_to_l_+1,c
  5075  0021BA  0E00               	movlw	0
  5076  0021BC  6E03               	movwf	?__tdiv_to_l_+2,c
  5077  0021BE  0E00               	movlw	0
  5078  0021C0  6E04               	movwf	?__tdiv_to_l_+3,c
  5079  0021C2  0012               	return	
  5080  0021C4                     l2691:
  5081  0021C4  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5082  0021C8  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5083  0021CA  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5084  0021CC  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  5085  0021CE  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5086  0021D0  E301               	bnc	u2631
  5087  0021D2  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5088  0021D4                     u2631:
  5089  0021D4  5007               	movf	??__tdiv_to_l_,w,c
  5090  0021D6  6E0E               	movwf	__tdiv_to_l_@cntr,c
  5091  0021D8  500E               	movf	__tdiv_to_l_@cntr,w,c
  5092  0021DA  A4D8               	btfss	status,2,c
  5093  0021DC  D009               	goto	l2697
  5094  0021DE  0E00               	movlw	0
  5095  0021E0  6E01               	movwf	?__tdiv_to_l_,c
  5096  0021E2  0E00               	movlw	0
  5097  0021E4  6E02               	movwf	?__tdiv_to_l_+1,c
  5098  0021E6  0E00               	movlw	0
  5099  0021E8  6E03               	movwf	?__tdiv_to_l_+2,c
  5100  0021EA  0E00               	movlw	0
  5101  0021EC  6E04               	movwf	?__tdiv_to_l_+3,c
  5102  0021EE  0012               	return	
  5103  0021F0                     l2697:
  5104  0021F0  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  5105  0021F2  0EFF               	movlw	255
  5106  0021F4  1601               	andwf	__tdiv_to_l_@f1,f,c
  5107  0021F6  0EFF               	movlw	255
  5108  0021F8  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  5109  0021FA  0E00               	movlw	0
  5110  0021FC  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  5111  0021FE  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  5112  002200  0EFF               	movlw	255
  5113  002202  1604               	andwf	__tdiv_to_l_@f2,f,c
  5114  002204  0EFF               	movlw	255
  5115  002206  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  5116  002208  0E00               	movlw	0
  5117  00220A  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  5118  00220C  0E00               	movlw	0
  5119  00220E  6E0A               	movwf	__tdiv_to_l_@quot,c
  5120  002210  0E00               	movlw	0
  5121  002212  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  5122  002214  0E00               	movlw	0
  5123  002216  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  5124  002218  0E00               	movlw	0
  5125  00221A  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  5126  00221C  0E7F               	movlw	127
  5127  00221E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  5128  002220  500E               	movf	__tdiv_to_l_@cntr,w,c
  5129  002222  0F98               	addlw	152
  5130  002224  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  5131  002226  0E18               	movlw	24
  5132  002228  6E0E               	movwf	__tdiv_to_l_@cntr,c
  5133  00222A                     l691:
  5134  00222A  90D8               	bcf	status,0,c
  5135  00222C  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5136  00222E  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5137  002230  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5138  002232  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5139  002234  5004               	movf	__tdiv_to_l_@f2,w,c
  5140  002236  5C01               	subwf	__tdiv_to_l_@f1,w,c
  5141  002238  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5142  00223A  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  5143  00223C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5144  00223E  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  5145  002240  A0D8               	btfss	status,0,c
  5146  002242  D007               	goto	l692
  5147  002244  5004               	movf	__tdiv_to_l_@f2,w,c
  5148  002246  5E01               	subwf	__tdiv_to_l_@f1,f,c
  5149  002248  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5150  00224A  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  5151  00224C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5152  00224E  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  5153  002250  800A               	bsf	__tdiv_to_l_@quot,0,c
  5154  002252                     l692:
  5155  002252  90D8               	bcf	status,0,c
  5156  002254  3601               	rlcf	__tdiv_to_l_@f1,f,c
  5157  002256  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  5158  002258  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  5159  00225A  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  5160  00225C  D7E6               	goto	l691
  5161  00225E  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  5162  002260  D016               	goto	l2731
  5163  002262  500F               	movf	__tdiv_to_l_@exp1,w,c
  5164  002264  0A80               	xorlw	128
  5165  002266  0F97               	addlw	151
  5166  002268  B0D8               	btfsc	status,0,c
  5167  00226A  D009               	goto	l2727
  5168  00226C  0E00               	movlw	0
  5169  00226E  6E01               	movwf	?__tdiv_to_l_,c
  5170  002270  0E00               	movlw	0
  5171  002272  6E02               	movwf	?__tdiv_to_l_+1,c
  5172  002274  0E00               	movlw	0
  5173  002276  6E03               	movwf	?__tdiv_to_l_+2,c
  5174  002278  0E00               	movlw	0
  5175  00227A  6E04               	movwf	?__tdiv_to_l_+3,c
  5176  00227C  0012               	return	
  5177  00227E                     l2727:
  5178  00227E  90D8               	bcf	status,0,c
  5179  002280  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  5180  002282  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  5181  002284  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  5182  002286  320A               	rrcf	__tdiv_to_l_@quot,f,c
  5183  002288  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  5184  00228A  D7F9               	goto	l2727
  5185  00228C  D015               	goto	l698
  5186  00228E                     l2731:
  5187  00228E  0E17               	movlw	23
  5188  002290  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  5189  002292  D00F               	goto	l2739
  5190  002294  0E00               	movlw	0
  5191  002296  6E01               	movwf	?__tdiv_to_l_,c
  5192  002298  0E00               	movlw	0
  5193  00229A  6E02               	movwf	?__tdiv_to_l_+1,c
  5194  00229C  0E00               	movlw	0
  5195  00229E  6E03               	movwf	?__tdiv_to_l_+2,c
  5196  0022A0  0E00               	movlw	0
  5197  0022A2  6E04               	movwf	?__tdiv_to_l_+3,c
  5198  0022A4  0012               	return	
  5199  0022A6                     l2737:
  5200  0022A6  90D8               	bcf	status,0,c
  5201  0022A8  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5202  0022AA  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5203  0022AC  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5204  0022AE  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5205  0022B0  060F               	decf	__tdiv_to_l_@exp1,f,c
  5206  0022B2                     l2739:
  5207  0022B2  500F               	movf	__tdiv_to_l_@exp1,w,c
  5208  0022B4  A4D8               	btfss	status,2,c
  5209  0022B6  D7F7               	goto	l2737
  5210  0022B8                     l698:
  5211  0022B8  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5212  0022BC  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5213  0022C0  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5214  0022C4  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5215  0022C8  0012               	return		;funcret
  5216  0022CA                     __end_of__tdiv_to_l_:
  5217                           	opt stack 0
  5218                           tblptru	equ	0xFF8
  5219                           tblptrh	equ	0xFF7
  5220                           tblptrl	equ	0xFF6
  5221                           tablat	equ	0xFF5
  5222                           prodh	equ	0xFF4
  5223                           prodl	equ	0xFF3
  5224                           postinc0	equ	0xFEE
  5225                           wreg	equ	0xFE8
  5226                           postdec1	equ	0xFE5
  5227                           fsr1l	equ	0xFE1
  5228                           indf2	equ	0xFDF
  5229                           postinc2	equ	0xFDE
  5230                           postdec2	equ	0xFDD
  5231                           fsr2h	equ	0xFDA
  5232                           fsr2l	equ	0xFD9
  5233                           status	equ	0xFD8
  5234                           
  5235 ;; *************** function __div_to_l_ *****************
  5236 ;; Defined at:
  5237 ;;		line 60 in file "/opt/microchip/xc8/v1.42/sources/common/fldivl.c"
  5238 ;; Parameters:    Size  Location     Type
  5239 ;;  f1              3    0[COMRAM] unsigned long 
  5240 ;;  f2              3    3[COMRAM] unsigned long 
  5241 ;; Auto vars:     Size  Location     Type
  5242 ;;  quot            4    6[COMRAM] unsigned long 
  5243 ;;  exp1            1   11[COMRAM] unsigned char 
  5244 ;;  cntr            1   10[COMRAM] unsigned char 
  5245 ;; Return value:  Size  Location     Type
  5246 ;;                  4    0[COMRAM] unsigned long 
  5247 ;; Registers used:
  5248 ;;		wreg, status,2, status,0
  5249 ;; Tracked objects:
  5250 ;;		On entry : 0/0
  5251 ;;		On exit  : 0/0
  5252 ;;		Unchanged: 0/0
  5253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5254 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5255 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5257 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5258 ;;Total ram usage:       12 bytes
  5259 ;; Hardware stack levels used:    1
  5260 ;; This function calls:
  5261 ;;		Nothing
  5262 ;; This function is called by:
  5263 ;;		_printf
  5264 ;; This function uses a non-reentrant model
  5265 ;;
  5266                           
  5267                           	psect	text19
  5268  0022CA                     __ptext19:
  5269                           	opt stack 0
  5270  0022CA                     __div_to_l_:
  5271                           	opt stack 29
  5272                           
  5273                           ;incstack = 0
  5274  0022CA  3403               	rlcf	__div_to_l_@f1+2,w,c
  5275  0022CC  3404               	rlcf	__div_to_l_@f1+3,w,c
  5276  0022CE  6E0C               	movwf	__div_to_l_@exp1,c
  5277  0022D0  500C               	movf	__div_to_l_@exp1,w,c
  5278  0022D2  A4D8               	btfss	status,2,c
  5279  0022D4  D009               	goto	l2747
  5280  0022D6  0E00               	movlw	0
  5281  0022D8  6E01               	movwf	?__div_to_l_,c
  5282  0022DA  0E00               	movlw	0
  5283  0022DC  6E02               	movwf	?__div_to_l_+1,c
  5284  0022DE  0E00               	movlw	0
  5285  0022E0  6E03               	movwf	?__div_to_l_+2,c
  5286  0022E2  0E00               	movlw	0
  5287  0022E4  6E04               	movwf	?__div_to_l_+3,c
  5288  0022E6  0012               	return	
  5289  0022E8                     l2747:
  5290  0022E8  3406               	rlcf	__div_to_l_@f2+2,w,c
  5291  0022EA  3407               	rlcf	__div_to_l_@f2+3,w,c
  5292  0022EC  6E0B               	movwf	__div_to_l_@cntr,c
  5293  0022EE  500B               	movf	__div_to_l_@cntr,w,c
  5294  0022F0  A4D8               	btfss	status,2,c
  5295  0022F2  D009               	goto	l2753
  5296  0022F4  0E00               	movlw	0
  5297  0022F6  6E01               	movwf	?__div_to_l_,c
  5298  0022F8  0E00               	movlw	0
  5299  0022FA  6E02               	movwf	?__div_to_l_+1,c
  5300  0022FC  0E00               	movlw	0
  5301  0022FE  6E03               	movwf	?__div_to_l_+2,c
  5302  002300  0E00               	movlw	0
  5303  002302  6E04               	movwf	?__div_to_l_+3,c
  5304  002304  0012               	return	
  5305  002306                     l2753:
  5306  002306  8E03               	bsf	__div_to_l_@f1+2,7,c
  5307  002308  0EFF               	movlw	255
  5308  00230A  1601               	andwf	__div_to_l_@f1,f,c
  5309  00230C  0EFF               	movlw	255
  5310  00230E  1602               	andwf	__div_to_l_@f1+1,f,c
  5311  002310  0EFF               	movlw	255
  5312  002312  1603               	andwf	__div_to_l_@f1+2,f,c
  5313  002314  0E00               	movlw	0
  5314  002316  1604               	andwf	__div_to_l_@f1+3,f,c
  5315  002318  8E06               	bsf	__div_to_l_@f2+2,7,c
  5316  00231A  0EFF               	movlw	255
  5317  00231C  1604               	andwf	__div_to_l_@f2,f,c
  5318  00231E  0EFF               	movlw	255
  5319  002320  1605               	andwf	__div_to_l_@f2+1,f,c
  5320  002322  0EFF               	movlw	255
  5321  002324  1606               	andwf	__div_to_l_@f2+2,f,c
  5322  002326  0E00               	movlw	0
  5323  002328  1607               	andwf	__div_to_l_@f2+3,f,c
  5324  00232A  0E00               	movlw	0
  5325  00232C  6E07               	movwf	__div_to_l_@quot,c
  5326  00232E  0E00               	movlw	0
  5327  002330  6E08               	movwf	__div_to_l_@quot+1,c
  5328  002332  0E00               	movlw	0
  5329  002334  6E09               	movwf	__div_to_l_@quot+2,c
  5330  002336  0E00               	movlw	0
  5331  002338  6E0A               	movwf	__div_to_l_@quot+3,c
  5332  00233A  0E7F               	movlw	127
  5333  00233C  5E0C               	subwf	__div_to_l_@exp1,f,c
  5334  00233E  500B               	movf	__div_to_l_@cntr,w,c
  5335  002340  0FA0               	addlw	160
  5336  002342  5E0C               	subwf	__div_to_l_@exp1,f,c
  5337  002344  0E20               	movlw	32
  5338  002346  6E0B               	movwf	__div_to_l_@cntr,c
  5339  002348                     l2767:
  5340  002348  90D8               	bcf	status,0,c
  5341  00234A  3607               	rlcf	__div_to_l_@quot,f,c
  5342  00234C  3608               	rlcf	__div_to_l_@quot+1,f,c
  5343  00234E  3609               	rlcf	__div_to_l_@quot+2,f,c
  5344  002350  360A               	rlcf	__div_to_l_@quot+3,f,c
  5345  002352  5004               	movf	__div_to_l_@f2,w,c
  5346  002354  5C01               	subwf	__div_to_l_@f1,w,c
  5347  002356  5005               	movf	__div_to_l_@f2+1,w,c
  5348  002358  5802               	subwfb	__div_to_l_@f1+1,w,c
  5349  00235A  5006               	movf	__div_to_l_@f2+2,w,c
  5350  00235C  5803               	subwfb	__div_to_l_@f1+2,w,c
  5351  00235E  5007               	movf	__div_to_l_@f2+3,w,c
  5352  002360  5804               	subwfb	__div_to_l_@f1+3,w,c
  5353  002362  A0D8               	btfss	status,0,c
  5354  002364  D009               	goto	l2775
  5355  002366  5004               	movf	__div_to_l_@f2,w,c
  5356  002368  5E01               	subwf	__div_to_l_@f1,f,c
  5357  00236A  5005               	movf	__div_to_l_@f2+1,w,c
  5358  00236C  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5359  00236E  5006               	movf	__div_to_l_@f2+2,w,c
  5360  002370  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5361  002372  5007               	movf	__div_to_l_@f2+3,w,c
  5362  002374  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5363  002376  8007               	bsf	__div_to_l_@quot,0,c
  5364  002378                     l2775:
  5365  002378  90D8               	bcf	status,0,c
  5366  00237A  3601               	rlcf	__div_to_l_@f1,f,c
  5367  00237C  3602               	rlcf	__div_to_l_@f1+1,f,c
  5368  00237E  3603               	rlcf	__div_to_l_@f1+2,f,c
  5369  002380  3604               	rlcf	__div_to_l_@f1+3,f,c
  5370  002382  2E0B               	decfsz	__div_to_l_@cntr,f,c
  5371  002384  D7E1               	goto	l2767
  5372  002386  AE0C               	btfss	__div_to_l_@exp1,7,c
  5373  002388  D016               	goto	l2791
  5374  00238A  500C               	movf	__div_to_l_@exp1,w,c
  5375  00238C  0A80               	xorlw	128
  5376  00238E  0F9F               	addlw	159
  5377  002390  B0D8               	btfsc	status,0,c
  5378  002392  D009               	goto	l2787
  5379  002394  0E00               	movlw	0
  5380  002396  6E01               	movwf	?__div_to_l_,c
  5381  002398  0E00               	movlw	0
  5382  00239A  6E02               	movwf	?__div_to_l_+1,c
  5383  00239C  0E00               	movlw	0
  5384  00239E  6E03               	movwf	?__div_to_l_+2,c
  5385  0023A0  0E00               	movlw	0
  5386  0023A2  6E04               	movwf	?__div_to_l_+3,c
  5387  0023A4  0012               	return	
  5388  0023A6                     l2787:
  5389  0023A6  90D8               	bcf	status,0,c
  5390  0023A8  320A               	rrcf	__div_to_l_@quot+3,f,c
  5391  0023AA  3209               	rrcf	__div_to_l_@quot+2,f,c
  5392  0023AC  3208               	rrcf	__div_to_l_@quot+1,f,c
  5393  0023AE  3207               	rrcf	__div_to_l_@quot,f,c
  5394  0023B0  3E0C               	incfsz	__div_to_l_@exp1,f,c
  5395  0023B2  D7F9               	goto	l2787
  5396  0023B4  D015               	goto	l594
  5397  0023B6                     l2791:
  5398  0023B6  0E1F               	movlw	31
  5399  0023B8  640C               	cpfsgt	__div_to_l_@exp1,c
  5400  0023BA  D00F               	goto	l2799
  5401  0023BC  0E00               	movlw	0
  5402  0023BE  6E01               	movwf	?__div_to_l_,c
  5403  0023C0  0E00               	movlw	0
  5404  0023C2  6E02               	movwf	?__div_to_l_+1,c
  5405  0023C4  0E00               	movlw	0
  5406  0023C6  6E03               	movwf	?__div_to_l_+2,c
  5407  0023C8  0E00               	movlw	0
  5408  0023CA  6E04               	movwf	?__div_to_l_+3,c
  5409  0023CC  0012               	return	
  5410  0023CE                     l2797:
  5411  0023CE  90D8               	bcf	status,0,c
  5412  0023D0  3607               	rlcf	__div_to_l_@quot,f,c
  5413  0023D2  3608               	rlcf	__div_to_l_@quot+1,f,c
  5414  0023D4  3609               	rlcf	__div_to_l_@quot+2,f,c
  5415  0023D6  360A               	rlcf	__div_to_l_@quot+3,f,c
  5416  0023D8  060C               	decf	__div_to_l_@exp1,f,c
  5417  0023DA                     l2799:
  5418  0023DA  500C               	movf	__div_to_l_@exp1,w,c
  5419  0023DC  A4D8               	btfss	status,2,c
  5420  0023DE  D7F7               	goto	l2797
  5421  0023E0                     l594:
  5422  0023E0  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5423  0023E4  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5424  0023E8  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5425  0023EC  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5426  0023F0  0012               	return		;funcret
  5427  0023F2                     __end_of__div_to_l_:
  5428                           	opt stack 0
  5429                           tblptru	equ	0xFF8
  5430                           tblptrh	equ	0xFF7
  5431                           tblptrl	equ	0xFF6
  5432                           tablat	equ	0xFF5
  5433                           prodh	equ	0xFF4
  5434                           prodl	equ	0xFF3
  5435                           postinc0	equ	0xFEE
  5436                           wreg	equ	0xFE8
  5437                           postdec1	equ	0xFE5
  5438                           fsr1l	equ	0xFE1
  5439                           indf2	equ	0xFDF
  5440                           postinc2	equ	0xFDE
  5441                           postdec2	equ	0xFDD
  5442                           fsr2h	equ	0xFDA
  5443                           fsr2l	equ	0xFD9
  5444                           status	equ	0xFD8
  5445                           
  5446 ;; *************** function ___lltoft *****************
  5447 ;; Defined at:
  5448 ;;		line 35 in file "/opt/microchip/xc8/v1.42/sources/common/lltoft.c"
  5449 ;; Parameters:    Size  Location     Type
  5450 ;;  c               4    8[COMRAM] unsigned long 
  5451 ;; Auto vars:     Size  Location     Type
  5452 ;;  exp             1   16[COMRAM] unsigned char 
  5453 ;; Return value:  Size  Location     Type
  5454 ;;                  3    8[COMRAM] float 
  5455 ;; Registers used:
  5456 ;;		wreg, status,2, status,0, cstack
  5457 ;; Tracked objects:
  5458 ;;		On entry : 0/0
  5459 ;;		On exit  : 0/0
  5460 ;;		Unchanged: 0/0
  5461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5462 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5463 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5464 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5465 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5466 ;;Total ram usage:        9 bytes
  5467 ;; Hardware stack levels used:    1
  5468 ;; Hardware stack levels required when called:    1
  5469 ;; This function calls:
  5470 ;;		___ftpack
  5471 ;; This function is called by:
  5472 ;;		_printf
  5473 ;; This function uses a non-reentrant model
  5474 ;;
  5475                           
  5476                           	psect	text20
  5477  002D02                     __ptext20:
  5478                           	opt stack 0
  5479  002D02                     ___lltoft:
  5480                           	opt stack 28
  5481                           
  5482                           ;incstack = 0
  5483  002D02  0E8E               	movlw	142
  5484  002D04  6E11               	movwf	___lltoft@exp,c
  5485  002D06  D006               	goto	l2919
  5486  002D08                     l2917:
  5487  002D08  90D8               	bcf	status,0,c
  5488  002D0A  320C               	rrcf	___lltoft@c+3,f,c
  5489  002D0C  320B               	rrcf	___lltoft@c+2,f,c
  5490  002D0E  320A               	rrcf	___lltoft@c+1,f,c
  5491  002D10  3209               	rrcf	___lltoft@c,f,c
  5492  002D12  2A11               	incf	___lltoft@exp,f,c
  5493  002D14                     l2919:
  5494  002D14  0E00               	movlw	0
  5495  002D16  1409               	andwf	___lltoft@c,w,c
  5496  002D18  6E0D               	movwf	??___lltoft& (0+255),c
  5497  002D1A  0E00               	movlw	0
  5498  002D1C  140A               	andwf	___lltoft@c+1,w,c
  5499  002D1E  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  5500  002D20  0E00               	movlw	0
  5501  002D22  140B               	andwf	___lltoft@c+2,w,c
  5502  002D24  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  5503  002D26  0EFF               	movlw	255
  5504  002D28  140C               	andwf	___lltoft@c+3,w,c
  5505  002D2A  6E10               	movwf	(??___lltoft+3)& (0+255),c
  5506  002D2C  500D               	movf	??___lltoft,w,c
  5507  002D2E  100E               	iorwf	??___lltoft+1,w,c
  5508  002D30  100F               	iorwf	??___lltoft+2,w,c
  5509  002D32  1010               	iorwf	??___lltoft+3,w,c
  5510  002D34  A4D8               	btfss	status,2,c
  5511  002D36  D7E8               	goto	l2917
  5512  002D38  C009  F001         	movff	___lltoft@c,___ftpack@arg
  5513  002D3C  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  5514  002D40  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  5515  002D44  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  5516  002D48  0E00               	movlw	0
  5517  002D4A  6E05               	movwf	___ftpack@sign,c
  5518  002D4C  EC2F  F014         	call	___ftpack	;wreg free
  5519  002D50  C001  F009         	movff	?___ftpack,?___lltoft
  5520  002D54  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  5521  002D58  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  5522  002D5C  0012               	return	
  5523  002D5E                     __end_of___lltoft:
  5524                           	opt stack 0
  5525                           tblptru	equ	0xFF8
  5526                           tblptrh	equ	0xFF7
  5527                           tblptrl	equ	0xFF6
  5528                           tablat	equ	0xFF5
  5529                           prodh	equ	0xFF4
  5530                           prodl	equ	0xFF3
  5531                           postinc0	equ	0xFEE
  5532                           wreg	equ	0xFE8
  5533                           postdec1	equ	0xFE5
  5534                           fsr1l	equ	0xFE1
  5535                           indf2	equ	0xFDF
  5536                           postinc2	equ	0xFDE
  5537                           postdec2	equ	0xFDD
  5538                           fsr2h	equ	0xFDA
  5539                           fsr2l	equ	0xFD9
  5540                           status	equ	0xFD8
  5541                           
  5542 ;; *************** function ___llmod *****************
  5543 ;; Defined at:
  5544 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/llmod.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;  dividend        4    0[COMRAM] unsigned long 
  5547 ;;  divisor         4    4[COMRAM] unsigned long 
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;  counter         1    8[COMRAM] unsigned char 
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  4    0[COMRAM] unsigned long 
  5552 ;; Registers used:
  5553 ;;		wreg, status,2, status,0
  5554 ;; Tracked objects:
  5555 ;;		On entry : 0/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5559 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5560 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5562 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5563 ;;Total ram usage:        9 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; This function calls:
  5566 ;;		Nothing
  5567 ;; This function is called by:
  5568 ;;		_printf
  5569 ;; This function uses a non-reentrant model
  5570 ;;
  5571                           
  5572                           	psect	text21
  5573  002C9C                     __ptext21:
  5574                           	opt stack 0
  5575  002C9C                     ___llmod:
  5576                           	opt stack 29
  5577                           
  5578                           ;incstack = 0
  5579  002C9C  5005               	movf	___llmod@divisor,w,c
  5580  002C9E  1006               	iorwf	___llmod@divisor+1,w,c
  5581  002CA0  1007               	iorwf	___llmod@divisor+2,w,c
  5582  002CA2  1008               	iorwf	___llmod@divisor+3,w,c
  5583  002CA4  B4D8               	btfsc	status,2,c
  5584  002CA6  D024               	goto	l797
  5585  002CA8  0E01               	movlw	1
  5586  002CAA  6E09               	movwf	___llmod@counter,c
  5587  002CAC  D006               	goto	l2905
  5588  002CAE                     l2903:
  5589  002CAE  90D8               	bcf	status,0,c
  5590  002CB0  3605               	rlcf	___llmod@divisor,f,c
  5591  002CB2  3606               	rlcf	___llmod@divisor+1,f,c
  5592  002CB4  3607               	rlcf	___llmod@divisor+2,f,c
  5593  002CB6  3608               	rlcf	___llmod@divisor+3,f,c
  5594  002CB8  2A09               	incf	___llmod@counter,f,c
  5595  002CBA                     l2905:
  5596  002CBA  AE08               	btfss	___llmod@divisor+3,7,c
  5597  002CBC  D7F8               	goto	l2903
  5598  002CBE                     l2907:
  5599  002CBE  5005               	movf	___llmod@divisor,w,c
  5600  002CC0  5C01               	subwf	___llmod@dividend,w,c
  5601  002CC2  5006               	movf	___llmod@divisor+1,w,c
  5602  002CC4  5802               	subwfb	___llmod@dividend+1,w,c
  5603  002CC6  5007               	movf	___llmod@divisor+2,w,c
  5604  002CC8  5803               	subwfb	___llmod@dividend+2,w,c
  5605  002CCA  5008               	movf	___llmod@divisor+3,w,c
  5606  002CCC  5804               	subwfb	___llmod@dividend+3,w,c
  5607  002CCE  A0D8               	btfss	status,0,c
  5608  002CD0  D008               	goto	l2911
  5609  002CD2  5005               	movf	___llmod@divisor,w,c
  5610  002CD4  5E01               	subwf	___llmod@dividend,f,c
  5611  002CD6  5006               	movf	___llmod@divisor+1,w,c
  5612  002CD8  5A02               	subwfb	___llmod@dividend+1,f,c
  5613  002CDA  5007               	movf	___llmod@divisor+2,w,c
  5614  002CDC  5A03               	subwfb	___llmod@dividend+2,f,c
  5615  002CDE  5008               	movf	___llmod@divisor+3,w,c
  5616  002CE0  5A04               	subwfb	___llmod@dividend+3,f,c
  5617  002CE2                     l2911:
  5618  002CE2  90D8               	bcf	status,0,c
  5619  002CE4  3208               	rrcf	___llmod@divisor+3,f,c
  5620  002CE6  3207               	rrcf	___llmod@divisor+2,f,c
  5621  002CE8  3206               	rrcf	___llmod@divisor+1,f,c
  5622  002CEA  3205               	rrcf	___llmod@divisor,f,c
  5623  002CEC  2E09               	decfsz	___llmod@counter,f,c
  5624  002CEE  D7E7               	goto	l2907
  5625  002CF0                     l797:
  5626  002CF0  C001  F001         	movff	___llmod@dividend,?___llmod
  5627  002CF4  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  5628  002CF8  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  5629  002CFC  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  5630  002D00  0012               	return		;funcret
  5631  002D02                     __end_of___llmod:
  5632                           	opt stack 0
  5633                           tblptru	equ	0xFF8
  5634                           tblptrh	equ	0xFF7
  5635                           tblptrl	equ	0xFF6
  5636                           tablat	equ	0xFF5
  5637                           prodh	equ	0xFF4
  5638                           prodl	equ	0xFF3
  5639                           postinc0	equ	0xFEE
  5640                           wreg	equ	0xFE8
  5641                           postdec1	equ	0xFE5
  5642                           fsr1l	equ	0xFE1
  5643                           indf2	equ	0xFDF
  5644                           postinc2	equ	0xFDE
  5645                           postdec2	equ	0xFDD
  5646                           fsr2h	equ	0xFDA
  5647                           fsr2l	equ	0xFD9
  5648                           status	equ	0xFD8
  5649                           
  5650 ;; *************** function ___lldiv *****************
  5651 ;; Defined at:
  5652 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/lldiv.c"
  5653 ;; Parameters:    Size  Location     Type
  5654 ;;  dividend        4    0[COMRAM] unsigned long 
  5655 ;;  divisor         4    4[COMRAM] unsigned long 
  5656 ;; Auto vars:     Size  Location     Type
  5657 ;;  quotient        4    8[COMRAM] unsigned long 
  5658 ;;  counter         1   12[COMRAM] unsigned char 
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  4    0[COMRAM] unsigned long 
  5661 ;; Registers used:
  5662 ;;		wreg, status,2, status,0
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5668 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5669 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5671 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5672 ;;Total ram usage:       13 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; This function calls:
  5675 ;;		Nothing
  5676 ;; This function is called by:
  5677 ;;		_printf
  5678 ;; This function uses a non-reentrant model
  5679 ;;
  5680                           
  5681                           	psect	text22
  5682  002AC4                     __ptext22:
  5683                           	opt stack 0
  5684  002AC4                     ___lldiv:
  5685                           	opt stack 29
  5686                           
  5687                           ;incstack = 0
  5688  002AC4  0E00               	movlw	0
  5689  002AC6  6E09               	movwf	___lldiv@quotient,c
  5690  002AC8  0E00               	movlw	0
  5691  002ACA  6E0A               	movwf	___lldiv@quotient+1,c
  5692  002ACC  0E00               	movlw	0
  5693  002ACE  6E0B               	movwf	___lldiv@quotient+2,c
  5694  002AD0  0E00               	movlw	0
  5695  002AD2  6E0C               	movwf	___lldiv@quotient+3,c
  5696  002AD4  5005               	movf	___lldiv@divisor,w,c
  5697  002AD6  1006               	iorwf	___lldiv@divisor+1,w,c
  5698  002AD8  1007               	iorwf	___lldiv@divisor+2,w,c
  5699  002ADA  1008               	iorwf	___lldiv@divisor+3,w,c
  5700  002ADC  B4D8               	btfsc	status,2,c
  5701  002ADE  D02A               	goto	l787
  5702  002AE0  0E01               	movlw	1
  5703  002AE2  6E0D               	movwf	___lldiv@counter,c
  5704  002AE4  D006               	goto	l2885
  5705  002AE6                     l2883:
  5706  002AE6  90D8               	bcf	status,0,c
  5707  002AE8  3605               	rlcf	___lldiv@divisor,f,c
  5708  002AEA  3606               	rlcf	___lldiv@divisor+1,f,c
  5709  002AEC  3607               	rlcf	___lldiv@divisor+2,f,c
  5710  002AEE  3608               	rlcf	___lldiv@divisor+3,f,c
  5711  002AF0  2A0D               	incf	___lldiv@counter,f,c
  5712  002AF2                     l2885:
  5713  002AF2  AE08               	btfss	___lldiv@divisor+3,7,c
  5714  002AF4  D7F8               	goto	l2883
  5715  002AF6                     l2887:
  5716  002AF6  90D8               	bcf	status,0,c
  5717  002AF8  3609               	rlcf	___lldiv@quotient,f,c
  5718  002AFA  360A               	rlcf	___lldiv@quotient+1,f,c
  5719  002AFC  360B               	rlcf	___lldiv@quotient+2,f,c
  5720  002AFE  360C               	rlcf	___lldiv@quotient+3,f,c
  5721  002B00  5005               	movf	___lldiv@divisor,w,c
  5722  002B02  5C01               	subwf	___lldiv@dividend,w,c
  5723  002B04  5006               	movf	___lldiv@divisor+1,w,c
  5724  002B06  5802               	subwfb	___lldiv@dividend+1,w,c
  5725  002B08  5007               	movf	___lldiv@divisor+2,w,c
  5726  002B0A  5803               	subwfb	___lldiv@dividend+2,w,c
  5727  002B0C  5008               	movf	___lldiv@divisor+3,w,c
  5728  002B0E  5804               	subwfb	___lldiv@dividend+3,w,c
  5729  002B10  A0D8               	btfss	status,0,c
  5730  002B12  D009               	goto	l2895
  5731  002B14  5005               	movf	___lldiv@divisor,w,c
  5732  002B16  5E01               	subwf	___lldiv@dividend,f,c
  5733  002B18  5006               	movf	___lldiv@divisor+1,w,c
  5734  002B1A  5A02               	subwfb	___lldiv@dividend+1,f,c
  5735  002B1C  5007               	movf	___lldiv@divisor+2,w,c
  5736  002B1E  5A03               	subwfb	___lldiv@dividend+2,f,c
  5737  002B20  5008               	movf	___lldiv@divisor+3,w,c
  5738  002B22  5A04               	subwfb	___lldiv@dividend+3,f,c
  5739  002B24  8009               	bsf	___lldiv@quotient,0,c
  5740  002B26                     l2895:
  5741  002B26  90D8               	bcf	status,0,c
  5742  002B28  3208               	rrcf	___lldiv@divisor+3,f,c
  5743  002B2A  3207               	rrcf	___lldiv@divisor+2,f,c
  5744  002B2C  3206               	rrcf	___lldiv@divisor+1,f,c
  5745  002B2E  3205               	rrcf	___lldiv@divisor,f,c
  5746  002B30  2E0D               	decfsz	___lldiv@counter,f,c
  5747  002B32  D7E1               	goto	l2887
  5748  002B34                     l787:
  5749  002B34  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5750  002B38  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5751  002B3C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5752  002B40  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5753  002B44  0012               	return		;funcret
  5754  002B46                     __end_of___lldiv:
  5755                           	opt stack 0
  5756                           tblptru	equ	0xFF8
  5757                           tblptrh	equ	0xFF7
  5758                           tblptrl	equ	0xFF6
  5759                           tablat	equ	0xFF5
  5760                           prodh	equ	0xFF4
  5761                           prodl	equ	0xFF3
  5762                           postinc0	equ	0xFEE
  5763                           wreg	equ	0xFE8
  5764                           postdec1	equ	0xFE5
  5765                           fsr1l	equ	0xFE1
  5766                           indf2	equ	0xFDF
  5767                           postinc2	equ	0xFDE
  5768                           postdec2	equ	0xFDD
  5769                           fsr2h	equ	0xFDA
  5770                           fsr2l	equ	0xFD9
  5771                           status	equ	0xFD8
  5772                           
  5773 ;; *************** function ___fttol *****************
  5774 ;; Defined at:
  5775 ;;		line 44 in file "/opt/microchip/xc8/v1.42/sources/common/fttol.c"
  5776 ;; Parameters:    Size  Location     Type
  5777 ;;  f1              3   42[COMRAM] float 
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;  lval            4   52[COMRAM] unsigned long 
  5780 ;;  exp1            1   56[COMRAM] unsigned char 
  5781 ;;  sign1           1   51[COMRAM] unsigned char 
  5782 ;; Return value:  Size  Location     Type
  5783 ;;                  4   42[COMRAM] long 
  5784 ;; Registers used:
  5785 ;;		wreg, status,2, status,0
  5786 ;; Tracked objects:
  5787 ;;		On entry : 0/0
  5788 ;;		On exit  : 0/0
  5789 ;;		Unchanged: 0/0
  5790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5791 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5792 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5793 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5794 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5795 ;;Total ram usage:       15 bytes
  5796 ;; Hardware stack levels used:    1
  5797 ;; This function calls:
  5798 ;;		Nothing
  5799 ;; This function is called by:
  5800 ;;		_printf
  5801 ;; This function uses a non-reentrant model
  5802 ;;
  5803                           
  5804                           	psect	text23
  5805  0024E6                     __ptext23:
  5806                           	opt stack 0
  5807  0024E6                     ___fttol:
  5808                           	opt stack 29
  5809                           
  5810                           ;incstack = 0
  5811  0024E6  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  5812  0024EA  6A30               	clrf	(??___fttol+1)& (0+255),c
  5813  0024EC  6A31               	clrf	(??___fttol+2)& (0+255),c
  5814  0024EE  342C               	rlcf	___fttol@f1+1,w,c
  5815  0024F0  362F               	rlcf	??___fttol& (0+255),f,c
  5816  0024F2  E301               	bnc	u2821
  5817  0024F4  8030               	bsf	(??___fttol+1)& (0+255),0,c
  5818  0024F6                     u2821:
  5819  0024F6  502F               	movf	??___fttol,w,c
  5820  0024F8  6E39               	movwf	___fttol@exp1,c
  5821  0024FA  5039               	movf	___fttol@exp1,w,c
  5822  0024FC  A4D8               	btfss	status,2,c
  5823  0024FE  D009               	goto	l2837
  5824  002500  0E00               	movlw	0
  5825  002502  6E2B               	movwf	?___fttol,c
  5826  002504  0E00               	movlw	0
  5827  002506  6E2C               	movwf	?___fttol+1,c
  5828  002508  0E00               	movlw	0
  5829  00250A  6E2D               	movwf	?___fttol+2,c
  5830  00250C  0E00               	movlw	0
  5831  00250E  6E2E               	movwf	?___fttol+3,c
  5832  002510  0012               	return	
  5833  002512                     l2837:
  5834  002512  0E17               	movlw	23
  5835  002514  6E2F               	movwf	??___fttol& (0+255),c
  5836  002516  C02B  F030         	movff	___fttol@f1,??___fttol+1
  5837  00251A  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  5838  00251E  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  5839  002522  282F               	incf	??___fttol,w,c
  5840  002524  6E33               	movwf	(??___fttol+4)& (0+255),c
  5841  002526  D004               	goto	u2840
  5842  002528                     u2845:
  5843  002528  90D8               	bcf	status,0,c
  5844  00252A  3232               	rrcf	??___fttol+3,f,c
  5845  00252C  3231               	rrcf	??___fttol+2,f,c
  5846  00252E  3230               	rrcf	??___fttol+1,f,c
  5847  002530                     u2840:
  5848  002530  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  5849  002532  D7FA               	goto	u2845
  5850  002534  5030               	movf	??___fttol+1,w,c
  5851  002536  6E34               	movwf	___fttol@sign1,c
  5852  002538  8E2C               	bsf	___fttol@f1+1,7,c
  5853  00253A  0EFF               	movlw	255
  5854  00253C  162B               	andwf	___fttol@f1,f,c
  5855  00253E  0EFF               	movlw	255
  5856  002540  162C               	andwf	___fttol@f1+1,f,c
  5857  002542  0E00               	movlw	0
  5858  002544  162D               	andwf	___fttol@f1+2,f,c
  5859  002546  502B               	movf	___fttol@f1,w,c
  5860  002548  6E35               	movwf	___fttol@lval,c
  5861  00254A  502C               	movf	___fttol@f1+1,w,c
  5862  00254C  6E36               	movwf	___fttol@lval+1,c
  5863  00254E  502D               	movf	___fttol@f1+2,w,c
  5864  002550  6E37               	movwf	___fttol@lval+2,c
  5865  002552  6A38               	clrf	___fttol@lval+3,c
  5866  002554  0E8E               	movlw	142
  5867  002556  5E39               	subwf	___fttol@exp1,f,c
  5868  002558  AE39               	btfss	___fttol@exp1,7,c
  5869  00255A  D016               	goto	l2859
  5870  00255C  5039               	movf	___fttol@exp1,w,c
  5871  00255E  0A80               	xorlw	128
  5872  002560  0F8F               	addlw	143
  5873  002562  B0D8               	btfsc	status,0,c
  5874  002564  D009               	goto	l2855
  5875  002566  0E00               	movlw	0
  5876  002568  6E2B               	movwf	?___fttol,c
  5877  00256A  0E00               	movlw	0
  5878  00256C  6E2C               	movwf	?___fttol+1,c
  5879  00256E  0E00               	movlw	0
  5880  002570  6E2D               	movwf	?___fttol+2,c
  5881  002572  0E00               	movlw	0
  5882  002574  6E2E               	movwf	?___fttol+3,c
  5883  002576  0012               	return	
  5884  002578                     l2855:
  5885  002578  90D8               	bcf	status,0,c
  5886  00257A  3238               	rrcf	___fttol@lval+3,f,c
  5887  00257C  3237               	rrcf	___fttol@lval+2,f,c
  5888  00257E  3236               	rrcf	___fttol@lval+1,f,c
  5889  002580  3235               	rrcf	___fttol@lval,f,c
  5890  002582  3E39               	incfsz	___fttol@exp1,f,c
  5891  002584  D7F9               	goto	l2855
  5892  002586  D015               	goto	l2869
  5893  002588                     l2859:
  5894  002588  0E17               	movlw	23
  5895  00258A  6439               	cpfsgt	___fttol@exp1,c
  5896  00258C  D00F               	goto	l2867
  5897  00258E  0E00               	movlw	0
  5898  002590  6E2B               	movwf	?___fttol,c
  5899  002592  0E00               	movlw	0
  5900  002594  6E2C               	movwf	?___fttol+1,c
  5901  002596  0E00               	movlw	0
  5902  002598  6E2D               	movwf	?___fttol+2,c
  5903  00259A  0E00               	movlw	0
  5904  00259C  6E2E               	movwf	?___fttol+3,c
  5905  00259E  0012               	return	
  5906  0025A0                     l2865:
  5907  0025A0  90D8               	bcf	status,0,c
  5908  0025A2  3635               	rlcf	___fttol@lval,f,c
  5909  0025A4  3636               	rlcf	___fttol@lval+1,f,c
  5910  0025A6  3637               	rlcf	___fttol@lval+2,f,c
  5911  0025A8  3638               	rlcf	___fttol@lval+3,f,c
  5912  0025AA  0639               	decf	___fttol@exp1,f,c
  5913  0025AC                     l2867:
  5914  0025AC  5039               	movf	___fttol@exp1,w,c
  5915  0025AE  A4D8               	btfss	status,2,c
  5916  0025B0  D7F7               	goto	l2865
  5917  0025B2                     l2869:
  5918  0025B2  5034               	movf	___fttol@sign1,w,c
  5919  0025B4  B4D8               	btfsc	status,2,c
  5920  0025B6  D008               	goto	l2873
  5921  0025B8  1E38               	comf	___fttol@lval+3,f,c
  5922  0025BA  1E37               	comf	___fttol@lval+2,f,c
  5923  0025BC  1E36               	comf	___fttol@lval+1,f,c
  5924  0025BE  6C35               	negf	___fttol@lval,c
  5925  0025C0  0E00               	movlw	0
  5926  0025C2  2236               	addwfc	___fttol@lval+1,f,c
  5927  0025C4  2237               	addwfc	___fttol@lval+2,f,c
  5928  0025C6  2238               	addwfc	___fttol@lval+3,f,c
  5929  0025C8                     l2873:
  5930  0025C8  C035  F02B         	movff	___fttol@lval,?___fttol
  5931  0025CC  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  5932  0025D0  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  5933  0025D4  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  5934  0025D8  0012               	return	
  5935  0025DA                     __end_of___fttol:
  5936                           	opt stack 0
  5937                           tblptru	equ	0xFF8
  5938                           tblptrh	equ	0xFF7
  5939                           tblptrl	equ	0xFF6
  5940                           tablat	equ	0xFF5
  5941                           prodh	equ	0xFF4
  5942                           prodl	equ	0xFF3
  5943                           postinc0	equ	0xFEE
  5944                           wreg	equ	0xFE8
  5945                           postdec1	equ	0xFE5
  5946                           fsr1l	equ	0xFE1
  5947                           indf2	equ	0xFDF
  5948                           postinc2	equ	0xFDE
  5949                           postdec2	equ	0xFDD
  5950                           fsr2h	equ	0xFDA
  5951                           fsr2l	equ	0xFD9
  5952                           status	equ	0xFD8
  5953                           
  5954 ;; *************** function ___ftsub *****************
  5955 ;; Defined at:
  5956 ;;		line 20 in file "/opt/microchip/xc8/v1.42/sources/common/ftsub.c"
  5957 ;; Parameters:    Size  Location     Type
  5958 ;;  f1              3   57[COMRAM] float 
  5959 ;;  f2              3   60[COMRAM] float 
  5960 ;; Auto vars:     Size  Location     Type
  5961 ;;		None
  5962 ;; Return value:  Size  Location     Type
  5963 ;;                  3   57[COMRAM] float 
  5964 ;; Registers used:
  5965 ;;		wreg, status,2, status,0, cstack
  5966 ;; Tracked objects:
  5967 ;;		On entry : 0/0
  5968 ;;		On exit  : 0/0
  5969 ;;		Unchanged: 0/0
  5970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5971 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5974 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5975 ;;Total ram usage:        6 bytes
  5976 ;; Hardware stack levels used:    1
  5977 ;; Hardware stack levels required when called:    2
  5978 ;; This function calls:
  5979 ;;		___ftadd
  5980 ;; This function is called by:
  5981 ;;		_printf
  5982 ;; This function uses a non-reentrant model
  5983 ;;
  5984                           
  5985                           	psect	text24
  5986  002ED6                     __ptext24:
  5987                           	opt stack 0
  5988  002ED6                     ___ftsub:
  5989                           	opt stack 27
  5990                           
  5991                           ;incstack = 0
  5992  002ED6  503D               	movf	___ftsub@f2,w,c
  5993  002ED8  103E               	iorwf	___ftsub@f2+1,w,c
  5994  002EDA  103F               	iorwf	___ftsub@f2+2,w,c
  5995  002EDC  B4D8               	btfsc	status,2,c
  5996  002EDE  D006               	goto	l2805
  5997  002EE0  0E00               	movlw	0
  5998  002EE2  1A3D               	xorwf	___ftsub@f2,f,c
  5999  002EE4  0E00               	movlw	0
  6000  002EE6  1A3E               	xorwf	___ftsub@f2+1,f,c
  6001  002EE8  0E80               	movlw	128
  6002  002EEA  1A3F               	xorwf	___ftsub@f2+2,f,c
  6003  002EEC                     l2805:
  6004  002EEC  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  6005  002EF0  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  6006  002EF4  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  6007  002EF8  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  6008  002EFC  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  6009  002F00  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  6010  002F04  ECF6  F00F         	call	___ftadd	;wreg free
  6011  002F08  C02E  F03A         	movff	?___ftadd,?___ftsub
  6012  002F0C  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  6013  002F10  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  6014  002F14  0012               	return	
  6015  002F16                     __end_of___ftsub:
  6016                           	opt stack 0
  6017                           tblptru	equ	0xFF8
  6018                           tblptrh	equ	0xFF7
  6019                           tblptrl	equ	0xFF6
  6020                           tablat	equ	0xFF5
  6021                           prodh	equ	0xFF4
  6022                           prodl	equ	0xFF3
  6023                           postinc0	equ	0xFEE
  6024                           wreg	equ	0xFE8
  6025                           postdec1	equ	0xFE5
  6026                           fsr1l	equ	0xFE1
  6027                           indf2	equ	0xFDF
  6028                           postinc2	equ	0xFDE
  6029                           postdec2	equ	0xFDD
  6030                           fsr2h	equ	0xFDA
  6031                           fsr2l	equ	0xFD9
  6032                           status	equ	0xFD8
  6033                           
  6034 ;; *************** function ___ftadd *****************
  6035 ;; Defined at:
  6036 ;;		line 86 in file "/opt/microchip/xc8/v1.42/sources/common/ftadd.c"
  6037 ;; Parameters:    Size  Location     Type
  6038 ;;  f1              3   45[COMRAM] float 
  6039 ;;  f2              3   48[COMRAM] float 
  6040 ;; Auto vars:     Size  Location     Type
  6041 ;;  exp1            1   56[COMRAM] unsigned char 
  6042 ;;  exp2            1   55[COMRAM] unsigned char 
  6043 ;;  sign            1   54[COMRAM] unsigned char 
  6044 ;; Return value:  Size  Location     Type
  6045 ;;                  3   45[COMRAM] float 
  6046 ;; Registers used:
  6047 ;;		wreg, status,2, status,0, cstack
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6053 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6054 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6055 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6056 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6057 ;;Total ram usage:       12 bytes
  6058 ;; Hardware stack levels used:    1
  6059 ;; Hardware stack levels required when called:    1
  6060 ;; This function calls:
  6061 ;;		___ftpack
  6062 ;; This function is called by:
  6063 ;;		_printf
  6064 ;;		___ftsub
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text25
  6069  001FEC                     __ptext25:
  6070                           	opt stack 0
  6071  001FEC                     ___ftadd:
  6072                           	opt stack 27
  6073                           
  6074                           ;incstack = 0
  6075  001FEC  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  6076  001FF0  6A35               	clrf	(??___ftadd+1)& (0+255),c
  6077  001FF2  6A36               	clrf	(??___ftadd+2)& (0+255),c
  6078  001FF4  342F               	rlcf	___ftadd@f1+1,w,c
  6079  001FF6  3634               	rlcf	??___ftadd& (0+255),f,c
  6080  001FF8  E301               	bnc	u2121
  6081  001FFA  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  6082  001FFC                     u2121:
  6083  001FFC  5034               	movf	??___ftadd,w,c
  6084  001FFE  6E39               	movwf	___ftadd@exp1,c
  6085  002000  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  6086  002004  6A35               	clrf	(??___ftadd+1)& (0+255),c
  6087  002006  6A36               	clrf	(??___ftadd+2)& (0+255),c
  6088  002008  3432               	rlcf	___ftadd@f2+1,w,c
  6089  00200A  3634               	rlcf	??___ftadd& (0+255),f,c
  6090  00200C  E301               	bnc	u2131
  6091  00200E  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  6092  002010                     u2131:
  6093  002010  5034               	movf	??___ftadd,w,c
  6094  002012  6E38               	movwf	___ftadd@exp2,c
  6095  002014  5039               	movf	___ftadd@exp1,w,c
  6096  002016  B4D8               	btfsc	status,2,c
  6097  002018  D00B               	goto	l649
  6098  00201A  5038               	movf	___ftadd@exp2,w,c
  6099  00201C  5C39               	subwf	___ftadd@exp1,w,c
  6100  00201E  B0D8               	btfsc	status,0,c
  6101  002020  D00E               	goto	l2419
  6102  002022  5039               	movf	___ftadd@exp1,w,c
  6103  002024  0800               	sublw	0
  6104  002026  2438               	addwf	___ftadd@exp2,w,c
  6105  002028  6E34               	movwf	??___ftadd& (0+255),c
  6106  00202A  0E18               	movlw	24
  6107  00202C  6434               	cpfsgt	??___ftadd,c
  6108  00202E  D007               	goto	l2419
  6109  002030                     l649:
  6110  002030  C031  F02E         	movff	___ftadd@f2,?___ftadd
  6111  002034  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  6112  002038  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  6113  00203C  0012               	return	
  6114  00203E                     l2419:
  6115  00203E  5038               	movf	___ftadd@exp2,w,c
  6116  002040  B4D8               	btfsc	status,2,c
  6117  002042  D00B               	goto	l653
  6118  002044  5039               	movf	___ftadd@exp1,w,c
  6119  002046  5C38               	subwf	___ftadd@exp2,w,c
  6120  002048  B0D8               	btfsc	status,0,c
  6121  00204A  D00E               	goto	l2425
  6122  00204C  5038               	movf	___ftadd@exp2,w,c
  6123  00204E  0800               	sublw	0
  6124  002050  2439               	addwf	___ftadd@exp1,w,c
  6125  002052  6E34               	movwf	??___ftadd& (0+255),c
  6126  002054  0E18               	movlw	24
  6127  002056  6434               	cpfsgt	??___ftadd,c
  6128  002058  D007               	goto	l2425
  6129  00205A                     l653:
  6130  00205A  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  6131  00205E  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  6132  002062  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  6133  002066  0012               	return	
  6134  002068                     l2425:
  6135  002068  0E06               	movlw	6
  6136  00206A  6E37               	movwf	___ftadd@sign,c
  6137  00206C  BE30               	btfsc	___ftadd@f1+2,7,c
  6138  00206E  8E37               	bsf	___ftadd@sign,7,c
  6139  002070  BE33               	btfsc	___ftadd@f2+2,7,c
  6140  002072  8C37               	bsf	___ftadd@sign,6,c
  6141  002074  8E2F               	bsf	___ftadd@f1+1,7,c
  6142  002076  0EFF               	movlw	255
  6143  002078  162E               	andwf	___ftadd@f1,f,c
  6144  00207A  0EFF               	movlw	255
  6145  00207C  162F               	andwf	___ftadd@f1+1,f,c
  6146  00207E  0E00               	movlw	0
  6147  002080  1630               	andwf	___ftadd@f1+2,f,c
  6148  002082  8E32               	bsf	___ftadd@f2+1,7,c
  6149  002084  0EFF               	movlw	255
  6150  002086  1631               	andwf	___ftadd@f2,f,c
  6151  002088  0EFF               	movlw	255
  6152  00208A  1632               	andwf	___ftadd@f2+1,f,c
  6153  00208C  0E00               	movlw	0
  6154  00208E  1633               	andwf	___ftadd@f2+2,f,c
  6155  002090  5038               	movf	___ftadd@exp2,w,c
  6156  002092  5C39               	subwf	___ftadd@exp1,w,c
  6157  002094  B0D8               	btfsc	status,0,c
  6158  002096  D01B               	goto	l2451
  6159  002098                     l2441:
  6160  002098  90D8               	bcf	status,0,c
  6161  00209A  3631               	rlcf	___ftadd@f2,f,c
  6162  00209C  3632               	rlcf	___ftadd@f2+1,f,c
  6163  00209E  3633               	rlcf	___ftadd@f2+2,f,c
  6164  0020A0  0638               	decf	___ftadd@exp2,f,c
  6165  0020A2  5039               	movf	___ftadd@exp1,w,c
  6166  0020A4  1838               	xorwf	___ftadd@exp2,w,c
  6167  0020A6  B4D8               	btfsc	status,2,c
  6168  0020A8  D00D               	goto	l2449
  6169  0020AA  0637               	decf	___ftadd@sign,f,c
  6170  0020AC  C037  F034         	movff	___ftadd@sign,??___ftadd
  6171  0020B0  0E07               	movlw	7
  6172  0020B2  1634               	andwf	??___ftadd,f,c
  6173  0020B4  B4D8               	btfsc	status,2,c
  6174  0020B6  D006               	goto	l2449
  6175  0020B8  D7EF               	goto	l2441
  6176  0020BA                     l2447:
  6177  0020BA  90D8               	bcf	status,0,c
  6178  0020BC  3230               	rrcf	___ftadd@f1+2,f,c
  6179  0020BE  322F               	rrcf	___ftadd@f1+1,f,c
  6180  0020C0  322E               	rrcf	___ftadd@f1,f,c
  6181  0020C2  2A39               	incf	___ftadd@exp1,f,c
  6182  0020C4                     l2449:
  6183  0020C4  5038               	movf	___ftadd@exp2,w,c
  6184  0020C6  1839               	xorwf	___ftadd@exp1,w,c
  6185  0020C8  B4D8               	btfsc	status,2,c
  6186  0020CA  D01F               	goto	l664
  6187  0020CC  D7F6               	goto	l2447
  6188  0020CE                     l2451:
  6189  0020CE  5039               	movf	___ftadd@exp1,w,c
  6190  0020D0  5C38               	subwf	___ftadd@exp2,w,c
  6191  0020D2  B0D8               	btfsc	status,0,c
  6192  0020D4  D01A               	goto	l664
  6193  0020D6                     l2453:
  6194  0020D6  90D8               	bcf	status,0,c
  6195  0020D8  362E               	rlcf	___ftadd@f1,f,c
  6196  0020DA  362F               	rlcf	___ftadd@f1+1,f,c
  6197  0020DC  3630               	rlcf	___ftadd@f1+2,f,c
  6198  0020DE  0639               	decf	___ftadd@exp1,f,c
  6199  0020E0  5039               	movf	___ftadd@exp1,w,c
  6200  0020E2  1838               	xorwf	___ftadd@exp2,w,c
  6201  0020E4  B4D8               	btfsc	status,2,c
  6202  0020E6  D00D               	goto	l2461
  6203  0020E8  0637               	decf	___ftadd@sign,f,c
  6204  0020EA  C037  F034         	movff	___ftadd@sign,??___ftadd
  6205  0020EE  0E07               	movlw	7
  6206  0020F0  1634               	andwf	??___ftadd,f,c
  6207  0020F2  B4D8               	btfsc	status,2,c
  6208  0020F4  D006               	goto	l2461
  6209  0020F6  D7EF               	goto	l2453
  6210  0020F8                     l2459:
  6211  0020F8  90D8               	bcf	status,0,c
  6212  0020FA  3233               	rrcf	___ftadd@f2+2,f,c
  6213  0020FC  3232               	rrcf	___ftadd@f2+1,f,c
  6214  0020FE  3231               	rrcf	___ftadd@f2,f,c
  6215  002100  2A38               	incf	___ftadd@exp2,f,c
  6216  002102                     l2461:
  6217  002102  5038               	movf	___ftadd@exp2,w,c
  6218  002104  1839               	xorwf	___ftadd@exp1,w,c
  6219  002106  A4D8               	btfss	status,2,c
  6220  002108  D7F7               	goto	l2459
  6221  00210A                     l664:
  6222  00210A  AE37               	btfss	___ftadd@sign,7,c
  6223  00210C  D00C               	goto	l673
  6224  00210E  0EFF               	movlw	255
  6225  002110  1A2E               	xorwf	___ftadd@f1,f,c
  6226  002112  0EFF               	movlw	255
  6227  002114  1A2F               	xorwf	___ftadd@f1+1,f,c
  6228  002116  0EFF               	movlw	255
  6229  002118  1A30               	xorwf	___ftadd@f1+2,f,c
  6230  00211A  0E01               	movlw	1
  6231  00211C  262E               	addwf	___ftadd@f1,f,c
  6232  00211E  0E00               	movlw	0
  6233  002120  222F               	addwfc	___ftadd@f1+1,f,c
  6234  002122  0E00               	movlw	0
  6235  002124  2230               	addwfc	___ftadd@f1+2,f,c
  6236  002126                     l673:
  6237  002126  AC37               	btfss	___ftadd@sign,6,c
  6238  002128  D00C               	goto	l2467
  6239  00212A  0EFF               	movlw	255
  6240  00212C  1A31               	xorwf	___ftadd@f2,f,c
  6241  00212E  0EFF               	movlw	255
  6242  002130  1A32               	xorwf	___ftadd@f2+1,f,c
  6243  002132  0EFF               	movlw	255
  6244  002134  1A33               	xorwf	___ftadd@f2+2,f,c
  6245  002136  0E01               	movlw	1
  6246  002138  2631               	addwf	___ftadd@f2,f,c
  6247  00213A  0E00               	movlw	0
  6248  00213C  2232               	addwfc	___ftadd@f2+1,f,c
  6249  00213E  0E00               	movlw	0
  6250  002140  2233               	addwfc	___ftadd@f2+2,f,c
  6251  002142                     l2467:
  6252  002142  0E00               	movlw	0
  6253  002144  6E37               	movwf	___ftadd@sign,c
  6254  002146  502E               	movf	___ftadd@f1,w,c
  6255  002148  2631               	addwf	___ftadd@f2,f,c
  6256  00214A  502F               	movf	___ftadd@f1+1,w,c
  6257  00214C  2232               	addwfc	___ftadd@f2+1,f,c
  6258  00214E  5030               	movf	___ftadd@f1+2,w,c
  6259  002150  2233               	addwfc	___ftadd@f2+2,f,c
  6260  002152  AE33               	btfss	___ftadd@f2+2,7,c
  6261  002154  D00E               	goto	l2477
  6262  002156  0EFF               	movlw	255
  6263  002158  1A31               	xorwf	___ftadd@f2,f,c
  6264  00215A  0EFF               	movlw	255
  6265  00215C  1A32               	xorwf	___ftadd@f2+1,f,c
  6266  00215E  0EFF               	movlw	255
  6267  002160  1A33               	xorwf	___ftadd@f2+2,f,c
  6268  002162  0E01               	movlw	1
  6269  002164  2631               	addwf	___ftadd@f2,f,c
  6270  002166  0E00               	movlw	0
  6271  002168  2232               	addwfc	___ftadd@f2+1,f,c
  6272  00216A  0E00               	movlw	0
  6273  00216C  2233               	addwfc	___ftadd@f2+2,f,c
  6274  00216E  0E01               	movlw	1
  6275  002170  6E37               	movwf	___ftadd@sign,c
  6276  002172                     l2477:
  6277  002172  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  6278  002176  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6279  00217A  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6280  00217E  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  6281  002182  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  6282  002186  EC2F  F014         	call	___ftpack	;wreg free
  6283  00218A  C001  F02E         	movff	?___ftpack,?___ftadd
  6284  00218E  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  6285  002192  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  6286  002196  0012               	return	
  6287  002198                     __end_of___ftadd:
  6288                           	opt stack 0
  6289                           tblptru	equ	0xFF8
  6290                           tblptrh	equ	0xFF7
  6291                           tblptrl	equ	0xFF6
  6292                           tablat	equ	0xFF5
  6293                           prodh	equ	0xFF4
  6294                           prodl	equ	0xFF3
  6295                           postinc0	equ	0xFEE
  6296                           wreg	equ	0xFE8
  6297                           postdec1	equ	0xFE5
  6298                           fsr1l	equ	0xFE1
  6299                           indf2	equ	0xFDF
  6300                           postinc2	equ	0xFDE
  6301                           postdec2	equ	0xFDD
  6302                           fsr2h	equ	0xFDA
  6303                           fsr2l	equ	0xFD9
  6304                           status	equ	0xFD8
  6305                           
  6306 ;; *************** function ___ftneg *****************
  6307 ;; Defined at:
  6308 ;;		line 15 in file "/opt/microchip/xc8/v1.42/sources/common/ftneg.c"
  6309 ;; Parameters:    Size  Location     Type
  6310 ;;  f1              3    0[COMRAM] float 
  6311 ;; Auto vars:     Size  Location     Type
  6312 ;;		None
  6313 ;; Return value:  Size  Location     Type
  6314 ;;                  3    0[COMRAM] float 
  6315 ;; Registers used:
  6316 ;;		wreg, status,2, status,0
  6317 ;; Tracked objects:
  6318 ;;		On entry : 0/0
  6319 ;;		On exit  : 0/0
  6320 ;;		Unchanged: 0/0
  6321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6322 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6325 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6326 ;;Total ram usage:        3 bytes
  6327 ;; Hardware stack levels used:    1
  6328 ;; This function calls:
  6329 ;;		Nothing
  6330 ;; This function is called by:
  6331 ;;		_printf
  6332 ;; This function uses a non-reentrant model
  6333 ;;
  6334                           
  6335                           	psect	text26
  6336  002FFA                     __ptext26:
  6337                           	opt stack 0
  6338  002FFA                     ___ftneg:
  6339                           	opt stack 29
  6340                           
  6341                           ;incstack = 0
  6342  002FFA  5001               	movf	___ftneg@f1,w,c
  6343  002FFC  1002               	iorwf	___ftneg@f1+1,w,c
  6344  002FFE  1003               	iorwf	___ftneg@f1+2,w,c
  6345  003000  B4D8               	btfsc	status,2,c
  6346  003002  D006               	goto	l723
  6347  003004  0E00               	movlw	0
  6348  003006  1A01               	xorwf	___ftneg@f1,f,c
  6349  003008  0E00               	movlw	0
  6350  00300A  1A02               	xorwf	___ftneg@f1+1,f,c
  6351  00300C  0E80               	movlw	128
  6352  00300E  1A03               	xorwf	___ftneg@f1+2,f,c
  6353  003010                     l723:
  6354  003010  C001  F001         	movff	___ftneg@f1,?___ftneg
  6355  003014  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  6356  003018  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  6357  00301C  0012               	return		;funcret
  6358  00301E                     __end_of___ftneg:
  6359                           	opt stack 0
  6360                           tblptru	equ	0xFF8
  6361                           tblptrh	equ	0xFF7
  6362                           tblptrl	equ	0xFF6
  6363                           tablat	equ	0xFF5
  6364                           prodh	equ	0xFF4
  6365                           prodl	equ	0xFF3
  6366                           postinc0	equ	0xFEE
  6367                           wreg	equ	0xFE8
  6368                           postdec1	equ	0xFE5
  6369                           fsr1l	equ	0xFE1
  6370                           indf2	equ	0xFDF
  6371                           postinc2	equ	0xFDE
  6372                           postdec2	equ	0xFDD
  6373                           fsr2h	equ	0xFDA
  6374                           fsr2l	equ	0xFD9
  6375                           status	equ	0xFD8
  6376                           
  6377 ;; *************** function ___ftge *****************
  6378 ;; Defined at:
  6379 ;;		line 4 in file "/opt/microchip/xc8/v1.42/sources/common/ftge.c"
  6380 ;; Parameters:    Size  Location     Type
  6381 ;;  ff1             3    0[COMRAM] float 
  6382 ;;  ff2             3    3[COMRAM] float 
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;		None
  6385 ;; Return value:  Size  Location     Type
  6386 ;;		None               void
  6387 ;; Registers used:
  6388 ;;		wreg, status,2, status,0
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6394 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6396 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6397 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6398 ;;Total ram usage:        9 bytes
  6399 ;; Hardware stack levels used:    1
  6400 ;; This function calls:
  6401 ;;		Nothing
  6402 ;; This function is called by:
  6403 ;;		_printf
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407                           	psect	text27
  6408  0029B0                     __ptext27:
  6409                           	opt stack 0
  6410  0029B0                     ___ftge:
  6411                           	opt stack 29
  6412                           
  6413                           ;incstack = 0
  6414  0029B0  AE03               	btfss	___ftge@ff1+2,7,c
  6415  0029B2  D016               	goto	l2813
  6416  0029B4  C001  F007         	movff	___ftge@ff1,??___ftge
  6417  0029B8  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  6418  0029BC  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  6419  0029C0  1E07               	comf	??___ftge,f,c
  6420  0029C2  1E08               	comf	??___ftge+1,f,c
  6421  0029C4  1E09               	comf	??___ftge+2,f,c
  6422  0029C6  2A07               	incf	??___ftge,f,c
  6423  0029C8  0E00               	movlw	0
  6424  0029CA  2208               	addwfc	??___ftge+1,f,c
  6425  0029CC  2209               	addwfc	??___ftge+2,f,c
  6426  0029CE  0E00               	movlw	0
  6427  0029D0  2407               	addwf	??___ftge,w,c
  6428  0029D2  6E01               	movwf	___ftge@ff1,c
  6429  0029D4  0E00               	movlw	0
  6430  0029D6  2008               	addwfc	??___ftge+1,w,c
  6431  0029D8  6E02               	movwf	___ftge@ff1+1,c
  6432  0029DA  0E80               	movlw	128
  6433  0029DC  2009               	addwfc	??___ftge+2,w,c
  6434  0029DE  6E03               	movwf	___ftge@ff1+2,c
  6435  0029E0                     l2813:
  6436  0029E0  AE06               	btfss	___ftge@ff2+2,7,c
  6437  0029E2  D016               	goto	l2817
  6438  0029E4  C004  F007         	movff	___ftge@ff2,??___ftge
  6439  0029E8  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  6440  0029EC  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  6441  0029F0  1E07               	comf	??___ftge,f,c
  6442  0029F2  1E08               	comf	??___ftge+1,f,c
  6443  0029F4  1E09               	comf	??___ftge+2,f,c
  6444  0029F6  2A07               	incf	??___ftge,f,c
  6445  0029F8  0E00               	movlw	0
  6446  0029FA  2208               	addwfc	??___ftge+1,f,c
  6447  0029FC  2209               	addwfc	??___ftge+2,f,c
  6448  0029FE  0E00               	movlw	0
  6449  002A00  2407               	addwf	??___ftge,w,c
  6450  002A02  6E04               	movwf	___ftge@ff2,c
  6451  002A04  0E00               	movlw	0
  6452  002A06  2008               	addwfc	??___ftge+1,w,c
  6453  002A08  6E05               	movwf	___ftge@ff2+1,c
  6454  002A0A  0E80               	movlw	128
  6455  002A0C  2009               	addwfc	??___ftge+2,w,c
  6456  002A0E  6E06               	movwf	___ftge@ff2+2,c
  6457  002A10                     l2817:
  6458  002A10  0E00               	movlw	0
  6459  002A12  1A01               	xorwf	___ftge@ff1,f,c
  6460  002A14  0E00               	movlw	0
  6461  002A16  1A02               	xorwf	___ftge@ff1+1,f,c
  6462  002A18  0E80               	movlw	128
  6463  002A1A  1A03               	xorwf	___ftge@ff1+2,f,c
  6464  002A1C  0E00               	movlw	0
  6465  002A1E  1A04               	xorwf	___ftge@ff2,f,c
  6466  002A20  0E00               	movlw	0
  6467  002A22  1A05               	xorwf	___ftge@ff2+1,f,c
  6468  002A24  0E80               	movlw	128
  6469  002A26  1A06               	xorwf	___ftge@ff2+2,f,c
  6470  002A28  5004               	movf	___ftge@ff2,w,c
  6471  002A2A  5C01               	subwf	___ftge@ff1,w,c
  6472  002A2C  5005               	movf	___ftge@ff2+1,w,c
  6473  002A2E  5802               	subwfb	___ftge@ff1+1,w,c
  6474  002A30  5006               	movf	___ftge@ff2+2,w,c
  6475  002A32  5803               	subwfb	___ftge@ff1+2,w,c
  6476  002A34  B0D8               	btfsc	status,0,c
  6477  002A36  D002               	goto	l2823
  6478  002A38  90D8               	bcf	status,0,c
  6479  002A3A  0012               	return	
  6480  002A3C                     l2823:
  6481  002A3C  80D8               	bsf	status,0,c
  6482  002A3E  0012               	return	
  6483  002A40                     __end_of___ftge:
  6484                           	opt stack 0
  6485                           tblptru	equ	0xFF8
  6486                           tblptrh	equ	0xFF7
  6487                           tblptrl	equ	0xFF6
  6488                           tablat	equ	0xFF5
  6489                           prodh	equ	0xFF4
  6490                           prodl	equ	0xFF3
  6491                           postinc0	equ	0xFEE
  6492                           wreg	equ	0xFE8
  6493                           postdec1	equ	0xFE5
  6494                           fsr1l	equ	0xFE1
  6495                           indf2	equ	0xFDF
  6496                           postinc2	equ	0xFDE
  6497                           postdec2	equ	0xFDD
  6498                           fsr2h	equ	0xFDA
  6499                           fsr2l	equ	0xFD9
  6500                           status	equ	0xFD8
  6501                           
  6502 ;; *************** function ___lwtoft *****************
  6503 ;; Defined at:
  6504 ;;		line 28 in file "/opt/microchip/xc8/v1.42/sources/common/lwtoft.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;  c               2    8[COMRAM] unsigned int 
  6507 ;; Auto vars:     Size  Location     Type
  6508 ;;		None
  6509 ;; Return value:  Size  Location     Type
  6510 ;;                  3    8[COMRAM] float 
  6511 ;; Registers used:
  6512 ;;		wreg, status,2, status,0, cstack
  6513 ;; Tracked objects:
  6514 ;;		On entry : 0/0
  6515 ;;		On exit  : 0/0
  6516 ;;		Unchanged: 0/0
  6517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6518 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6521 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6522 ;;Total ram usage:        3 bytes
  6523 ;; Hardware stack levels used:    1
  6524 ;; Hardware stack levels required when called:    1
  6525 ;; This function calls:
  6526 ;;		___ftpack
  6527 ;; This function is called by:
  6528 ;;		_do_voltage
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           	psect	text28
  6533  00301E                     __ptext28:
  6534                           	opt stack 0
  6535  00301E                     ___lwtoft:
  6536                           	opt stack 28
  6537                           
  6538                           ;incstack = 0
  6539  00301E  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  6540  003022  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  6541  003026  6A03               	clrf	___ftpack@arg+2,c
  6542  003028  0E8E               	movlw	142
  6543  00302A  6E04               	movwf	___ftpack@exp,c
  6544  00302C  0E00               	movlw	0
  6545  00302E  6E05               	movwf	___ftpack@sign,c
  6546  003030  EC2F  F014         	call	___ftpack	;wreg free
  6547  003034  C001  F009         	movff	?___ftpack,?___lwtoft
  6548  003038  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  6549  00303C  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  6550  003040  0012               	return	
  6551  003042                     __end_of___lwtoft:
  6552                           	opt stack 0
  6553                           tblptru	equ	0xFF8
  6554                           tblptrh	equ	0xFF7
  6555                           tblptrl	equ	0xFF6
  6556                           tablat	equ	0xFF5
  6557                           prodh	equ	0xFF4
  6558                           prodl	equ	0xFF3
  6559                           postinc0	equ	0xFEE
  6560                           wreg	equ	0xFE8
  6561                           postdec1	equ	0xFE5
  6562                           fsr1l	equ	0xFE1
  6563                           indf2	equ	0xFDF
  6564                           postinc2	equ	0xFDE
  6565                           postdec2	equ	0xFDD
  6566                           fsr2h	equ	0xFDA
  6567                           fsr2l	equ	0xFD9
  6568                           status	equ	0xFD8
  6569                           
  6570 ;; *************** function ___ftdiv *****************
  6571 ;; Defined at:
  6572 ;;		line 54 in file "/opt/microchip/xc8/v1.42/sources/common/ftdiv.c"
  6573 ;; Parameters:    Size  Location     Type
  6574 ;;  f1              3   35[COMRAM] float 
  6575 ;;  f2              3   38[COMRAM] float 
  6576 ;; Auto vars:     Size  Location     Type
  6577 ;;  f3              3   45[COMRAM] float 
  6578 ;;  sign            1   49[COMRAM] unsigned char 
  6579 ;;  exp             1   48[COMRAM] unsigned char 
  6580 ;;  cntr            1   44[COMRAM] unsigned char 
  6581 ;; Return value:  Size  Location     Type
  6582 ;;                  3   35[COMRAM] float 
  6583 ;; Registers used:
  6584 ;;		wreg, status,2, status,0, cstack
  6585 ;; Tracked objects:
  6586 ;;		On entry : 0/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6590 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6591 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6592 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6593 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6594 ;;Total ram usage:       15 bytes
  6595 ;; Hardware stack levels used:    1
  6596 ;; Hardware stack levels required when called:    1
  6597 ;; This function calls:
  6598 ;;		___ftpack
  6599 ;; This function is called by:
  6600 ;;		_do_voltage
  6601 ;; This function uses a non-reentrant model
  6602 ;;
  6603                           
  6604                           	psect	text29
  6605  0025DA                     __ptext29:
  6606                           	opt stack 0
  6607  0025DA                     ___ftdiv:
  6608                           	opt stack 28
  6609                           
  6610                           ;incstack = 0
  6611  0025DA  C026  F02A         	movff	___ftdiv@f1+2,??___ftdiv
  6612  0025DE  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  6613  0025E0  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  6614  0025E2  3425               	rlcf	___ftdiv@f1+1,w,c
  6615  0025E4  362A               	rlcf	??___ftdiv& (0+255),f,c
  6616  0025E6  E301               	bnc	u3631
  6617  0025E8  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  6618  0025EA                     u3631:
  6619  0025EA  502A               	movf	??___ftdiv,w,c
  6620  0025EC  6E31               	movwf	___ftdiv@exp,c
  6621  0025EE  5031               	movf	___ftdiv@exp,w,c
  6622  0025F0  A4D8               	btfss	status,2,c
  6623  0025F2  D007               	goto	l3301
  6624  0025F4  0E00               	movlw	0
  6625  0025F6  6E24               	movwf	?___ftdiv,c
  6626  0025F8  0E00               	movlw	0
  6627  0025FA  6E25               	movwf	?___ftdiv+1,c
  6628  0025FC  0E00               	movlw	0
  6629  0025FE  6E26               	movwf	?___ftdiv+2,c
  6630  002600  0012               	return	
  6631  002602                     l3301:
  6632  002602  C029  F02A         	movff	___ftdiv@f2+2,??___ftdiv
  6633  002606  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  6634  002608  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  6635  00260A  3428               	rlcf	___ftdiv@f2+1,w,c
  6636  00260C  362A               	rlcf	??___ftdiv& (0+255),f,c
  6637  00260E  E301               	bnc	u3651
  6638  002610  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  6639  002612                     u3651:
  6640  002612  502A               	movf	??___ftdiv,w,c
  6641  002614  6E32               	movwf	___ftdiv@sign,c
  6642  002616  5032               	movf	___ftdiv@sign,w,c
  6643  002618  A4D8               	btfss	status,2,c
  6644  00261A  D007               	goto	l3307
  6645  00261C  0E00               	movlw	0
  6646  00261E  6E24               	movwf	?___ftdiv,c
  6647  002620  0E00               	movlw	0
  6648  002622  6E25               	movwf	?___ftdiv+1,c
  6649  002624  0E00               	movlw	0
  6650  002626  6E26               	movwf	?___ftdiv+2,c
  6651  002628  0012               	return	
  6652  00262A                     l3307:
  6653  00262A  0E00               	movlw	0
  6654  00262C  6E2E               	movwf	___ftdiv@f3,c
  6655  00262E  0E00               	movlw	0
  6656  002630  6E2F               	movwf	___ftdiv@f3+1,c
  6657  002632  0E00               	movlw	0
  6658  002634  6E30               	movwf	___ftdiv@f3+2,c
  6659  002636  5032               	movf	___ftdiv@sign,w,c
  6660  002638  0F89               	addlw	137
  6661  00263A  5E31               	subwf	___ftdiv@exp,f,c
  6662  00263C  C026  F032         	movff	___ftdiv@f1+2,___ftdiv@sign
  6663  002640  5029               	movf	___ftdiv@f2+2,w,c
  6664  002642  1A32               	xorwf	___ftdiv@sign,f,c
  6665  002644  0E80               	movlw	128
  6666  002646  1632               	andwf	___ftdiv@sign,f,c
  6667  002648  8E25               	bsf	___ftdiv@f1+1,7,c
  6668  00264A  0EFF               	movlw	255
  6669  00264C  1624               	andwf	___ftdiv@f1,f,c
  6670  00264E  0EFF               	movlw	255
  6671  002650  1625               	andwf	___ftdiv@f1+1,f,c
  6672  002652  0E00               	movlw	0
  6673  002654  1626               	andwf	___ftdiv@f1+2,f,c
  6674  002656  8E28               	bsf	___ftdiv@f2+1,7,c
  6675  002658  0EFF               	movlw	255
  6676  00265A  1627               	andwf	___ftdiv@f2,f,c
  6677  00265C  0EFF               	movlw	255
  6678  00265E  1628               	andwf	___ftdiv@f2+1,f,c
  6679  002660  0E00               	movlw	0
  6680  002662  1629               	andwf	___ftdiv@f2+2,f,c
  6681  002664  0E18               	movlw	24
  6682  002666  6E2D               	movwf	___ftdiv@cntr,c
  6683  002668                     l3327:
  6684  002668  90D8               	bcf	status,0,c
  6685  00266A  362E               	rlcf	___ftdiv@f3,f,c
  6686  00266C  362F               	rlcf	___ftdiv@f3+1,f,c
  6687  00266E  3630               	rlcf	___ftdiv@f3+2,f,c
  6688  002670  5027               	movf	___ftdiv@f2,w,c
  6689  002672  5C24               	subwf	___ftdiv@f1,w,c
  6690  002674  5028               	movf	___ftdiv@f2+1,w,c
  6691  002676  5825               	subwfb	___ftdiv@f1+1,w,c
  6692  002678  5029               	movf	___ftdiv@f2+2,w,c
  6693  00267A  5826               	subwfb	___ftdiv@f1+2,w,c
  6694  00267C  A0D8               	btfss	status,0,c
  6695  00267E  D007               	goto	l684
  6696  002680  5027               	movf	___ftdiv@f2,w,c
  6697  002682  5E24               	subwf	___ftdiv@f1,f,c
  6698  002684  5028               	movf	___ftdiv@f2+1,w,c
  6699  002686  5A25               	subwfb	___ftdiv@f1+1,f,c
  6700  002688  5029               	movf	___ftdiv@f2+2,w,c
  6701  00268A  5A26               	subwfb	___ftdiv@f1+2,f,c
  6702  00268C  802E               	bsf	___ftdiv@f3,0,c
  6703  00268E                     l684:
  6704  00268E  90D8               	bcf	status,0,c
  6705  002690  3624               	rlcf	___ftdiv@f1,f,c
  6706  002692  3625               	rlcf	___ftdiv@f1+1,f,c
  6707  002694  3626               	rlcf	___ftdiv@f1+2,f,c
  6708  002696  2E2D               	decfsz	___ftdiv@cntr,f,c
  6709  002698  D7E7               	goto	l3327
  6710  00269A  C02E  F001         	movff	___ftdiv@f3,___ftpack@arg
  6711  00269E  C02F  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6712  0026A2  C030  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6713  0026A6  C031  F004         	movff	___ftdiv@exp,___ftpack@exp
  6714  0026AA  C032  F005         	movff	___ftdiv@sign,___ftpack@sign
  6715  0026AE  EC2F  F014         	call	___ftpack	;wreg free
  6716  0026B2  C001  F024         	movff	?___ftpack,?___ftdiv
  6717  0026B6  C002  F025         	movff	?___ftpack+1,?___ftdiv+1
  6718  0026BA  C003  F026         	movff	?___ftpack+2,?___ftdiv+2
  6719  0026BE  0012               	return	
  6720  0026C0                     __end_of___ftdiv:
  6721                           	opt stack 0
  6722                           tblptru	equ	0xFF8
  6723                           tblptrh	equ	0xFF7
  6724                           tblptrl	equ	0xFF6
  6725                           tablat	equ	0xFF5
  6726                           prodh	equ	0xFF4
  6727                           prodl	equ	0xFF3
  6728                           postinc0	equ	0xFEE
  6729                           wreg	equ	0xFE8
  6730                           postdec1	equ	0xFE5
  6731                           fsr1l	equ	0xFE1
  6732                           indf2	equ	0xFDF
  6733                           postinc2	equ	0xFDE
  6734                           postdec2	equ	0xFDD
  6735                           fsr2h	equ	0xFDA
  6736                           fsr2l	equ	0xFD9
  6737                           status	equ	0xFD8
  6738                           
  6739 ;; *************** function ___ftpack *****************
  6740 ;; Defined at:
  6741 ;;		line 62 in file "/opt/microchip/xc8/v1.42/sources/common/float.c"
  6742 ;; Parameters:    Size  Location     Type
  6743 ;;  arg             3    0[COMRAM] unsigned um
  6744 ;;  exp             1    3[COMRAM] unsigned char 
  6745 ;;  sign            1    4[COMRAM] unsigned char 
  6746 ;; Auto vars:     Size  Location     Type
  6747 ;;		None
  6748 ;; Return value:  Size  Location     Type
  6749 ;;                  3    0[COMRAM] float 
  6750 ;; Registers used:
  6751 ;;		wreg, status,2, status,0
  6752 ;; Tracked objects:
  6753 ;;		On entry : 0/0
  6754 ;;		On exit  : 0/0
  6755 ;;		Unchanged: 0/0
  6756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6757 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6759 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6760 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6761 ;;Total ram usage:        8 bytes
  6762 ;; Hardware stack levels used:    1
  6763 ;; This function calls:
  6764 ;;		Nothing
  6765 ;; This function is called by:
  6766 ;;		___ftadd
  6767 ;;		___ftdiv
  6768 ;;		___ftmul
  6769 ;;		___lltoft
  6770 ;;		___lwtoft
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           	psect	text30
  6775  00285E                     __ptext30:
  6776                           	opt stack 0
  6777  00285E                     ___ftpack:
  6778                           	opt stack 27
  6779                           
  6780                           ;incstack = 0
  6781  00285E  5004               	movf	___ftpack@exp,w,c
  6782  002860  B4D8               	btfsc	status,2,c
  6783  002862  D005               	goto	l2373
  6784  002864  5001               	movf	___ftpack@arg,w,c
  6785  002866  1002               	iorwf	___ftpack@arg+1,w,c
  6786  002868  1003               	iorwf	___ftpack@arg+2,w,c
  6787  00286A  A4D8               	btfss	status,2,c
  6788  00286C  D00C               	goto	l2379
  6789  00286E                     l2373:
  6790  00286E  0E00               	movlw	0
  6791  002870  6E01               	movwf	?___ftpack,c
  6792  002872  0E00               	movlw	0
  6793  002874  6E02               	movwf	?___ftpack+1,c
  6794  002876  0E00               	movlw	0
  6795  002878  6E03               	movwf	?___ftpack+2,c
  6796  00287A  0012               	return	
  6797  00287C                     l2377:
  6798  00287C  2A04               	incf	___ftpack@exp,f,c
  6799  00287E  90D8               	bcf	status,0,c
  6800  002880  3203               	rrcf	___ftpack@arg+2,f,c
  6801  002882  3202               	rrcf	___ftpack@arg+1,f,c
  6802  002884  3201               	rrcf	___ftpack@arg,f,c
  6803  002886                     l2379:
  6804  002886  0E00               	movlw	0
  6805  002888  1401               	andwf	___ftpack@arg,w,c
  6806  00288A  6E06               	movwf	??___ftpack& (0+255),c
  6807  00288C  0E00               	movlw	0
  6808  00288E  1402               	andwf	___ftpack@arg+1,w,c
  6809  002890  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6810  002892  0EFE               	movlw	254
  6811  002894  1403               	andwf	___ftpack@arg+2,w,c
  6812  002896  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6813  002898  5006               	movf	??___ftpack,w,c
  6814  00289A  1007               	iorwf	??___ftpack+1,w,c
  6815  00289C  1008               	iorwf	??___ftpack+2,w,c
  6816  00289E  B4D8               	btfsc	status,2,c
  6817  0028A0  D00C               	goto	l2385
  6818  0028A2  D7EC               	goto	l2377
  6819  0028A4                     l2381:
  6820  0028A4  2A04               	incf	___ftpack@exp,f,c
  6821  0028A6  0E01               	movlw	1
  6822  0028A8  2601               	addwf	___ftpack@arg,f,c
  6823  0028AA  0E00               	movlw	0
  6824  0028AC  2202               	addwfc	___ftpack@arg+1,f,c
  6825  0028AE  0E00               	movlw	0
  6826  0028B0  2203               	addwfc	___ftpack@arg+2,f,c
  6827  0028B2  90D8               	bcf	status,0,c
  6828  0028B4  3203               	rrcf	___ftpack@arg+2,f,c
  6829  0028B6  3202               	rrcf	___ftpack@arg+1,f,c
  6830  0028B8  3201               	rrcf	___ftpack@arg,f,c
  6831  0028BA                     l2385:
  6832  0028BA  0E00               	movlw	0
  6833  0028BC  1401               	andwf	___ftpack@arg,w,c
  6834  0028BE  6E06               	movwf	??___ftpack& (0+255),c
  6835  0028C0  0E00               	movlw	0
  6836  0028C2  1402               	andwf	___ftpack@arg+1,w,c
  6837  0028C4  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6838  0028C6  0EFF               	movlw	255
  6839  0028C8  1403               	andwf	___ftpack@arg+2,w,c
  6840  0028CA  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6841  0028CC  5006               	movf	??___ftpack,w,c
  6842  0028CE  1007               	iorwf	??___ftpack+1,w,c
  6843  0028D0  1008               	iorwf	??___ftpack+2,w,c
  6844  0028D2  B4D8               	btfsc	status,2,c
  6845  0028D4  D006               	goto	l2389
  6846  0028D6  D7E6               	goto	l2381
  6847  0028D8                     l2387:
  6848  0028D8  0604               	decf	___ftpack@exp,f,c
  6849  0028DA  90D8               	bcf	status,0,c
  6850  0028DC  3601               	rlcf	___ftpack@arg,f,c
  6851  0028DE  3602               	rlcf	___ftpack@arg+1,f,c
  6852  0028E0  3603               	rlcf	___ftpack@arg+2,f,c
  6853  0028E2                     l2389:
  6854  0028E2  BE02               	btfsc	___ftpack@arg+1,7,c
  6855  0028E4  D003               	goto	l626
  6856  0028E6  0E02               	movlw	2
  6857  0028E8  6004               	cpfslt	___ftpack@exp,c
  6858  0028EA  D7F6               	goto	l2387
  6859  0028EC                     l626:
  6860  0028EC  A004               	btfss	___ftpack@exp,0,c
  6861  0028EE  9E02               	bcf	___ftpack@arg+1,7,c
  6862  0028F0  90D8               	bcf	status,0,c
  6863  0028F2  3204               	rrcf	___ftpack@exp,f,c
  6864  0028F4  5004               	movf	___ftpack@exp,w,c
  6865  0028F6  1203               	iorwf	___ftpack@arg+2,f,c
  6866  0028F8  5005               	movf	___ftpack@sign,w,c
  6867  0028FA  A4D8               	btfss	status,2,c
  6868  0028FC  8E03               	bsf	___ftpack@arg+2,7,c
  6869  0028FE  C001  F001         	movff	___ftpack@arg,?___ftpack
  6870  002902  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6871  002906  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6872  00290A  0012               	return	
  6873  00290C                     __end_of___ftpack:
  6874                           	opt stack 0
  6875                           tblptru	equ	0xFF8
  6876                           tblptrh	equ	0xFF7
  6877                           tblptrl	equ	0xFF6
  6878                           tablat	equ	0xFF5
  6879                           prodh	equ	0xFF4
  6880                           prodl	equ	0xFF3
  6881                           postinc0	equ	0xFEE
  6882                           wreg	equ	0xFE8
  6883                           postdec1	equ	0xFE5
  6884                           fsr1l	equ	0xFE1
  6885                           indf2	equ	0xFDF
  6886                           postinc2	equ	0xFDE
  6887                           postdec2	equ	0xFDD
  6888                           fsr2h	equ	0xFDA
  6889                           fsr2l	equ	0xFD9
  6890                           status	equ	0xFD8
  6891                           
  6892 ;; *************** function _ADCRead *****************
  6893 ;; Defined at:
  6894 ;;		line 187 in file "main.c"
  6895 ;; Parameters:    Size  Location     Type
  6896 ;;  ch              1    wreg     unsigned char 
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;  ch              1    2[COMRAM] unsigned char 
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  2    0[COMRAM] unsigned int 
  6901 ;; Registers used:
  6902 ;;		wreg, status,2, status,0
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6908 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6909 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6911 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6912 ;;Total ram usage:        3 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; This function calls:
  6915 ;;		Nothing
  6916 ;; This function is called by:
  6917 ;;		_do_voltage
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           	psect	text31
  6922  002F4C                     __ptext31:
  6923                           	opt stack 0
  6924  002F4C                     _ADCRead:
  6925                           	opt stack 29
  6926                           
  6927                           ;incstack = 0
  6928                           ;ADCRead@ch stored from wreg
  6929  002F4C  6E03               	movwf	ADCRead@ch,c
  6930                           
  6931                           ;main.c: 189: if(ch>13) return 0;
  6932  002F4E  0E0D               	movlw	13
  6933  002F50  6403               	cpfsgt	ADCRead@ch,c
  6934  002F52  D005               	goto	l2969
  6935  002F54  0E00               	movlw	0
  6936  002F56  6E02               	movwf	?_ADCRead+1,c
  6937  002F58  0E00               	movlw	0
  6938  002F5A  6E01               	movwf	?_ADCRead,c
  6939  002F5C  0012               	return	
  6940  002F5E                     l2969:
  6941                           
  6942                           ;main.c: 191: ADCON0=(ch<<2);
  6943  002F5E  4403               	rlncf	ADCRead@ch,w,c
  6944  002F60  46E8               	rlncf	wreg,f,c
  6945  002F62  0BFC               	andlw	252
  6946  002F64  6EC2               	movwf	4034,c	;volatile
  6947                           
  6948                           ;main.c: 192: ADCON0bits.ADON=1;
  6949  002F66  80C2               	bsf	4034,0,c	;volatile
  6950                           
  6951                           ;main.c: 193: _delay((unsigned long)((15)*(4000000/4000000.0)));
  6952  002F68  0E05               	movlw	5
  6953  002F6A                     u4007:
  6954  002F6A  2EE8               	decfsz	wreg,f,c
  6955  002F6C  D7FE               	bra	u4007
  6956                           
  6957                           ;main.c: 194: ADCON0bits.GODONE=1;
  6958  002F6E  82C2               	bsf	4034,1,c	;volatile
  6959  002F70                     l121:
  6960  002F70  B2C2               	btfsc	4034,1,c	;volatile
  6961  002F72  D7FE               	goto	l121
  6962                           
  6963                           ;main.c: 196: ADCON0bits.ADON=0;
  6964  002F74  90C2               	bcf	4034,0,c	;volatile
  6965                           
  6966                           ;main.c: 199: return ADRES;
  6967  002F76  CFC3 F001          	movff	4035,?_ADCRead	;volatile
  6968  002F7A  CFC4 F002          	movff	4036,?_ADCRead+1	;volatile
  6969  002F7E  0012               	return		;funcret
  6970  002F80                     __end_of_ADCRead:
  6971                           	opt stack 0
  6972                           tblptru	equ	0xFF8
  6973                           tblptrh	equ	0xFF7
  6974                           tblptrl	equ	0xFF6
  6975                           tablat	equ	0xFF5
  6976                           prodh	equ	0xFF4
  6977                           prodl	equ	0xFF3
  6978                           postinc0	equ	0xFEE
  6979                           wreg	equ	0xFE8
  6980                           postdec1	equ	0xFE5
  6981                           fsr1l	equ	0xFE1
  6982                           indf2	equ	0xFDF
  6983                           postinc2	equ	0xFDE
  6984                           postdec2	equ	0xFDD
  6985                           fsr2h	equ	0xFDA
  6986                           fsr2l	equ	0xFD9
  6987                           status	equ	0xFD8
  6988                           
  6989 ;; *************** function _config_adc *****************
  6990 ;; Defined at:
  6991 ;;		line 205 in file "main.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;		None
  6994 ;; Auto vars:     Size  Location     Type
  6995 ;;		None
  6996 ;; Return value:  Size  Location     Type
  6997 ;;                  1    wreg      void 
  6998 ;; Registers used:
  6999 ;;		wreg, status,2
  7000 ;; Tracked objects:
  7001 ;;		On entry : 0/0
  7002 ;;		On exit  : 0/0
  7003 ;;		Unchanged: 0/0
  7004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7009 ;;Total ram usage:        0 bytes
  7010 ;; Hardware stack levels used:    1
  7011 ;; This function calls:
  7012 ;;		Nothing
  7013 ;; This function is called by:
  7014 ;;		_main
  7015 ;; This function uses a non-reentrant model
  7016 ;;
  7017                           
  7018                           	psect	text32
  7019  002F80                     __ptext32:
  7020                           	opt stack 0
  7021  002F80                     _config_adc:
  7022                           	opt stack 30
  7023                           
  7024                           ;main.c: 207: ANCON0bits.ANSEL0 = 1;
  7025                           
  7026                           ;incstack = 0
  7027  002F80  010F               	movlb	15	; () banked
  7028  002F82  815D               	bsf	93,0,b	;volatile
  7029                           
  7030                           ;main.c: 208: TRISAbits.TRISA0 = 1;
  7031  002F84  8092               	bsf	3986,0,c	;volatile
  7032                           
  7033                           ;main.c: 209: PORTAbits.RA0 = 0;
  7034  002F86  9080               	bcf	3968,0,c	;volatile
  7035                           
  7036                           ; BSR set to: 15
  7037                           ;main.c: 211: ADCON1bits.TRIGSEL =0b00;
  7038  002F88  0E3F               	movlw	-193
  7039  002F8A  16C1               	andwf	4033,f,c	;volatile
  7040                           
  7041                           ;main.c: 212: ADCON1bits.VCFG = 0b11;
  7042  002F8C  0E30               	movlw	48
  7043  002F8E  12C1               	iorwf	4033,f,c	;volatile
  7044                           
  7045                           ; BSR set to: 15
  7046                           ;main.c: 213: ADCON1bits.VNCFG =0b0;
  7047  002F90  96C1               	bcf	4033,3,c	;volatile
  7048                           
  7049                           ; BSR set to: 15
  7050                           ;main.c: 214: ADCON1bits.CHSN =0b000;
  7051  002F92  90C1               	bcf	4033,0,c	;volatile
  7052  002F94  92C1               	bcf	4033,1,c	;volatile
  7053  002F96  94C1               	bcf	4033,2,c	;volatile
  7054                           
  7055                           ; BSR set to: 15
  7056                           ;main.c: 217: ADCON2bits.ADFM = 0b1;
  7057  002F98  8EC0               	bsf	4032,7,c	;volatile
  7058                           
  7059                           ;main.c: 218: ADCON2bits.ACQT = 0b001;
  7060  002F9A  50C0               	movf	4032,w,c	;volatile
  7061  002F9C  0BC7               	andlw	-57
  7062  002F9E  0908               	iorlw	8
  7063  002FA0  6EC0               	movwf	4032,c	;volatile
  7064                           
  7065                           ;main.c: 219: ADCON2bits.ADCS = 0b100;
  7066  002FA2  50C0               	movf	4032,w,c	;volatile
  7067  002FA4  0BF8               	andlw	-8
  7068  002FA6  0904               	iorlw	4
  7069  002FA8  6EC0               	movwf	4032,c	;volatile
  7070                           
  7071                           ; BSR set to: 15
  7072                           ;main.c: 222: ADCON0bits.ADON = 1;
  7073  002FAA  80C2               	bsf	4034,0,c	;volatile
  7074                           
  7075                           ; BSR set to: 15
  7076  002FAC  0012               	return		;funcret
  7077  002FAE                     __end_of_config_adc:
  7078                           	opt stack 0
  7079                           tblptru	equ	0xFF8
  7080                           tblptrh	equ	0xFF7
  7081                           tblptrl	equ	0xFF6
  7082                           tablat	equ	0xFF5
  7083                           prodh	equ	0xFF4
  7084                           prodl	equ	0xFF3
  7085                           postinc0	equ	0xFEE
  7086                           wreg	equ	0xFE8
  7087                           postdec1	equ	0xFE5
  7088                           fsr1l	equ	0xFE1
  7089                           indf2	equ	0xFDF
  7090                           postinc2	equ	0xFDE
  7091                           postdec2	equ	0xFDD
  7092                           fsr2h	equ	0xFDA
  7093                           fsr2l	equ	0xFD9
  7094                           status	equ	0xFD8
  7095                           
  7096 ;; *************** function _UART1Init *****************
  7097 ;; Defined at:
  7098 ;;		line 174 in file "main.c"
  7099 ;; Parameters:    Size  Location     Type
  7100 ;;  baud_rate       4   14[COMRAM] long 
  7101 ;; Auto vars:     Size  Location     Type
  7102 ;;		None
  7103 ;; Return value:  Size  Location     Type
  7104 ;;                  1    wreg      void 
  7105 ;; Registers used:
  7106 ;;		wreg, status,2, status,0, cstack
  7107 ;; Tracked objects:
  7108 ;;		On entry : 0/0
  7109 ;;		On exit  : 0/0
  7110 ;;		Unchanged: 0/0
  7111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7112 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7113 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7115 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7116 ;;Total ram usage:        8 bytes
  7117 ;; Hardware stack levels used:    1
  7118 ;; Hardware stack levels required when called:    1
  7119 ;; This function calls:
  7120 ;;		___aldiv
  7121 ;; This function is called by:
  7122 ;;		_main
  7123 ;; This function uses a non-reentrant model
  7124 ;;
  7125                           
  7126                           	psect	text33
  7127  002C2E                     __ptext33:
  7128                           	opt stack 0
  7129  002C2E                     _UART1Init:
  7130                           	opt stack 29
  7131                           
  7132                           ;main.c: 175: RCSTA1bits.SPEN = 1;
  7133                           
  7134                           ; BSR set to: 15
  7135                           ;incstack = 0
  7136  002C2E  8EAB               	bsf	4011,7,c	;volatile
  7137                           
  7138                           ;main.c: 176: TRISCbits.TRISC7 = 1;
  7139  002C30  8E94               	bsf	3988,7,c	;volatile
  7140                           
  7141                           ;main.c: 177: RCSTA1bits.CREN = 1;
  7142  002C32  88AB               	bsf	4011,4,c	;volatile
  7143                           
  7144                           ;main.c: 178: TRISCbits.TRISC6 = 0;
  7145  002C34  9C94               	bcf	3988,6,c	;volatile
  7146                           
  7147                           ;main.c: 179: TXSTA1bits.TXEN = 1;
  7148  002C36  8AAC               	bsf	4012,5,c	;volatile
  7149                           
  7150                           ;main.c: 180: TXSTA1bits.SYNC = 0;
  7151  002C38  98AC               	bcf	4012,4,c	;volatile
  7152                           
  7153                           ;main.c: 181: TXSTA1bits.BRGH = 1;
  7154  002C3A  84AC               	bsf	4012,2,c	;volatile
  7155                           
  7156                           ;main.c: 182: BAUDCON1bits.BRG16 = 1;
  7157  002C3C  86A7               	bsf	4007,3,c	;volatile
  7158                           
  7159                           ;main.c: 183: SPBRG1 = (4000000/baud_rate/4)-1;
  7160  002C3E  C00F  F005         	movff	UART1Init@baud_rate,___aldiv@divisor
  7161  002C42  C010  F006         	movff	UART1Init@baud_rate+1,___aldiv@divisor+1
  7162  002C46  C011  F007         	movff	UART1Init@baud_rate+2,___aldiv@divisor+2
  7163  002C4A  C012  F008         	movff	UART1Init@baud_rate+3,___aldiv@divisor+3
  7164  002C4E  0E00               	movlw	0
  7165  002C50  6E01               	movwf	___aldiv@dividend,c
  7166  002C52  0E09               	movlw	9
  7167  002C54  6E02               	movwf	___aldiv@dividend+1,c
  7168  002C56  0E3D               	movlw	61
  7169  002C58  6E03               	movwf	___aldiv@dividend+2,c
  7170  002C5A  0E00               	movlw	0
  7171  002C5C  6E04               	movwf	___aldiv@dividend+3,c
  7172  002C5E  ECC9  F013         	call	___aldiv	;wreg free
  7173  002C62  C001  F013         	movff	?___aldiv,_UART1Init$1830
  7174  002C66  C002  F014         	movff	?___aldiv+1,_UART1Init$1830+1
  7175  002C6A  C003  F015         	movff	?___aldiv+2,_UART1Init$1830+2
  7176  002C6E  C004  F016         	movff	?___aldiv+3,_UART1Init$1830+3
  7177                           
  7178                           ;main.c: 183: SPBRG1 = (4000000/baud_rate/4)-1;
  7179  002C72  C013  F001         	movff	_UART1Init$1830,___aldiv@dividend
  7180  002C76  C014  F002         	movff	_UART1Init$1830+1,___aldiv@dividend+1
  7181  002C7A  C015  F003         	movff	_UART1Init$1830+2,___aldiv@dividend+2
  7182  002C7E  C016  F004         	movff	_UART1Init$1830+3,___aldiv@dividend+3
  7183  002C82  0E04               	movlw	4
  7184  002C84  6E05               	movwf	___aldiv@divisor,c
  7185  002C86  0E00               	movlw	0
  7186  002C88  6E06               	movwf	___aldiv@divisor+1,c
  7187  002C8A  0E00               	movlw	0
  7188  002C8C  6E07               	movwf	___aldiv@divisor+2,c
  7189  002C8E  0E00               	movlw	0
  7190  002C90  6E08               	movwf	___aldiv@divisor+3,c
  7191  002C92  ECC9  F013         	call	___aldiv	;wreg free
  7192  002C96  0401               	decf	?___aldiv,w,c
  7193  002C98  6EAF               	movwf	4015,c	;volatile
  7194  002C9A  0012               	return	
  7195  002C9C                     __end_of_UART1Init:
  7196                           	opt stack 0
  7197                           tblptru	equ	0xFF8
  7198                           tblptrh	equ	0xFF7
  7199                           tblptrl	equ	0xFF6
  7200                           tablat	equ	0xFF5
  7201                           prodh	equ	0xFF4
  7202                           prodl	equ	0xFF3
  7203                           postinc0	equ	0xFEE
  7204                           wreg	equ	0xFE8
  7205                           postdec1	equ	0xFE5
  7206                           fsr1l	equ	0xFE1
  7207                           indf2	equ	0xFDF
  7208                           postinc2	equ	0xFDE
  7209                           postdec2	equ	0xFDD
  7210                           fsr2h	equ	0xFDA
  7211                           fsr2l	equ	0xFD9
  7212                           status	equ	0xFD8
  7213                           
  7214 ;; *************** function ___aldiv *****************
  7215 ;; Defined at:
  7216 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/aldiv.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;  dividend        4    0[COMRAM] long 
  7219 ;;  divisor         4    4[COMRAM] long 
  7220 ;; Auto vars:     Size  Location     Type
  7221 ;;  quotient        4   10[COMRAM] long 
  7222 ;;  sign            1    9[COMRAM] unsigned char 
  7223 ;;  counter         1    8[COMRAM] unsigned char 
  7224 ;; Return value:  Size  Location     Type
  7225 ;;                  4    0[COMRAM] long 
  7226 ;; Registers used:
  7227 ;;		wreg, status,2, status,0
  7228 ;; Tracked objects:
  7229 ;;		On entry : 0/0
  7230 ;;		On exit  : 0/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7233 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7234 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7236 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7237 ;;Total ram usage:       14 bytes
  7238 ;; Hardware stack levels used:    1
  7239 ;; This function calls:
  7240 ;;		Nothing
  7241 ;; This function is called by:
  7242 ;;		_UART1Init
  7243 ;; This function uses a non-reentrant model
  7244 ;;
  7245                           
  7246                           	psect	text34
  7247  002792                     __ptext34:
  7248                           	opt stack 0
  7249  002792                     ___aldiv:
  7250                           	opt stack 29
  7251                           
  7252                           ;incstack = 0
  7253  002792  0E00               	movlw	0
  7254  002794  6E0A               	movwf	___aldiv@sign,c
  7255  002796  AE08               	btfss	___aldiv@divisor+3,7,c
  7256  002798  D00A               	goto	l3259
  7257  00279A  1E08               	comf	___aldiv@divisor+3,f,c
  7258  00279C  1E07               	comf	___aldiv@divisor+2,f,c
  7259  00279E  1E06               	comf	___aldiv@divisor+1,f,c
  7260  0027A0  6C05               	negf	___aldiv@divisor,c
  7261  0027A2  0E00               	movlw	0
  7262  0027A4  2206               	addwfc	___aldiv@divisor+1,f,c
  7263  0027A6  2207               	addwfc	___aldiv@divisor+2,f,c
  7264  0027A8  2208               	addwfc	___aldiv@divisor+3,f,c
  7265  0027AA  0E01               	movlw	1
  7266  0027AC  6E0A               	movwf	___aldiv@sign,c
  7267  0027AE                     l3259:
  7268  0027AE  AE04               	btfss	___aldiv@dividend+3,7,c
  7269  0027B0  D00A               	goto	l3265
  7270  0027B2  1E04               	comf	___aldiv@dividend+3,f,c
  7271  0027B4  1E03               	comf	___aldiv@dividend+2,f,c
  7272  0027B6  1E02               	comf	___aldiv@dividend+1,f,c
  7273  0027B8  6C01               	negf	___aldiv@dividend,c
  7274  0027BA  0E00               	movlw	0
  7275  0027BC  2202               	addwfc	___aldiv@dividend+1,f,c
  7276  0027BE  2203               	addwfc	___aldiv@dividend+2,f,c
  7277  0027C0  2204               	addwfc	___aldiv@dividend+3,f,c
  7278  0027C2  0E01               	movlw	1
  7279  0027C4  1A0A               	xorwf	___aldiv@sign,f,c
  7280  0027C6                     l3265:
  7281  0027C6  0E00               	movlw	0
  7282  0027C8  6E0B               	movwf	___aldiv@quotient,c
  7283  0027CA  0E00               	movlw	0
  7284  0027CC  6E0C               	movwf	___aldiv@quotient+1,c
  7285  0027CE  0E00               	movlw	0
  7286  0027D0  6E0D               	movwf	___aldiv@quotient+2,c
  7287  0027D2  0E00               	movlw	0
  7288  0027D4  6E0E               	movwf	___aldiv@quotient+3,c
  7289  0027D6  5005               	movf	___aldiv@divisor,w,c
  7290  0027D8  1006               	iorwf	___aldiv@divisor+1,w,c
  7291  0027DA  1007               	iorwf	___aldiv@divisor+2,w,c
  7292  0027DC  1008               	iorwf	___aldiv@divisor+3,w,c
  7293  0027DE  B4D8               	btfsc	status,2,c
  7294  0027E0  D02A               	goto	l3287
  7295  0027E2  0E01               	movlw	1
  7296  0027E4  6E09               	movwf	___aldiv@counter,c
  7297  0027E6  D006               	goto	l3273
  7298  0027E8                     l3271:
  7299  0027E8  90D8               	bcf	status,0,c
  7300  0027EA  3605               	rlcf	___aldiv@divisor,f,c
  7301  0027EC  3606               	rlcf	___aldiv@divisor+1,f,c
  7302  0027EE  3607               	rlcf	___aldiv@divisor+2,f,c
  7303  0027F0  3608               	rlcf	___aldiv@divisor+3,f,c
  7304  0027F2  2A09               	incf	___aldiv@counter,f,c
  7305  0027F4                     l3273:
  7306  0027F4  AE08               	btfss	___aldiv@divisor+3,7,c
  7307  0027F6  D7F8               	goto	l3271
  7308  0027F8                     l3275:
  7309  0027F8  90D8               	bcf	status,0,c
  7310  0027FA  360B               	rlcf	___aldiv@quotient,f,c
  7311  0027FC  360C               	rlcf	___aldiv@quotient+1,f,c
  7312  0027FE  360D               	rlcf	___aldiv@quotient+2,f,c
  7313  002800  360E               	rlcf	___aldiv@quotient+3,f,c
  7314  002802  5005               	movf	___aldiv@divisor,w,c
  7315  002804  5C01               	subwf	___aldiv@dividend,w,c
  7316  002806  5006               	movf	___aldiv@divisor+1,w,c
  7317  002808  5802               	subwfb	___aldiv@dividend+1,w,c
  7318  00280A  5007               	movf	___aldiv@divisor+2,w,c
  7319  00280C  5803               	subwfb	___aldiv@dividend+2,w,c
  7320  00280E  5008               	movf	___aldiv@divisor+3,w,c
  7321  002810  5804               	subwfb	___aldiv@dividend+3,w,c
  7322  002812  A0D8               	btfss	status,0,c
  7323  002814  D009               	goto	l3283
  7324  002816  5005               	movf	___aldiv@divisor,w,c
  7325  002818  5E01               	subwf	___aldiv@dividend,f,c
  7326  00281A  5006               	movf	___aldiv@divisor+1,w,c
  7327  00281C  5A02               	subwfb	___aldiv@dividend+1,f,c
  7328  00281E  5007               	movf	___aldiv@divisor+2,w,c
  7329  002820  5A03               	subwfb	___aldiv@dividend+2,f,c
  7330  002822  5008               	movf	___aldiv@divisor+3,w,c
  7331  002824  5A04               	subwfb	___aldiv@dividend+3,f,c
  7332  002826  800B               	bsf	___aldiv@quotient,0,c
  7333  002828                     l3283:
  7334  002828  90D8               	bcf	status,0,c
  7335  00282A  3208               	rrcf	___aldiv@divisor+3,f,c
  7336  00282C  3207               	rrcf	___aldiv@divisor+2,f,c
  7337  00282E  3206               	rrcf	___aldiv@divisor+1,f,c
  7338  002830  3205               	rrcf	___aldiv@divisor,f,c
  7339  002832  2E09               	decfsz	___aldiv@counter,f,c
  7340  002834  D7E1               	goto	l3275
  7341  002836                     l3287:
  7342  002836  500A               	movf	___aldiv@sign,w,c
  7343  002838  B4D8               	btfsc	status,2,c
  7344  00283A  D008               	goto	l3291
  7345  00283C  1E0E               	comf	___aldiv@quotient+3,f,c
  7346  00283E  1E0D               	comf	___aldiv@quotient+2,f,c
  7347  002840  1E0C               	comf	___aldiv@quotient+1,f,c
  7348  002842  6C0B               	negf	___aldiv@quotient,c
  7349  002844  0E00               	movlw	0
  7350  002846  220C               	addwfc	___aldiv@quotient+1,f,c
  7351  002848  220D               	addwfc	___aldiv@quotient+2,f,c
  7352  00284A  220E               	addwfc	___aldiv@quotient+3,f,c
  7353  00284C                     l3291:
  7354  00284C  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  7355  002850  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  7356  002854  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  7357  002858  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  7358  00285C  0012               	return	
  7359  00285E                     __end_of___aldiv:
  7360                           	opt stack 0
  7361                           tblptru	equ	0xFF8
  7362                           tblptrh	equ	0xFF7
  7363                           tblptrl	equ	0xFF6
  7364                           tablat	equ	0xFF5
  7365                           prodh	equ	0xFF4
  7366                           prodl	equ	0xFF3
  7367                           postinc0	equ	0xFEE
  7368                           wreg	equ	0xFE8
  7369                           postdec1	equ	0xFE5
  7370                           fsr1l	equ	0xFE1
  7371                           indf2	equ	0xFDF
  7372                           postinc2	equ	0xFDE
  7373                           postdec2	equ	0xFDD
  7374                           fsr2h	equ	0xFDA
  7375                           fsr2l	equ	0xFD9
  7376                           status	equ	0xFD8
  7377                           
  7378 ;; *************** function _Heartbeat *****************
  7379 ;; Defined at:
  7380 ;;		line 249 in file "main.c"
  7381 ;; Parameters:    Size  Location     Type
  7382 ;;		None
  7383 ;; Auto vars:     Size  Location     Type
  7384 ;;		None
  7385 ;; Return value:  Size  Location     Type
  7386 ;;                  1    wreg      void 
  7387 ;; Registers used:
  7388 ;;		wreg, status,2, status,0
  7389 ;; Tracked objects:
  7390 ;;		On entry : 0/0
  7391 ;;		On exit  : 0/0
  7392 ;;		Unchanged: 0/0
  7393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7396 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7397 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7398 ;;Total ram usage:        1 bytes
  7399 ;; Hardware stack levels used:    1
  7400 ;; This function calls:
  7401 ;;		Nothing
  7402 ;; This function is called by:
  7403 ;;		_main
  7404 ;; This function uses a non-reentrant model
  7405 ;;
  7406                           
  7407                           	psect	text35
  7408  002F16                     __ptext35:
  7409                           	opt stack 0
  7410  002F16                     _Heartbeat:
  7411                           	opt stack 30
  7412                           
  7413                           ;main.c: 252: if (heartbeatCount < 225)
  7414                           
  7415                           ;incstack = 0
  7416  002F16  BE52               	btfsc	_heartbeatCount+1,7,c	;volatile
  7417  002F18  D006               	goto	l3401
  7418  002F1A  5052               	movf	_heartbeatCount+1,w,c	;volatile
  7419  002F1C  E109               	bnz	l3407
  7420  002F1E  0EE1               	movlw	225
  7421  002F20  5C51               	subwf	_heartbeatCount,w,c	;volatile
  7422  002F22  B0D8               	btfsc	status,0,c
  7423  002F24  D005               	goto	l3407
  7424  002F26                     l3401:
  7425                           
  7426                           ;main.c: 253: {
  7427                           ;main.c: 254: heartbeatCount++;
  7428  002F26  4A51               	infsnz	_heartbeatCount,f,c	;volatile
  7429  002F28  2A52               	incf	_heartbeatCount+1,f,c	;volatile
  7430                           
  7431                           ;main.c: 256: PORTBbits.RB4 ^= 1;
  7432  002F2A  7881               	btg	3969,4,c	;volatile
  7433                           
  7434                           ;main.c: 257: PORTBbits.RB5 ^= 1;
  7435  002F2C  7A81               	btg	3969,5,c	;volatile
  7436                           
  7437                           ;main.c: 258: }
  7438  002F2E  0012               	return	
  7439  002F30                     l3407:
  7440                           
  7441                           ;main.c: 259: else
  7442                           ;main.c: 260: {
  7443                           ;main.c: 261: heartbeatCount = 0;
  7444  002F30  0E00               	movlw	0
  7445  002F32  6E52               	movwf	_heartbeatCount+1,c	;volatile
  7446  002F34  0E00               	movlw	0
  7447  002F36  6E51               	movwf	_heartbeatCount,c	;volatile
  7448                           
  7449                           ;main.c: 265: PORTBbits.RB6 ^= 1;
  7450  002F38  7C81               	btg	3969,6,c	;volatile
  7451                           
  7452                           ;main.c: 266: PORTBbits.RB7 ^= 1;
  7453  002F3A  7E81               	btg	3969,7,c	;volatile
  7454                           
  7455                           ;main.c: 267: _delay((unsigned long)((10)*(4000000/4000.0)));
  7456  002F3C  0E0D               	movlw	13
  7457  002F3E  6E01               	movwf	??_Heartbeat& (0+255),c
  7458  002F40  0EFC               	movlw	252
  7459  002F42                     u4017:
  7460  002F42  2EE8               	decfsz	wreg,f,c
  7461  002F44  D7FE               	bra	u4017
  7462  002F46  2E01               	decfsz	??_Heartbeat& (0+255),f,c
  7463  002F48  D7FC               	bra	u4017
  7464  002F4A  0012               	return	
  7465  002F4C                     __end_of_Heartbeat:
  7466                           	opt stack 0
  7467                           tblptru	equ	0xFF8
  7468                           tblptrh	equ	0xFF7
  7469                           tblptrl	equ	0xFF6
  7470                           tablat	equ	0xFF5
  7471                           prodh	equ	0xFF4
  7472                           prodl	equ	0xFF3
  7473                           postinc0	equ	0xFEE
  7474                           wreg	equ	0xFE8
  7475                           postdec1	equ	0xFE5
  7476                           fsr1l	equ	0xFE1
  7477                           indf2	equ	0xFDF
  7478                           postinc2	equ	0xFDE
  7479                           postdec2	equ	0xFDD
  7480                           fsr2h	equ	0xFDA
  7481                           fsr2l	equ	0xFD9
  7482                           status	equ	0xFD8
  7483                           tblptru	equ	0xFF8
  7484                           tblptrh	equ	0xFF7
  7485                           tblptrl	equ	0xFF6
  7486                           tablat	equ	0xFF5
  7487                           prodh	equ	0xFF4
  7488                           prodl	equ	0xFF3
  7489                           postinc0	equ	0xFEE
  7490                           wreg	equ	0xFE8
  7491                           postdec1	equ	0xFE5
  7492                           fsr1l	equ	0xFE1
  7493                           indf2	equ	0xFDF
  7494                           postinc2	equ	0xFDE
  7495                           postdec2	equ	0xFDD
  7496                           fsr2h	equ	0xFDA
  7497                           fsr2l	equ	0xFD9
  7498                           status	equ	0xFD8
  7499                           
  7500                           	psect	rparam
  7501  0000                     tblptru	equ	0xFF8
  7502                           tblptrh	equ	0xFF7
  7503                           tblptrl	equ	0xFF6
  7504                           tablat	equ	0xFF5
  7505                           prodh	equ	0xFF4
  7506                           prodl	equ	0xFF3
  7507                           postinc0	equ	0xFEE
  7508                           wreg	equ	0xFE8
  7509                           postdec1	equ	0xFE5
  7510                           fsr1l	equ	0xFE1
  7511                           indf2	equ	0xFDF
  7512                           postinc2	equ	0xFDE
  7513                           postdec2	equ	0xFDD
  7514                           fsr2h	equ	0xFDA
  7515                           fsr2l	equ	0xFD9
  7516                           status	equ	0xFD8


Data Sizes:
    Strings     32
    Constant    118
    Data        87
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     77      93
    BANK0           160     29     158
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> stringval(BANK0[10]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 10
		 -> stringval(BANK0[10]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> stringval(BANK0[10]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 10
		 -> stringval(BANK0[10]), 

    puts1USART@data	PTR unsigned char  size(2) Largest target is 50
		 -> stringval(BANK0[10]), device_name(BANK0[50]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_4(CODE[3]), STR_3(CODE[9]), STR_2(CODE[6]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 10
		 -> stringval(BANK0[10]), 

    sp__returnString	PTR unsigned char  size(2) Largest target is 4
		 -> returnString@processedString(BANK0[4]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _puts1USART->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _do_voltage->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___lwtoft->___ftpack
    ___ftdiv->___ftmul
    _UART1Init->___aldiv

Critical Paths under _main in BANK0

    _main->_printf
    _do_voltage->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0  115323
                                             74 COMRAM     3     3      0
                          _Heartbeat
                          _UART1Init
                         _config_adc
                         _do_voltage
                               _itoa
                             _printf
                         _puts1USART
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _puts1USART                                           2     0      2     294
                                             24 COMRAM     2     0      2
                        _Write1USART
                               _itoa (ARG)
 ---------------------------------------------------------------------------------
 (2) _Write1USART                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _itoa                                                 8     2      6    1942
                                             16 COMRAM     8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (2) _utoa                                                 9     3      6    1307
                                              7 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     466
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _do_voltage                                           0     0      0   61609
                            _ADCRead
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              41    36      5   50662
                                             63 COMRAM    11     6      5
                                              0 BANK0     29    29      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   12105
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   11907
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2895
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5237
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2603
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3063
                                             35 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              3     1      2      44
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _config_adc                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART1Init                                            8     4      4     725
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _Heartbeat                                            1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Heartbeat
   _UART1Init
     ___aldiv
   _config_adc
   _do_voltage
     _ADCRead
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _putch
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _itoa
     _utoa
       ___lwdiv
       ___lwmod
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _puts1USART
     _Write1USART
     _itoa (ARG)
       _utoa
         ___lwdiv
         ___lwmod
   _setup

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1D      9E       5       98.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4D      5D       1       97.9%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FB       6        0.0%
DATA                 0      0      FB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu Jan 11 00:54:50 2018

               ___awdiv@sign 000C          ___wmul@multiplicand 0011                  __CFG_BORV$3 000000  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                 ___ftadd@exp1 0039                 ___ftadd@exp2 0038  
               ___ftadd@sign 0037                          l110 308E                          l121 2F70  
                        l149 26F4                          l337 16B8                          l369 2FAE  
                        l626 28EC                          l723 3010                          l653 205A  
                        l664 210A                          l840 2DFE                          l673 2126  
                        l649 2030                          l761 298C                          l594 23E0  
                        l850 2ECC                          l691 222A                          l684 268E  
                        l692 2252                          l698 22B8                          l787 2B34  
                        l797 2CF0                 __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000  
            __end_of_ADCRead 2F80                 ___awmod@sign 0006                          wreg 000FE8  
                 _TXSTA1bits 000FAC           UART1Init@baud_rate 000F                 ___ftdiv@cntr 002D  
               ___ftdiv@sign 0032                         l3003 1076                         l3021 1104  
                       l3013 10D6                         l3031 1154                         l3015 10DC  
                       l3007 10B0                         l3105 140A                         l3041 119A  
                       l3025 112A                         l3009 10C6                         l3211 18AC  
                       l3203 185C                         l3123 14F4                         l3035 1168  
                       l3027 1136                         l3301 2602                         l3141 1582  
                       l3125 14FA                         l3109 1430                         l3037 1182  
                       l3029 113C                         l2511 2484                         l3231 1954  
                       l3223 190C                         l3207 1880                         l3151 15BE  
                       l3119 148E                         l3055 11F6                         l3047 11B2  
                       l3401 2F26                         l2441 2098                         l2425 2068  
                       l2601 2C16                         l2521 24AC                         l3233 1960  
                       l3225 1916                         l3217 18D8                         l3161 166A  
                       l3145 159C                         l3137 1540                         l3081 12DE  
                       l3065 123C                         l3049 11DC                         l3241 1998  
                       l3307 262A                         l2451 20CE                         l2419 203E  
                       l2507 2474                         l3163 1678                         l3155 15DE  
                       l3147 15A2                         l2381 28A4                         l2373 286E  
                       l2461 2102                         l2453 20D6                         l2605 2C24  
                       l2517 249C                         l3237 197A                         l3229 194A  
                       l3173 16BC                         l3149 15AA                         l3093 136C  
                       l3407 2F30                         l3271 27E8                         l3327 2668  
                       l2447 20BA                         l2551 2A82                         l2543 2A64  
                       l2631 1FAC                         l2623 1EEC                         l3191 181A  
                       l3183 1732                         l3167 1686                         l3095 1382  
                       l3343 2914                         l3273 27F4                         l3265 27C6  
                       l2385 28BA                         l2377 287C                         l2449 20C4  
                       l2561 2AA2                         l2553 2A86                         l2537 2A54  
                       l3169 169A                         l3097 13B2                         l3089 1346  
                       l3353 294E                         l3249 3086                         l3291 284C  
                       l3283 2828                         l3275 27F8                         l3259 27AE  
                       l2387 28D8                         l2379 2886                         l2467 2142  
                       l2459 20F8                         l2731 228E                         l2651 1B8E  
                       l3195 1828                         l3179 16E0                         l3099 13C8  
                       l3427 2E2C                         l2389 28E2                         l2813 29E0  
                       l2477 2172                         l2805 2EEC                         l2549 2A7A  
                       l2565 2AAC                         l2581 2BD2                         l2493 2442  
                       l2645 1AEA                         l3189 180C                         l3197 1836  
                       l3287 2836                         l2823 2A3C                         l2911 2CE2  
                       l2903 2CAE                         l2727 227E                         l2591 2BF4  
                       l2487 241A                         l2663 1CDE                         l2655 1BB2  
                       l2817 2A10                         l2905 2CBA                         l2753 2306  
                       l2737 22A6                         l2569 2ABA                         l2593 2BF8  
                       l2585 2BDE                         l2681 3058                         l2907 2CBE  
                       l2747 22E8                         l2739 22B2                         l2691 21C4  
                       l2931 2DCC                         l2837 2512                         l2917 2D08  
                       l2597 2C0C                         l2589 2BEC                         l2669 1D82  
                       l2933 2DD4                         l3493 2754                         l3477 26F0  
                       l2855 2578                         l2919 2D14                         l2791 23B6  
                       l2775 2378                         l2767 2348                         l2943 2DF4  
                       l2935 2DD8                         l2951 2EA2                         l2873 25C8  
                       l2865 25A0                         l2697 21F0                         l2953 2EAA  
                       l2867 25AC                         l2859 2588                         l2883 2AE6  
                       l2787 23A6                         l2955 2EAE                         l2869 25B2  
                       l2885 2AF2                         l2797 23CE                         l2895 2B26  
                       l2887 2AF6                         l2799 23DA                         l2983 0FBE  
                       l2959 2EC2                         l2969 2F5E                         l2979 0FA8  
                       l2989 0FF0                         l2997 1050                         STR_1 0F77  
                       STR_2 0F91                         STR_3 0F88                         STR_4 0F8E  
                       u2121 1FFC                         u2131 2010                         u2331 2402  
                       u4007 2F6A                         u2351 242A                         u4017 2F42  
                       u2611 21A8                         u3190 127C                         u2631 21D4  
                       u3195 1272                 printf@tmpval 00F0                         u3380 16B0  
                       u2821 24F6                         u3631 25EA                         u2840 2530  
                       u3651 2612                         u2845 2528                         _TXIF 007CF4  
                       _WPUB 000F5B                         _main 26C0                 ___ftpack@arg 0001  
                       _itoa 2E08                 ___ftpack@exp 0004                         fsr2h 000FDA  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       _utoa 290C                         prodh 000FF4                         prodl 000FF3  
                       start 0000                __CFG_IESO$OFF 000000                __CFG_FOSC$HS1 000000  
              __CFG_MCLRE$ON 000000                 ___ftmul@cntr 0022                 ___param_bank 000000  
               ___ftmul@sign 0023                 ___fttol@exp1 0039                 ___fttol@lval 0035  
               _BAUDCON1bits 000FA7              __end_of___aldiv 285E                        ?_main 0001  
                      ?_itoa 0011              __end_of___awdiv 2AC4                        _ADRES 000FC3  
            __end_of___ftadd 2198              __end_of___awmod 2C2E              __end_of___ftdiv 26C0  
            __end_of___ftneg 301E           __size_of_UART1Init 006E              __end_of___lldiv 2B46  
                      ?_utoa 0008              __end_of___ftmul 24E6              ___awdiv@divisor 0009  
            __end_of___llmod 2D02              __end_of___ftsub 2F16              __end_of___fttol 25DA  
                      _RC1IF 007CF5              __end_of___lwdiv 2E08              __end_of___lwmod 2ED6  
            ___awdiv@counter 000B                        _RCREG 000FAE                        _SPBRG 000FAF  
                      _PORTB 000F81                        _TRISB 000F93                        _TRISC 000F94  
                      _TXREG 000FAD                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000                 ___lltoft@exp 0011  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000  
            __end_of_dpowers 0F29                        _scale 19B6              __end_of_isdigit 3060  
              ___ftpack@sign 0005                        _setup 3060             _vUARTIntRxBuffer 00B7  
                      _putch 308C                        _volts 004E             _vUARTIntTxBuffer 00C1  
                      tablat 000FF5                        utoa@c 0010                        utoa@v 000E  
                      status 000FD8              __initialization 2E52                 __end_of_main 2792  
               __end_of_itoa 2E52               puts1USART@data 0019                 __end_of_utoa 29B0  
            _device_name_two 0060                    ??_ADCRead 0003                       ??_main 004B  
              ___fttol@sign1 0034                       ??_itoa 0017                       ??_utoa 000E  
              __activetblptr 000002         __size_of__tdiv_to_l_ 0132           __size_of_Heartbeat 0036  
             __CFG_RETEN$OFF 000000                    ADCRead@ch 0003                       _ADCON0 000FC2  
           ___llmod@dividend 0001                       ?_scale 0024                       _ANCON1 000F5C  
           ___awdiv@dividend 0007                       ?_setup 0001                       ?_putch 0001  
           __end_of___ftpack 290C                 _ADCStringVal 00CF             __end_of___lltoft 2D5E  
            __CFG_BBSIZ$BB2K 000000                       _RCREG1 000FAE             __end_of___lwtoft 3042  
                     _SPBRG1 000FAF                       _TXREG1 000FAD            __end_of_UART1Init 2C9C  
             __CFG_XINST$OFF 000000             __end_of__powers_ 0F50                       ___ftge 29B0  
                  ??___aldiv 0009                       ___wmul 2FD4                    ??___awdiv 000B  
                  ??___ftadd 0034               __CFG_STVREN$ON 000000                    ??___awmod 0005  
                  ??___ftdiv 002A                    ??___ftneg 0004                    ??___lldiv 0009  
                  ??___ftmul 001B                    ??___llmod 0009                    ??___ftsub 0040  
                  ??___fttol 002F                    ??___lwdiv 0005                    ??___lwmod 0005  
                     _fround 1DA6                       clear_0 2E78                       clear_1 2E84  
           ___awdiv@quotient 000D              ___awmod@divisor 0003              ___awmod@counter 0005  
                     _printf 0F98        ___ftmul@f3_as_product 001F                       itoa@cp 0017  
                  ??_isdigit 0001                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                   __accesstop 0060  
    __end_of__initialization 2E8A                   ___ftadd@f1 002E                   ___ftadd@f2 0031  
                 ___ftge@ff1 0001                   ___ftge@ff2 0004                ___rparam_used 000001  
                 ___ftdiv@f1 0024                   ___ftdiv@f2 0027                   ___ftdiv@f3 002E  
                 ___ftneg@f1 0001            __end_of_Heartbeat 2F4C                   ___ftmul@f1 0015  
                 ___ftmul@f2 0018                   ___ftsub@f1 003A                   ___ftsub@f2 003D  
                 ___fttol@f1 002B               __pcstackCOMRAM 0001                 __pidataBANK0 2D5E  
                 ___lltoft@c 0009                __end_of_scale 1DA6                __end_of_setup 307A  
              __end_of_putch 3098                   ___lwtoft@c 0009                   __div_to_l_ 22CA  
            __div_to_l_@exp1 000C              __div_to_l_@cntr 000B                      ??_scale 0027  
            __div_to_l_@quot 0007                      ??_setup 0001                      ??_putch 0001  
                 __pbssBANK0 00B7              __CFG_PLLCFG$OFF 000000                ??_Write1USART 0001  
              __div_to_l_@f1 0001                __div_to_l_@f2 0004                      ?___ftge 0001  
                    ?___wmul 000F                      ?_fround 0024                      _ADCRead 2F4C  
                  ?___ftpack 0001                      ?_printf 0040                    ?___lltoft 0009  
                  ?___lwtoft 0009             __CFG_CANMX$PORTB 000000                   _config_adc 2F80  
                 _do_voltage 2B46              __CFG_PWRTEN$OFF 000000            __end_of__npowers_ 0F77  
                    __Hparam 0000                      _Newline 0082                   _scale$1833 0027  
                    __Lparam 0000          __end_of_Write1USART 308C                      ___aldiv 2792  
            __size_of___ftge 0090                      ___awdiv 2A40                      ___ftadd 1FEC  
                    ___awmod 2BBE                      ___ftdiv 25DA                      ___ftneg 2FFA  
                    ___lldiv 2AC4              __size_of___wmul 0026                      ___ftmul 23F2  
                    ___llmod 2C9C                      ___ftsub 2ED6                      ___fttol 24E6  
                    ___lwdiv 2DB6                      ___lwmod 2E94  returnString@processedString 00DD  
               __psmallconst 0F00                      __pcinit 2E52                   ??___ftpack 0006  
            __size_of_fround 0246                      __ramtop 0F00                   ??___lltoft 000D  
                    __ptext0 26C0                      __ptext1 3060                      __ptext2 2FAE  
                    __ptext3 307A                      __ptext4 2E08                      __ptext5 290C  
                    __ptext6 2E94                      __ptext7 2DB6                      __ptext8 2B46  
                    __ptext9 0F98              __size_of_printf 0A1E                   ??___lwtoft 000C  
                ?__div_to_l_ 0001                      _dpowers 0F01                      _isdigit 3042  
           ___awmod@dividend 0001           _vUARTIntRxBufRdPtr 0054             ___aldiv@dividend 0001  
                    _inttext 0075                      _newvals 005B            __CFG_MSSPMSK$MSK7 000000  
            _ADCStringValTwo 00CB           _vUARTIntRxBufWrPtr 0055                      _spacing 007E  
         __CFG_INTOSCSEL$LOW 000000         end_of_initialization 2E8A           _vUARTIntTxBufRdPtr 0057  
         _vUARTIntTxBufWrPtr 0058                      itoa@buf 0011                      itoa@val 0013  
              __Lmediumconst 0000              ___lldiv@divisor 0005              ___lldiv@counter 000D  
                  _UART1Init 2C2E                    _RCSTAbits 000FAB                      printf@c 00FD  
                    printf@f 0040             ___aldiv@quotient 000B                      postdec1 000FE5  
                    postdec2 000FDD                      postinc0 000FEE                      postinc2 000FDE  
                    utoa@buf 0008               __tdiv_to_l_@f1 0001               __tdiv_to_l_@f2 0004  
                    utoa@val 000A                ??__tdiv_to_l_ 0007                    _PORTAbits 000F80  
                  _PORTBbits 000F81                   _puts1USART 2FAE                  ?_config_adc 0001  
                  _TRISAbits 000F92                  ?_do_voltage 0001                    _TRISCbits 000F94  
                _Write1USART 307A                  ___ftdiv@exp 0031                  printf@width 00F6  
                  _TXSTAbits 000FAC          __size_of__div_to_l_ 0128               _vUARTIntStatus 005A  
                ___ftmul@exp 001E                   ?_UART1Init 000F                    _Heartbeat 2F16  
             __end_of___ftge 2A40               __end_of___wmul 2FFA               __end_of_fround 1FEC  
             __end_of_printf 19B6          start_initialization 2E52          __end_of__tdiv_to_l_ 22CA  
            ___llmod@divisor 0005              ___llmod@counter 0009          __size_of_config_adc 002E  
        __size_of_do_voltage 0078                     ??___ftge 0007                     ??___wmul 0013  
                 ?_Heartbeat 0001                  __pdataBANK0 0060                     ??_fround 0027  
                   ?_ADCRead 0001                     ??_printf 0045                  ?_puts1USART 0019  
                 fround@prec 002D            __size_of___ftpack 00AE            __size_of___lltoft 005C  
                __pbssCOMRAM 004E            __size_of___lwtoft 0024                __pcstackBANK0 00E1  
               _isdigit$1437 0002             ___lwdiv@dividend 0001                  ??_UART1Init 0013  
                   ?___aldiv 0001                     ?___awdiv 0007                     ?___ftadd 002E  
                   ?___awmod 0001                     ?___ftdiv 0024                     ?___ftneg 0001  
                   ?___lldiv 0001                     ?___ftmul 0015                     ?___llmod 0001  
                   ?___ftsub 003A                    __npowers_ 0F50                     ?___fttol 002B  
                   ?___lwdiv 0001                     ?___lwmod 0001                  __tdiv_to_l_ 2198  
             _heartbeatCount 0051                 ??__div_to_l_ 0007                  __smallconst 0F00  
                   ?_isdigit 0001                  _device_name 0085                     _ADCValue 005C  
           ___lwdiv@quotient 0005         _vUARTIntRxBufDataCnt 0056              Write1USART@data 0001  
             __size_of_scale 03F0               __size_of_setup 001A               __size_of_putch 000C  
            ___aldiv@divisor 0005              ___aldiv@counter 0009               ___wmul@product 0013  
                   _IPR1bits 000F9F                     _PIE1bits 000F9D          __size_of_puts1USART 0026  
                   _PIR1bits 000F9E           __end_of__div_to_l_ 23F2                  ??_Heartbeat 0001  
           __size_of_ADCRead 0034                   _ADCON0bits 000FC2                   _ADCON1bits 000FC1  
                 _ADCON2bits 000FC0            ___wmul@multiplier 000F             __CFG_SOSCSEL$DIG 000000  
                 printf@flag 00EE                   printf@fval 00F8                   printf@prec 00FB  
               ??_config_adc 0001                 ??_do_voltage 004B                    _stringval 00D3  
       _vUARTIntTxBufDataCnt 0059                    copy_data0 2E66                 ?_Write1USART 0001  
                 _ANCON0bits 000F5D                     __Hrparam 0000                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000           __end_of_config_adc 2FAE           __end_of_do_voltage 2BBE  
           __size_of___aldiv 00CC             __size_of___awdiv 0084             __size_of___ftadd 01AC  
           __size_of___awmod 0070             __size_of___ftdiv 00E6             __size_of___ftneg 0024  
           __size_of___lldiv 0082             __size_of___ftmul 00F4             __size_of___llmod 0066  
           __size_of___ftsub 0040             __size_of___fttol 00F4             __size_of___lwdiv 0052  
           __size_of___lwmod 0042                     ___ftpack 285E                  _fround$1831 002A  
                _fround$1832 0027                     ___lltoft 2D02                     ___lwtoft 301E  
           __size_of_isdigit 001E              ___lwdiv@divisor 0003               main@AT_COMMAND 004D  
            ___lwdiv@counter 0007                     __ptext10 19B6                     __ptext11 308C  
                   __ptext20 2D02                     __ptext12 3042                     __ptext21 2C9C  
                   __ptext13 1DA6                     __ptext30 285E                     __ptext22 2AC4  
                   __ptext14 2FD4                     __ptext31 2F4C                     __ptext23 24E6  
                   __ptext15 23F2                     __ptext32 2F80                     __ptext24 2ED6  
                   __ptext16 2BBE                     __ptext33 2C2E                     __ptext25 1FEC  
                   __ptext17 2A40                     __ptext34 2792                     __ptext26 2FFA  
                   __ptext18 2198                     __ptext35 2F16                     __ptext27 29B0  
                   __ptext19 22CA                     __ptext28 301E                     __ptext29 25DA  
                   __powers_ 0F29                __size_of_main 00D2                __size_of_itoa 004A  
              __size_of_utoa 00A4                    printf@len 00E8                    printf@exp 00F4  
                  printf@val 00EA                     main@vale 004B                 ??_puts1USART 001B  
              _USART1_Status 0053                    putch@data 0001           __CFG_WDTEN$SWDTDIS 000000  
                 _INTCONbits 000FF2                     itoa@base 0015                     isdigit@c 0003  
                   scale@scl 002A             __tdiv_to_l_@exp1 000F             __tdiv_to_l_@cntr 000E  
           __tdiv_to_l_@quot 000A             ___lwmod@dividend 0001             ___lldiv@dividend 0001  
                 _RCSTA1bits 000FAB           __end_of_puts1USART 2FD4                     printf@ap 00E6  
                   printf@cp 00E4           __CFG_WDTPS$1048576 000000                 ?__tdiv_to_l_ 0001  
                   utoa@base 000C                  _printf$1834 00E1             ___lldiv@quotient 0009  
            ___lwmod@divisor 0003              ___lwmod@counter 0005                 ___aldiv@sign 000A  
        __CFG_BORPWR$ZPBORMV 000000               _UART1Init$1830 0013         __size_of_Write1USART 0012  
