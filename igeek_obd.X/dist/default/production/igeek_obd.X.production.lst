

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Jan  9 21:07:54 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47  0000                     
    48                           ; Version 1.42
    49                           ; Generated 13/04/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F25K80 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	idataBANK0
    84  002B5C                     __pidataBANK0:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _inttext
    88  002B5C  20                 	db	32
    89  002B5D  20                 	db	32
    90  002B5E  20                 	db	32
    91  002B5F  49                 	db	73
    92  002B60  4E                 	db	78
    93  002B61  54                 	db	84
    94  002B62  20                 	db	32
    95  002B63  00                 	db	0
    96                           
    97                           ;initializer for _spacing
    98  002B64  20                 	db	32
    99  002B65  20                 	db	32
   100  002B66  20                 	db	32
   101  002B67  00                 	db	0
   102                           
   103                           ;initializer for _Newline
   104  002B68  0A                 	db	10
   105  002B69  0D                 	db	13
   106  002B6A  00                 	db	0
   107                           
   108                           ;initializer for _Txdata
   109  002B6B  0D                 	db	13
   110  002B6C  0A                 	db	10
   111  002B6D  69                 	db	105
   112  002B6E  47                 	db	71
   113  002B6F  65                 	db	101
   114  002B70  65                 	db	101
   115  002B71  6B                 	db	107
   116  002B72  20                 	db	32
   117  002B73  4F                 	db	79
   118  002B74  44                 	db	68
   119  002B75  42                 	db	66
   120  002B76  32                 	db	50
   121  002B77  20                 	db	32
   122  002B78  4F                 	db	79
   123  002B79  70                 	db	112
   124  002B7A  65                 	db	101
   125  002B7B  6E                 	db	110
   126  002B7C  20                 	db	32
   127  002B7D  53                 	db	83
   128  002B7E  6F                 	db	111
   129  002B7F  75                 	db	117
   130  002B80  72                 	db	114
   131  002B81  63                 	db	99
   132  002B82  65                 	db	101
   133  002B83  64                 	db	100
   134  002B84  20                 	db	32
   135  002B85  45                 	db	69
   136  002B86  4C                 	db	76
   137  002B87  4D                 	db	77
   138  002B88  33                 	db	51
   139  002B89  32                 	db	50
   140  002B8A  37                 	db	55
   141  002B8B  20                 	db	32
   142  002B8C  43                 	db	67
   143  002B8D  6C                 	db	108
   144  002B8E  6F                 	db	111
   145  002B8F  6E                 	db	110
   146  002B90  65                 	db	101
   147  002B91  20                 	db	32
   148  002B92  66                 	db	102
   149  002B93  69                 	db	105
   150  002B94  72                 	db	114
   151  002B95  6D                 	db	109
   152  002B96  77                 	db	119
   153  002B97  61                 	db	97
   154  002B98  72                 	db	114
   155  002B99  65                 	db	101
   156  002B9A  20                 	db	32
   157  002B9B  00                 	db	0
   158                           
   159                           	psect	smallconst
   160  000F00                     __psmallconst:
   161                           	opt stack 0
   162  000F00  00                 	db	0
   163  000F01                     _dpowers:
   164                           	opt stack 0
   165  000F01  0001               	dw	1
   166  000F03  0000               	dw	0
   167  000F05  000A               	dw	10
   168  000F07  0000               	dw	0
   169  000F09  0064               	dw	100
   170  000F0B  0000               	dw	0
   171  000F0D  03E8               	dw	1000
   172  000F0F  0000               	dw	0
   173  000F11  2710               	dw	10000
   174  000F13  0000               	dw	0
   175  000F15  86A0               	dw	34464
   176  000F17  0001               	dw	1
   177  000F19  4240               	dw	16960
   178  000F1B  000F               	dw	15
   179  000F1D  9680               	dw	38528
   180  000F1F  0098               	dw	152
   181  000F21  E100               	dw	57600
   182  000F23  05F5               	dw	1525
   183  000F25  CA00               	dw	51712
   184  000F27  3B9A               	dw	15258
   185  000F29                     __end_of_dpowers:
   186                           	opt stack 0
   187  000F29                     __powers_:
   188                           	opt stack 0
   189  000F29  00                 	db	0
   190  000F2A  80                 	db	128
   191  000F2B  3F                 	db	63
   192  000F2C  00                 	db	0
   193  000F2D  20                 	db	32
   194  000F2E  41                 	db	65
   195  000F2F  00                 	db	0
   196  000F30  C8                 	db	200
   197  000F31  42                 	db	66
   198  000F32  00                 	db	0
   199  000F33  7A                 	db	122
   200  000F34  44                 	db	68
   201  000F35  40                 	db	64
   202  000F36  1C                 	db	28
   203  000F37  46                 	db	70
   204  000F38  50                 	db	80
   205  000F39  C3                 	db	195
   206  000F3A  47                 	db	71
   207  000F3B  24                 	db	36
   208  000F3C  74                 	db	116
   209  000F3D  49                 	db	73
   210  000F3E  97                 	db	151
   211  000F3F  18                 	db	24
   212  000F40  4B                 	db	75
   213  000F41  BC                 	db	188
   214  000F42  BE                 	db	190
   215  000F43  4C                 	db	76
   216  000F44  6B                 	db	107
   217  000F45  6E                 	db	110
   218  000F46  4E                 	db	78
   219  000F47  03                 	db	3
   220  000F48  15                 	db	21
   221  000F49  50                 	db	80
   222  000F4A  79                 	db	121
   223  000F4B  AD                 	db	173
   224  000F4C  60                 	db	96
   225  000F4D  F3                 	db	243
   226  000F4E  49                 	db	73
   227  000F4F  71                 	db	113
   228  000F50                     __end_of__powers_:
   229                           	opt stack 0
   230  000F50                     __npowers_:
   231                           	opt stack 0
   232  000F50  00                 	db	0
   233  000F51  80                 	db	128
   234  000F52  3F                 	db	63
   235  000F53  CD                 	db	205
   236  000F54  CC                 	db	204
   237  000F55  3D                 	db	61
   238  000F56  D7                 	db	215
   239  000F57  23                 	db	35
   240  000F58  3C                 	db	60
   241  000F59  12                 	db	18
   242  000F5A  83                 	db	131
   243  000F5B  3A                 	db	58
   244  000F5C  B7                 	db	183
   245  000F5D  D1                 	db	209
   246  000F5E  38                 	db	56
   247  000F5F  C6                 	db	198
   248  000F60  27                 	db	39
   249  000F61  37                 	db	55
   250  000F62  38                 	db	56
   251  000F63  86                 	db	134
   252  000F64  35                 	db	53
   253  000F65  C0                 	db	192
   254  000F66  D6                 	db	214
   255  000F67  33                 	db	51
   256  000F68  CC                 	db	204
   257  000F69  2B                 	db	43
   258  000F6A  32                 	db	50
   259  000F6B  70                 	db	112
   260  000F6C  89                 	db	137
   261  000F6D  30                 	db	48
   262  000F6E  E7                 	db	231
   263  000F6F  DB                 	db	219
   264  000F70  2E                 	db	46
   265  000F71  E5                 	db	229
   266  000F72  3C                 	db	60
   267  000F73  1E                 	db	30
   268  000F74  42                 	db	66
   269  000F75  A2                 	db	162
   270  000F76  0D                 	db	13
   271  000F77                     __end_of__npowers_:
   272                           	opt stack 0
   273  0000                     _ANCON0bits	set	3933
   274  0000                     _WPUB	set	3931
   275  0000                     _ANCON1	set	3932
   276  0000                     _ADRES	set	4035
   277  0000                     _TXREG1	set	4013
   278  0000                     _RCREG	set	4014
   279  0000                     _INTCONbits	set	4082
   280  0000                     _PIE1bits	set	3997
   281  0000                     _RCSTAbits	set	4011
   282  0000                     _IPR1bits	set	3999
   283  0000                     _TXSTAbits	set	4012
   284  0000                     _SPBRG	set	4015
   285  0000                     _TXREG	set	4013
   286  0000                     _PIR1bits	set	3998
   287  0000                     _ADCON2bits	set	4032
   288  0000                     _ADCON1bits	set	4033
   289  0000                     _PORTAbits	set	3968
   290  0000                     _TRISAbits	set	3986
   291  0000                     _ADCON0bits	set	4034
   292  0000                     _ADCON0	set	4034
   293  0000                     _SPBRG1	set	4015
   294  0000                     _BAUDCON1bits	set	4007
   295  0000                     _TXSTA1bits	set	4012
   296  0000                     _TRISCbits	set	3988
   297  0000                     _RCSTA1bits	set	4011
   298  0000                     _PORTBbits	set	3969
   299  0000                     _TRISC	set	3988
   300  0000                     _TRISB	set	3987
   301  0000                     _TXIF	set	31988
   302  000F77                     STR_1:
   303  000F77  56                 	db	86	;'V'
   304  000F78  6F                 	db	111	;'o'
   305  000F79  6C                 	db	108	;'l'
   306  000F7A  74                 	db	116	;'t'
   307  000F7B  61                 	db	97	;'a'
   308  000F7C  67                 	db	103	;'g'
   309  000F7D  65                 	db	101	;'e'
   310  000F7E  20                 	db	32
   311  000F7F  56                 	db	86	;'V'
   312  000F80  25                 	db	37
   313  000F81  36                 	db	54	;'6'
   314  000F82  2E                 	db	46
   315  000F83  32                 	db	50	;'2'
   316  000F84  66                 	db	102	;'f'
   317  000F85  0D                 	db	13
   318  000F86  0A                 	db	10
   319  000F87  00                 	db	0
   320                           
   321                           ; #config settings
   322  000F88  00                 	db	0	; dummy byte at the end
   323  0000                     
   324                           	psect	cinit
   325  002B1A                     __pcinit:
   326                           	opt stack 0
   327  002B1A                     start_initialization:
   328                           	opt stack 0
   329  002B1A                     __initialization:
   330                           	opt stack 0
   331                           
   332                           ; Initialize objects allocated to BANK0 (64 bytes)
   333                           ; load TBLPTR registers with __pidataBANK0
   334  002B1A  0E5C               	movlw	low __pidataBANK0
   335  002B1C  6EF6               	movwf	tblptrl,c
   336  002B1E  0E2B               	movlw	high __pidataBANK0
   337  002B20  6EF7               	movwf	tblptrh,c
   338  002B22  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   339  002B24  6EF8               	movwf	tblptru,c
   340  002B26  EE00  F060         	lfsr	0,__pdataBANK0
   341  002B2A  EE10 F040          	lfsr	1,64
   342  002B2E                     copy_data0:
   343  002B2E  0009               	tblrd		*+
   344  002B30  CFF5 FFEE          	movff	tablat,postinc0
   345  002B34  50E5               	movf	postdec1,w,c
   346  002B36  50E1               	movf	fsr1l,w,c
   347  002B38  E1FA               	bnz	copy_data0
   348                           
   349                           ; Clear objects allocated to BANK0 (32 bytes)
   350  002B3A  EE00  F0A0         	lfsr	0,__pbssBANK0
   351  002B3E  0E20               	movlw	32
   352  002B40                     clear_0:
   353  002B40  6AEE               	clrf	postinc0,c
   354  002B42  06E8               	decf	wreg,f,c
   355  002B44  E1FD               	bnz	clear_0
   356                           
   357                           ; Clear objects allocated to COMRAM (18 bytes)
   358  002B46  EE00  F04D         	lfsr	0,__pbssCOMRAM
   359  002B4A  0E12               	movlw	18
   360  002B4C                     clear_1:
   361  002B4C  6AEE               	clrf	postinc0,c
   362  002B4E  06E8               	decf	wreg,f,c
   363  002B50  E1FD               	bnz	clear_1
   364  002B52                     end_of_initialization:
   365                           	opt stack 0
   366  002B52                     __end_of__initialization:
   367                           	opt stack 0
   368  002B52  0E00               	movlw	low (__Lmediumconst shr (0+16))
   369  002B54  6EF8               	movwf	tblptru,c
   370  002B56  0100               	movlb	0
   371  002B58  EFEE  F015         	goto	_main	;jump to C main() function
   372                           tblptru	equ	0xFF8
   373                           tblptrh	equ	0xFF7
   374                           tblptrl	equ	0xFF6
   375                           tablat	equ	0xFF5
   376                           postinc0	equ	0xFEE
   377                           wreg	equ	0xFE8
   378                           postdec1	equ	0xFE5
   379                           fsr1l	equ	0xFE1
   380                           
   381                           	psect	bssCOMRAM
   382  00004D                     __pbssCOMRAM:
   383                           	opt stack 0
   384  00004D                     _volts:
   385                           	opt stack 0
   386  00004D                     	ds	3
   387  000050                     _heartbeatCountTwo:
   388                           	opt stack 0
   389  000050                     	ds	2
   390  000052                     _heartbeatCount:
   391                           	opt stack 0
   392  000052                     	ds	2
   393  000054                     _USART1_Status:
   394                           	opt stack 0
   395  000054                     	ds	1
   396  000055                     _vUARTIntRxBufRdPtr:
   397                           	opt stack 0
   398  000055                     	ds	1
   399  000056                     _vUARTIntRxBufWrPtr:
   400                           	opt stack 0
   401  000056                     	ds	1
   402  000057                     _vUARTIntRxBufDataCnt:
   403                           	opt stack 0
   404  000057                     	ds	1
   405  000058                     _vUARTIntTxBufRdPtr:
   406                           	opt stack 0
   407  000058                     	ds	1
   408  000059                     _vUARTIntTxBufWrPtr:
   409                           	opt stack 0
   410  000059                     	ds	1
   411  00005A                     _vUARTIntTxBufDataCnt:
   412                           	opt stack 0
   413  00005A                     	ds	1
   414  00005B                     _vUARTIntStatus:
   415                           	opt stack 0
   416  00005B                     	ds	1
   417  00005C                     _newvals:
   418                           	opt stack 0
   419  00005C                     	ds	1
   420  00005D                     _ADCValue:
   421                           	opt stack 0
   422  00005D                     	ds	2
   423                           tblptru	equ	0xFF8
   424                           tblptrh	equ	0xFF7
   425                           tblptrl	equ	0xFF6
   426                           tablat	equ	0xFF5
   427                           postinc0	equ	0xFEE
   428                           wreg	equ	0xFE8
   429                           postdec1	equ	0xFE5
   430                           fsr1l	equ	0xFE1
   431                           
   432                           	psect	bssBANK0
   433  0000A0                     __pbssBANK0:
   434                           	opt stack 0
   435  0000A0                     _vUARTIntRxBuffer:
   436                           	opt stack 0
   437  0000A0                     	ds	10
   438  0000AA                     _vUARTIntTxBuffer:
   439                           	opt stack 0
   440  0000AA                     	ds	10
   441  0000B4                     _ADCStringValTwo:
   442                           	opt stack 0
   443  0000B4                     	ds	4
   444  0000B8                     _ADCStringVal:
   445                           	opt stack 0
   446  0000B8                     	ds	4
   447  0000BC                     returnString@processedString:
   448                           	opt stack 0
   449  0000BC                     	ds	4
   450                           tblptru	equ	0xFF8
   451                           tblptrh	equ	0xFF7
   452                           tblptrl	equ	0xFF6
   453                           tablat	equ	0xFF5
   454                           postinc0	equ	0xFEE
   455                           wreg	equ	0xFE8
   456                           postdec1	equ	0xFE5
   457                           fsr1l	equ	0xFE1
   458                           
   459                           	psect	dataBANK0
   460  000060                     __pdataBANK0:
   461                           	opt stack 0
   462  000060                     _inttext:
   463                           	opt stack 0
   464  000060                     	ds	8
   465  000068                     _spacing:
   466                           	opt stack 0
   467  000068                     	ds	4
   468  00006C                     _Newline:
   469                           	opt stack 0
   470  00006C                     	ds	3
   471  00006F                     _Txdata:
   472                           	opt stack 0
   473  00006F                     	ds	49
   474                           tblptru	equ	0xFF8
   475                           tblptrh	equ	0xFF7
   476                           tblptrl	equ	0xFF6
   477                           tablat	equ	0xFF5
   478                           postinc0	equ	0xFEE
   479                           wreg	equ	0xFE8
   480                           postdec1	equ	0xFE5
   481                           fsr1l	equ	0xFE1
   482                           
   483                           	psect	cstackBANK0
   484  0000C0                     __pcstackBANK0:
   485                           	opt stack 0
   486  0000C0                     _printf$1795:
   487                           	opt stack 0
   488                           
   489                           ; 3 bytes @ 0x0
   490  0000C0                     	ds	3
   491  0000C3                     printf@ap:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x3
   495  0000C3                     	ds	2
   496  0000C5                     printf@val:
   497                           	opt stack 0
   498                           
   499                           ; 4 bytes @ 0x5
   500  0000C5                     	ds	4
   501  0000C9                     printf@flag:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x9
   505  0000C9                     	ds	2
   506  0000CB                     printf@width:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0xB
   510  0000CB                     	ds	2
   511  0000CD                     printf@tmpval:
   512                           	opt stack 0
   513                           
   514                           ; 4 bytes @ 0xD
   515  0000CD                     	ds	4
   516  0000D1                     printf@exp:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x11
   520  0000D1                     	ds	2
   521  0000D3                     printf@fval:
   522                           	opt stack 0
   523                           
   524                           ; 3 bytes @ 0x13
   525  0000D3                     	ds	3
   526  0000D6                     printf@prec:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x16
   530  0000D6                     	ds	2
   531  0000D8                     printf@c:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x18
   535  0000D8                     	ds	1
   536                           tblptru	equ	0xFF8
   537                           tblptrh	equ	0xFF7
   538                           tblptrl	equ	0xFF6
   539                           tablat	equ	0xFF5
   540                           postinc0	equ	0xFEE
   541                           wreg	equ	0xFE8
   542                           postdec1	equ	0xFE5
   543                           fsr1l	equ	0xFE1
   544                           
   545                           	psect	cstackCOMRAM
   546  000001                     __pcstackCOMRAM:
   547                           	opt stack 0
   548  000001                     ??_isdigit:
   549  000001                     ?_ADCRead:
   550                           	opt stack 0
   551  000001                     ?___awmod:
   552                           	opt stack 0
   553  000001                     ?___ftpack:
   554                           	opt stack 0
   555  000001                     ?___ftneg:
   556                           	opt stack 0
   557  000001                     ?__tdiv_to_l_:
   558                           	opt stack 0
   559  000001                     ?__div_to_l_:
   560                           	opt stack 0
   561  000001                     ?___aldiv:
   562                           	opt stack 0
   563  000001                     ?___lldiv:
   564                           	opt stack 0
   565  000001                     ?___llmod:
   566                           	opt stack 0
   567  000001                     putch@data:
   568                           	opt stack 0
   569  000001                     Write1USART@data:
   570                           	opt stack 0
   571  000001                     ___awmod@dividend:
   572                           	opt stack 0
   573  000001                     __div_to_l_@f1:
   574                           	opt stack 0
   575  000001                     ___ftpack@arg:
   576                           	opt stack 0
   577  000001                     __tdiv_to_l_@f1:
   578                           	opt stack 0
   579  000001                     ___ftge@ff1:
   580                           	opt stack 0
   581  000001                     ___ftneg@f1:
   582                           	opt stack 0
   583  000001                     ___aldiv@dividend:
   584                           	opt stack 0
   585  000001                     ___lldiv@dividend:
   586                           	opt stack 0
   587  000001                     ___llmod@dividend:
   588                           	opt stack 0
   589                           
   590                           ; 4 bytes @ 0x0
   591  000001                     	ds	1
   592  000002                     _isdigit$1419:
   593                           	opt stack 0
   594  000002                     puts1USART@data:
   595                           	opt stack 0
   596                           
   597                           ; 2 bytes @ 0x1
   598  000002                     	ds	1
   599  000003                     ADCRead@ch:
   600                           	opt stack 0
   601  000003                     isdigit@c:
   602                           	opt stack 0
   603  000003                     ___awmod@divisor:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x2
   607  000003                     	ds	1
   608  000004                     ___ftpack@exp:
   609                           	opt stack 0
   610  000004                     __div_to_l_@f2:
   611                           	opt stack 0
   612  000004                     __tdiv_to_l_@f2:
   613                           	opt stack 0
   614  000004                     ___ftge@ff2:
   615                           	opt stack 0
   616                           
   617                           ; 3 bytes @ 0x3
   618  000004                     	ds	1
   619  000005                     ___awmod@counter:
   620                           	opt stack 0
   621  000005                     ___ftpack@sign:
   622                           	opt stack 0
   623  000005                     ___aldiv@divisor:
   624                           	opt stack 0
   625  000005                     ___lldiv@divisor:
   626                           	opt stack 0
   627  000005                     ___llmod@divisor:
   628                           	opt stack 0
   629                           
   630                           ; 4 bytes @ 0x4
   631  000005                     	ds	1
   632  000006                     ??___ftpack:
   633  000006                     ___awmod@sign:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x5
   637  000006                     	ds	1
   638  000007                     ??__tdiv_to_l_:
   639  000007                     ??___ftge:
   640  000007                     ?___awdiv:
   641                           	opt stack 0
   642  000007                     ___awdiv@dividend:
   643                           	opt stack 0
   644  000007                     __div_to_l_@quot:
   645                           	opt stack 0
   646                           
   647                           ; 4 bytes @ 0x6
   648  000007                     	ds	2
   649  000009                     ?___lltoft:
   650                           	opt stack 0
   651  000009                     ?___lwtoft:
   652                           	opt stack 0
   653  000009                     ___aldiv@counter:
   654                           	opt stack 0
   655  000009                     ___llmod@counter:
   656                           	opt stack 0
   657  000009                     ___awdiv@divisor:
   658                           	opt stack 0
   659  000009                     ___lwtoft@c:
   660                           	opt stack 0
   661  000009                     ___lldiv@quotient:
   662                           	opt stack 0
   663  000009                     ___lltoft@c:
   664                           	opt stack 0
   665                           
   666                           ; 4 bytes @ 0x8
   667  000009                     	ds	1
   668  00000A                     ___aldiv@sign:
   669                           	opt stack 0
   670  00000A                     __tdiv_to_l_@quot:
   671                           	opt stack 0
   672                           
   673                           ; 4 bytes @ 0x9
   674  00000A                     	ds	1
   675  00000B                     ___awdiv@counter:
   676                           	opt stack 0
   677  00000B                     __div_to_l_@cntr:
   678                           	opt stack 0
   679  00000B                     ___aldiv@quotient:
   680                           	opt stack 0
   681                           
   682                           ; 4 bytes @ 0xA
   683  00000B                     	ds	1
   684  00000C                     ___awdiv@sign:
   685                           	opt stack 0
   686  00000C                     __div_to_l_@exp1:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0xB
   690  00000C                     	ds	1
   691  00000D                     ??___lltoft:
   692  00000D                     ___lldiv@counter:
   693                           	opt stack 0
   694  00000D                     ___awdiv@quotient:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0xC
   698  00000D                     	ds	1
   699  00000E                     __tdiv_to_l_@cntr:
   700                           	opt stack 0
   701                           
   702                           ; 1 bytes @ 0xD
   703  00000E                     	ds	1
   704  00000F                     ?___wmul:
   705                           	opt stack 0
   706  00000F                     __tdiv_to_l_@exp1:
   707                           	opt stack 0
   708  00000F                     ___wmul@multiplier:
   709                           	opt stack 0
   710  00000F                     UART1Init@baud_rate:
   711                           	opt stack 0
   712                           
   713                           ; 4 bytes @ 0xE
   714  00000F                     	ds	2
   715  000011                     ___lltoft@exp:
   716                           	opt stack 0
   717  000011                     ___wmul@multiplicand:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x10
   721  000011                     	ds	2
   722  000013                     ___wmul@product:
   723                           	opt stack 0
   724  000013                     _UART1Init$1791:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0x12
   728  000013                     	ds	2
   729  000015                     ?___ftmul:
   730                           	opt stack 0
   731  000015                     ___ftmul@f1:
   732                           	opt stack 0
   733                           
   734                           ; 3 bytes @ 0x14
   735  000015                     	ds	3
   736  000018                     ___ftmul@f2:
   737                           	opt stack 0
   738                           
   739                           ; 3 bytes @ 0x17
   740  000018                     	ds	3
   741  00001B                     ??___ftmul:
   742                           
   743                           ; 1 bytes @ 0x1A
   744  00001B                     	ds	3
   745  00001E                     ___ftmul@exp:
   746                           	opt stack 0
   747                           
   748                           ; 1 bytes @ 0x1D
   749  00001E                     	ds	1
   750  00001F                     ___ftmul@f3_as_product:
   751                           	opt stack 0
   752                           
   753                           ; 3 bytes @ 0x1E
   754  00001F                     	ds	3
   755  000022                     ___ftmul@cntr:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x21
   759  000022                     	ds	1
   760  000023                     ___ftmul@sign:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x22
   764  000023                     	ds	1
   765  000024                     ?___ftdiv:
   766                           	opt stack 0
   767  000024                     ?_fround:
   768                           	opt stack 0
   769  000024                     ?_scale:
   770                           	opt stack 0
   771  000024                     ___ftdiv@f1:
   772                           	opt stack 0
   773                           
   774                           ; 3 bytes @ 0x23
   775  000024                     	ds	3
   776  000027                     ___ftdiv@f2:
   777                           	opt stack 0
   778  000027                     _fround$1793:
   779                           	opt stack 0
   780  000027                     _scale$1794:
   781                           	opt stack 0
   782                           
   783                           ; 3 bytes @ 0x26
   784  000027                     	ds	3
   785  00002A                     ??___ftdiv:
   786  00002A                     scale@scl:
   787                           	opt stack 0
   788  00002A                     _fround$1792:
   789                           	opt stack 0
   790                           
   791                           ; 3 bytes @ 0x29
   792  00002A                     	ds	1
   793  00002B                     ?___fttol:
   794                           	opt stack 0
   795  00002B                     ___fttol@f1:
   796                           	opt stack 0
   797                           
   798                           ; 3 bytes @ 0x2A
   799  00002B                     	ds	2
   800  00002D                     fround@prec:
   801                           	opt stack 0
   802  00002D                     ___ftdiv@cntr:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x2C
   806  00002D                     	ds	1
   807  00002E                     ?___ftadd:
   808                           	opt stack 0
   809  00002E                     ___ftadd@f1:
   810                           	opt stack 0
   811  00002E                     ___ftdiv@f3:
   812                           	opt stack 0
   813                           
   814                           ; 3 bytes @ 0x2D
   815  00002E                     	ds	1
   816  00002F                     ??___fttol:
   817                           
   818                           ; 1 bytes @ 0x2E
   819  00002F                     	ds	2
   820  000031                     ___ftdiv@exp:
   821                           	opt stack 0
   822  000031                     ___ftadd@f2:
   823                           	opt stack 0
   824                           
   825                           ; 3 bytes @ 0x30
   826  000031                     	ds	1
   827  000032                     ___ftdiv@sign:
   828                           	opt stack 0
   829                           
   830                           ; 1 bytes @ 0x31
   831  000032                     	ds	2
   832  000034                     ??___ftadd:
   833  000034                     ___fttol@sign1:
   834                           	opt stack 0
   835                           
   836                           ; 1 bytes @ 0x33
   837  000034                     	ds	1
   838  000035                     ___fttol@lval:
   839                           	opt stack 0
   840                           
   841                           ; 4 bytes @ 0x34
   842  000035                     	ds	2
   843  000037                     ___ftadd@sign:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x36
   847  000037                     	ds	1
   848  000038                     ___ftadd@exp2:
   849                           	opt stack 0
   850                           
   851                           ; 1 bytes @ 0x37
   852  000038                     	ds	1
   853  000039                     ___ftadd@exp1:
   854                           	opt stack 0
   855  000039                     ___fttol@exp1:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x38
   859  000039                     	ds	1
   860  00003A                     ?___ftsub:
   861                           	opt stack 0
   862  00003A                     ___ftsub@f1:
   863                           	opt stack 0
   864                           
   865                           ; 3 bytes @ 0x39
   866  00003A                     	ds	3
   867  00003D                     ___ftsub@f2:
   868                           	opt stack 0
   869                           
   870                           ; 3 bytes @ 0x3C
   871  00003D                     	ds	3
   872  000040                     ?_printf:
   873                           	opt stack 0
   874  000040                     printf@f:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0x3F
   878  000040                     	ds	5
   879  000045                     ??_printf:
   880                           
   881                           ; 1 bytes @ 0x44
   882  000045                     	ds	6
   883  00004B                     main@vale:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x4A
   887  00004B                     	ds	2
   888                           tblptru	equ	0xFF8
   889                           tblptrh	equ	0xFF7
   890                           tblptrl	equ	0xFF6
   891                           tablat	equ	0xFF5
   892                           postinc0	equ	0xFEE
   893                           wreg	equ	0xFE8
   894                           postdec1	equ	0xFE5
   895                           fsr1l	equ	0xFE1
   896                           
   897 ;;
   898 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   899 ;;
   900 ;; *************** function _main *****************
   901 ;; Defined at:
   902 ;;		line 240 in file "main.c"
   903 ;; Parameters:    Size  Location     Type
   904 ;;		None
   905 ;; Auto vars:     Size  Location     Type
   906 ;;  voltage         3    0        volatile float 
   907 ;;  vale            2   74[COMRAM] unsigned int 
   908 ;;  stats           2    0        unsigned int 
   909 ;; Return value:  Size  Location     Type
   910 ;;                  1    wreg      void 
   911 ;; Registers used:
   912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   913 ;; Tracked objects:
   914 ;;		On entry : 0/0
   915 ;;		On exit  : 0/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   919 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   921 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   922 ;;Total ram usage:        2 bytes
   923 ;; Hardware stack levels required when called:    5
   924 ;; This function calls:
   925 ;;		_Heartbeat
   926 ;;		_UART1Init
   927 ;;		_config_adc
   928 ;;		_do_voltage
   929 ;;		_puts1USART
   930 ;;		_setup
   931 ;; This function is called by:
   932 ;;		Startup code after reset
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           	psect	text0
   937  002BDC                     __ptext0:
   938                           	opt stack 0
   939  002BDC                     _main:
   940                           	opt stack 26
   941                           
   942                           ;main.c: 241: setup();
   943                           
   944                           ;incstack = 0
   945  002BDC  EC3E  F016         	call	_setup	;wreg free
   946                           
   947                           ;main.c: 242: unsigned int vale=0;
   948  002BE0  0E00               	movlw	0
   949  002BE2  6E4C               	movwf	main@vale+1,c
   950  002BE4  0E00               	movlw	0
   951  002BE6  6E4B               	movwf	main@vale,c
   952                           
   953                           ;main.c: 243: unsigned int stats;
   954                           ;main.c: 244: volatile float voltage;
   955                           ;main.c: 246: config_adc();
   956  002BE8  EC27  F016         	call	_config_adc	;wreg free
   957                           
   958                           ;main.c: 248: UART1Init(38400);
   959  002BEC  0E00               	movlw	0
   960  002BEE  6E0F               	movwf	UART1Init@baud_rate,c
   961  002BF0  0E96               	movlw	150
   962  002BF2  6E10               	movwf	UART1Init@baud_rate+1,c
   963  002BF4  0E00               	movlw	0
   964  002BF6  6E11               	movwf	UART1Init@baud_rate+2,c
   965  002BF8  0E00               	movlw	0
   966  002BFA  6E12               	movwf	UART1Init@baud_rate+3,c
   967  002BFC  ECF5  F014         	call	_UART1Init	;wreg free
   968                           
   969                           ;main.c: 249: puts1USART((char *)Txdata);
   970  002C00  0E6F               	movlw	low _Txdata
   971  002C02  6E02               	movwf	puts1USART@data,c
   972  002C04  0E00               	movlw	high _Txdata
   973  002C06  6E03               	movwf	puts1USART@data+1,c
   974  002C08  EC51  F016         	call	_puts1USART	;wreg free
   975  002C0C                     l124:
   976  002C0C  A89E               	btfss	3998,4,c	;volatile
   977  002C0E  D7FE               	goto	l124
   978                           
   979                           ;main.c: 255: do_voltage();
   980  002C10  ECA8  F013         	call	_do_voltage	;wreg free
   981                           
   982                           ;main.c: 260: Heartbeat();
   983  002C14  EC77  F016         	call	_Heartbeat	;wreg free
   984  002C18  D7F9               	goto	l124
   985  002C1A                     __end_of_main:
   986                           	opt stack 0
   987                           tblptru	equ	0xFF8
   988                           tblptrh	equ	0xFF7
   989                           tblptrl	equ	0xFF6
   990                           tablat	equ	0xFF5
   991                           postinc0	equ	0xFEE
   992                           wreg	equ	0xFE8
   993                           postdec1	equ	0xFE5
   994                           fsr1l	equ	0xFE1
   995                           
   996 ;; *************** function _setup *****************
   997 ;; Defined at:
   998 ;;		line 86 in file "main.c"
   999 ;; Parameters:    Size  Location     Type
  1000 ;;		None
  1001 ;; Auto vars:     Size  Location     Type
  1002 ;;		None
  1003 ;; Return value:  Size  Location     Type
  1004 ;;                  1    wreg      void 
  1005 ;; Registers used:
  1006 ;;		wreg, status,2
  1007 ;; Tracked objects:
  1008 ;;		On entry : 0/0
  1009 ;;		On exit  : 0/0
  1010 ;;		Unchanged: 0/0
  1011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1016 ;;Total ram usage:        0 bytes
  1017 ;; Hardware stack levels used:    1
  1018 ;; This function calls:
  1019 ;;		Nothing
  1020 ;; This function is called by:
  1021 ;;		_main
  1022 ;; This function uses a non-reentrant model
  1023 ;;
  1024                           
  1025                           	psect	text1
  1026  002C7C                     __ptext1:
  1027                           	opt stack 0
  1028  002C7C                     _setup:
  1029                           	opt stack 30
  1030                           
  1031                           ;main.c: 88: TRISB = 0b00000000;
  1032                           
  1033                           ;incstack = 0
  1034  002C7C  0E00               	movlw	0
  1035  002C7E  6E93               	movwf	3987,c	;volatile
  1036                           
  1037                           ;main.c: 89: TRISC = 0;
  1038  002C80  0E00               	movlw	0
  1039  002C82  6E94               	movwf	3988,c	;volatile
  1040                           
  1041                           ;main.c: 91: ANCON1 = 0;
  1042  002C84  0E00               	movlw	0
  1043  002C86  010F               	movlb	15	; () banked
  1044  002C88  6F5C               	movwf	92,b	;volatile
  1045                           
  1046                           ;main.c: 92: WPUB = 0b00000000;
  1047  002C8A  0E00               	movlw	0
  1048  002C8C  010F               	movlb	15	; () banked
  1049  002C8E  6F5B               	movwf	91,b	;volatile
  1050                           
  1051                           ; BSR set to: 15
  1052                           ;main.c: 96: PORTBbits.RB0 = 1;
  1053  002C90  8081               	bsf	3969,0,c	;volatile
  1054                           
  1055                           ; BSR set to: 15
  1056                           ;main.c: 97: PORTBbits.RB1 = 1;
  1057  002C92  8281               	bsf	3969,1,c	;volatile
  1058                           
  1059                           ; BSR set to: 15
  1060                           ;main.c: 98: PORTBbits.RB2 = 1;
  1061  002C94  8481               	bsf	3969,2,c	;volatile
  1062                           
  1063                           ; BSR set to: 15
  1064                           ;main.c: 99: PORTBbits.RB3 = 1;
  1065  002C96  8681               	bsf	3969,3,c	;volatile
  1066                           
  1067                           ; BSR set to: 15
  1068                           ;main.c: 100: PORTBbits.RB4 = 1;
  1069  002C98  8881               	bsf	3969,4,c	;volatile
  1070                           
  1071                           ; BSR set to: 15
  1072                           ;main.c: 101: PORTBbits.RB5 = 1;
  1073  002C9A  8A81               	bsf	3969,5,c	;volatile
  1074                           
  1075                           ; BSR set to: 15
  1076                           ;main.c: 102: PORTBbits.RB6 = 1;
  1077  002C9C  8C81               	bsf	3969,6,c	;volatile
  1078                           
  1079                           ; BSR set to: 15
  1080                           ;main.c: 103: PORTBbits.RB7 = 1;
  1081  002C9E  8E81               	bsf	3969,7,c	;volatile
  1082                           
  1083                           ; BSR set to: 15
  1084  002CA0  0012               	return		;funcret
  1085  002CA2                     __end_of_setup:
  1086                           	opt stack 0
  1087                           tblptru	equ	0xFF8
  1088                           tblptrh	equ	0xFF7
  1089                           tblptrl	equ	0xFF6
  1090                           tablat	equ	0xFF5
  1091                           postinc0	equ	0xFEE
  1092                           wreg	equ	0xFE8
  1093                           postdec1	equ	0xFE5
  1094                           fsr1l	equ	0xFE1
  1095                           
  1096 ;; *************** function _puts1USART *****************
  1097 ;; Defined at:
  1098 ;;		line 14 in file "/opt/microchip/xc8/v1.42/sources/pic18/plib/USART/u1puts.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;  data            2    1[COMRAM] PTR unsigned char 
  1101 ;;		 -> Txdata(49), 
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;		None
  1104 ;; Return value:  Size  Location     Type
  1105 ;;                  1    wreg      void 
  1106 ;; Registers used:
  1107 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1108 ;; Tracked objects:
  1109 ;;		On entry : 0/0
  1110 ;;		On exit  : 0/0
  1111 ;;		Unchanged: 0/0
  1112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1113 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1116 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1117 ;;Total ram usage:        2 bytes
  1118 ;; Hardware stack levels used:    1
  1119 ;; Hardware stack levels required when called:    1
  1120 ;; This function calls:
  1121 ;;		_Write1USART
  1122 ;; This function is called by:
  1123 ;;		_main
  1124 ;; This function uses a non-reentrant model
  1125 ;;
  1126                           
  1127                           	psect	text2
  1128  002CA2                     __ptext2:
  1129                           	opt stack 0
  1130  002CA2                     _puts1USART:
  1131                           	opt stack 29
  1132  002CA2                     l336:
  1133  002CA2  A2AC               	btfss	4012,1,c	;volatile
  1134  002CA4  D7FE               	goto	l336
  1135  002CA6  C002  FFD9         	movff	puts1USART@data,fsr2l
  1136  002CAA  C003  FFDA         	movff	puts1USART@data+1,fsr2h
  1137  002CAE  50DF               	movf	indf2,w,c
  1138  002CB0  ECBD  F016         	call	_Write1USART
  1139  002CB4  C002  FFD9         	movff	puts1USART@data,fsr2l
  1140  002CB8  C003  FFDA         	movff	puts1USART@data+1,fsr2h
  1141  002CBC  4A02               	infsnz	puts1USART@data,f,c
  1142  002CBE  2A03               	incf	puts1USART@data+1,f,c
  1143  002CC0  50DF               	movf	indf2,w,c
  1144  002CC2  B4D8               	btfsc	status,2,c
  1145  002CC4  0012               	return	
  1146  002CC6  D7ED               	goto	l336
  1147  002CC8                     __end_of_puts1USART:
  1148                           	opt stack 0
  1149                           tblptru	equ	0xFF8
  1150                           tblptrh	equ	0xFF7
  1151                           tblptrl	equ	0xFF6
  1152                           tablat	equ	0xFF5
  1153                           postinc0	equ	0xFEE
  1154                           wreg	equ	0xFE8
  1155                           postdec1	equ	0xFE5
  1156                           fsr1l	equ	0xFE1
  1157                           indf2	equ	0xFDF
  1158                           fsr2h	equ	0xFDA
  1159                           fsr2l	equ	0xFD9
  1160                           status	equ	0xFD8
  1161                           
  1162 ;; *************** function _Write1USART *****************
  1163 ;; Defined at:
  1164 ;;		line 14 in file "/opt/microchip/xc8/v1.42/sources/pic18/plib/USART/u1write.c"
  1165 ;; Parameters:    Size  Location     Type
  1166 ;;  data            1    wreg     unsigned char 
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;  data            1    0[COMRAM] unsigned char 
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      void 
  1171 ;; Registers used:
  1172 ;;		wreg
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1179 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1181 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1182 ;;Total ram usage:        1 bytes
  1183 ;; Hardware stack levels used:    1
  1184 ;; This function calls:
  1185 ;;		Nothing
  1186 ;; This function is called by:
  1187 ;;		_puts1USART
  1188 ;; This function uses a non-reentrant model
  1189 ;;
  1190                           
  1191                           	psect	text3
  1192  002D7A                     __ptext3:
  1193                           	opt stack 0
  1194  002D7A                     _Write1USART:
  1195                           	opt stack 29
  1196                           
  1197                           ;incstack = 0
  1198                           ;Write1USART@data stored from wreg
  1199  002D7A  6E01               	movwf	Write1USART@data,c
  1200  002D7C  ACAC               	btfss	4012,6,c	;volatile
  1201  002D7E  D003               	goto	l3010
  1202  002D80  90AC               	bcf	4012,0,c	;volatile
  1203  002D82  B254               	btfsc	_USART1_Status,1,c
  1204  002D84  80AC               	bsf	4012,0,c	;volatile
  1205  002D86                     l3010:
  1206  002D86  C001  FFAD         	movff	Write1USART@data,4013	;volatile
  1207  002D8A  0012               	return		;funcret
  1208  002D8C                     __end_of_Write1USART:
  1209                           	opt stack 0
  1210                           tblptru	equ	0xFF8
  1211                           tblptrh	equ	0xFF7
  1212                           tblptrl	equ	0xFF6
  1213                           tablat	equ	0xFF5
  1214                           postinc0	equ	0xFEE
  1215                           wreg	equ	0xFE8
  1216                           postdec1	equ	0xFE5
  1217                           fsr1l	equ	0xFE1
  1218                           indf2	equ	0xFDF
  1219                           fsr2h	equ	0xFDA
  1220                           fsr2l	equ	0xFD9
  1221                           status	equ	0xFD8
  1222                           
  1223 ;; *************** function _do_voltage *****************
  1224 ;; Defined at:
  1225 ;;		line 223 in file "main.c"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;		None
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;		None
  1230 ;; Return value:  Size  Location     Type
  1231 ;;                  1    wreg      void 
  1232 ;; Registers used:
  1233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1234 ;; Tracked objects:
  1235 ;;		On entry : 0/0
  1236 ;;		On exit  : 0/0
  1237 ;;		Unchanged: 0/0
  1238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1243 ;;Total ram usage:        0 bytes
  1244 ;; Hardware stack levels used:    1
  1245 ;; Hardware stack levels required when called:    4
  1246 ;; This function calls:
  1247 ;;		_ADCRead
  1248 ;;		___ftdiv
  1249 ;;		___ftmul
  1250 ;;		___lwtoft
  1251 ;;		_printf
  1252 ;; This function is called by:
  1253 ;;		_main
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           	psect	text4
  1258  002750                     __ptext4:
  1259                           	opt stack 0
  1260  002750                     _do_voltage:
  1261                           	opt stack 26
  1262                           
  1263                           ;main.c: 225: if (heartbeatCountTwo < 255)
  1264                           
  1265                           ;incstack = 0
  1266  002750  BE51               	btfsc	_heartbeatCountTwo+1,7,c
  1267  002752  D005               	goto	l3158
  1268  002754  5051               	movf	_heartbeatCountTwo+1,w,c
  1269  002756  E106               	bnz	l3160
  1270  002758  2850               	incf	_heartbeatCountTwo,w,c
  1271  00275A  B0D8               	btfsc	status,0,c
  1272  00275C  D003               	goto	l3160
  1273  00275E                     l3158:
  1274                           
  1275                           ;main.c: 226: {
  1276                           ;main.c: 227: heartbeatCountTwo++;
  1277  00275E  4A50               	infsnz	_heartbeatCountTwo,f,c
  1278  002760  2A51               	incf	_heartbeatCountTwo+1,f,c
  1279                           
  1280                           ;main.c: 228: }
  1281  002762  0012               	return	
  1282  002764                     l3160:
  1283                           
  1284                           ;main.c: 229: else
  1285                           ;main.c: 230: {
  1286                           ;main.c: 231: heartbeatCountTwo = 0;
  1287  002764  0E00               	movlw	0
  1288  002766  6E51               	movwf	_heartbeatCountTwo+1,c
  1289  002768  0E00               	movlw	0
  1290  00276A  6E50               	movwf	_heartbeatCountTwo,c
  1291                           
  1292                           ;main.c: 232: ADCValue=ADCRead(0);
  1293  00276C  0E00               	movlw	0
  1294  00276E  EC0D  F016         	call	_ADCRead
  1295  002772  C001  F05D         	movff	?_ADCRead,_ADCValue
  1296  002776  C002  F05E         	movff	?_ADCRead+1,_ADCValue+1
  1297                           
  1298                           ;main.c: 234: volts = 5.7 * ((float)ADCValue)/1024.0;
  1299  00277A  0E66               	movlw	102
  1300  00277C  6E18               	movwf	___ftmul@f2,c
  1301  00277E  0EB6               	movlw	182
  1302  002780  6E19               	movwf	___ftmul@f2+1,c
  1303  002782  0E40               	movlw	64
  1304  002784  6E1A               	movwf	___ftmul@f2+2,c
  1305  002786  C05D  F009         	movff	_ADCValue,___lwtoft@c
  1306  00278A  C05E  F00A         	movff	_ADCValue+1,___lwtoft@c+1
  1307  00278E  EC9C  F016         	call	___lwtoft	;wreg free
  1308  002792  C009  F015         	movff	?___lwtoft,___ftmul@f1
  1309  002796  C00A  F016         	movff	?___lwtoft+1,___ftmul@f1+1
  1310  00279A  C00B  F017         	movff	?___lwtoft+2,___ftmul@f1+2
  1311  00279E  EC84  F011         	call	___ftmul	;wreg free
  1312  0027A2  C015  F024         	movff	?___ftmul,___ftdiv@f1
  1313  0027A6  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
  1314  0027AA  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
  1315  0027AE  0E00               	movlw	0
  1316  0027B0  6E27               	movwf	___ftdiv@f2,c
  1317  0027B2  0E80               	movlw	128
  1318  0027B4  6E28               	movwf	___ftdiv@f2+1,c
  1319  0027B6  0E44               	movlw	68
  1320  0027B8  6E29               	movwf	___ftdiv@f2+2,c
  1321  0027BA  EC78  F012         	call	___ftdiv	;wreg free
  1322  0027BE  C024  F04D         	movff	?___ftdiv,_volts
  1323  0027C2  C025  F04E         	movff	?___ftdiv+1,_volts+1
  1324  0027C6  C026  F04F         	movff	?___ftdiv+2,_volts+2
  1325                           
  1326                           ;main.c: 235: printf("Voltage V%6.2f\r\n", volts);
  1327  0027CA  0E77               	movlw	low STR_1
  1328  0027CC  6E40               	movwf	printf@f,c
  1329  0027CE  0E0F               	movlw	high STR_1
  1330  0027D0  6E41               	movwf	printf@f+1,c
  1331  0027D2  C04D  F042         	movff	_volts,?_printf+2
  1332  0027D6  C04E  F043         	movff	_volts+1,?_printf+3
  1333  0027DA  C04F  F044         	movff	_volts+2,?_printf+4
  1334  0027DE  ECC5  F007         	call	_printf	;wreg free
  1335  0027E2  0012               	return	
  1336  0027E4                     __end_of_do_voltage:
  1337                           	opt stack 0
  1338                           tblptru	equ	0xFF8
  1339                           tblptrh	equ	0xFF7
  1340                           tblptrl	equ	0xFF6
  1341                           tablat	equ	0xFF5
  1342                           postinc0	equ	0xFEE
  1343                           wreg	equ	0xFE8
  1344                           postdec1	equ	0xFE5
  1345                           fsr1l	equ	0xFE1
  1346                           indf2	equ	0xFDF
  1347                           fsr2h	equ	0xFDA
  1348                           fsr2l	equ	0xFD9
  1349                           status	equ	0xFD8
  1350                           
  1351 ;; *************** function _printf *****************
  1352 ;; Defined at:
  1353 ;;		line 464 in file "/opt/microchip/xc8/v1.42/sources/common/doprnt.c"
  1354 ;; Parameters:    Size  Location     Type
  1355 ;;  f               2   63[COMRAM] PTR const unsigned char 
  1356 ;;		 -> STR_1(17), 
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;  tmpval          4   13[BANK0 ] struct .
  1359 ;;  val             4    5[BANK0 ] unsigned long 
  1360 ;;  fval            3   19[BANK0 ] unsigned long 
  1361 ;;  cp              3    0        PTR const unsigned char 
  1362 ;;  prec            2   22[BANK0 ] int 
  1363 ;;  exp             2   17[BANK0 ] int 
  1364 ;;  width           2   11[BANK0 ] int 
  1365 ;;  flag            2    9[BANK0 ] unsigned short 
  1366 ;;  ap              2    3[BANK0 ] PTR void [1]
  1367 ;;		 -> ?_printf(2), 
  1368 ;;  len             2    0        unsigned int 
  1369 ;;  c               1   24[BANK0 ] char 
  1370 ;;  d               1    0        unsigned char 
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  2   63[COMRAM] int 
  1373 ;; Registers used:
  1374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 0/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1380 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1381 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1382 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1383 ;;      Totals:        11      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1384 ;;Total ram usage:       36 bytes
  1385 ;; Hardware stack levels used:    1
  1386 ;; Hardware stack levels required when called:    3
  1387 ;; This function calls:
  1388 ;;		___awdiv
  1389 ;;		___ftadd
  1390 ;;		___ftge
  1391 ;;		___ftmul
  1392 ;;		___ftneg
  1393 ;;		___ftsub
  1394 ;;		___fttol
  1395 ;;		___lldiv
  1396 ;;		___llmod
  1397 ;;		___lltoft
  1398 ;;		___wmul
  1399 ;;		__div_to_l_
  1400 ;;		__tdiv_to_l_
  1401 ;;		_fround
  1402 ;;		_isdigit
  1403 ;;		_putch
  1404 ;;		_scale
  1405 ;; This function is called by:
  1406 ;;		_do_voltage
  1407 ;; This function uses a non-reentrant model
  1408 ;;
  1409                           
  1410                           	psect	text5
  1411  000F8A                     __ptext5:
  1412                           	opt stack 0
  1413  000F8A                     _printf:
  1414                           	opt stack 26
  1415                           
  1416                           ;doprnt.c: 466: va_list ap;
  1417                           ;doprnt.c: 499: signed char c;
  1418                           ;doprnt.c: 501: int width;
  1419                           ;doprnt.c: 504: int prec;
  1420                           ;doprnt.c: 508: unsigned short flag;
  1421                           ;doprnt.c: 515: char d;
  1422                           ;doprnt.c: 516: double fval;
  1423                           ;doprnt.c: 517: int exp;
  1424                           ;doprnt.c: 523: union {
  1425                           ;doprnt.c: 524: unsigned long vd;
  1426                           ;doprnt.c: 525: double integ;
  1427                           ;doprnt.c: 526: } tmpval;
  1428                           ;doprnt.c: 528: unsigned long val;
  1429                           ;doprnt.c: 529: unsigned len;
  1430                           ;doprnt.c: 530: const char * cp;
  1431                           ;doprnt.c: 533: *ap = __va_start();
  1432                           
  1433                           ;incstack = 0
  1434  000F8A  0E42               	movlw	low (?_printf+2)
  1435  000F8C  0100               	movlb	0	; () banked
  1436  000F8E  6FC3               	movwf	printf@ap& (0+255),b
  1437  000F90  0E00               	movlw	high (?_printf+2)
  1438  000F92  0100               	movlb	0	; () banked
  1439  000F94  6FC4               	movwf	(printf@ap+1)& (0+255),b
  1440                           
  1441                           ;doprnt.c: 536: while(c = *f++) {
  1442  000F96  EF57  F00C         	goto	l3002
  1443  000F9A                     l2770:
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;doprnt.c: 538: if(c != '%')
  1447  000F9A  0E25               	movlw	37
  1448  000F9C  0100               	movlb	0	; () banked
  1449  000F9E  19D8               	xorwf	printf@c& (0+255),w,b
  1450  000FA0  B4D8               	btfsc	status,2,c
  1451  000FA2  D006               	goto	l2774
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;doprnt.c: 540: {
  1455                           ;doprnt.c: 541: (putch(c) );
  1456  000FA4  0100               	movlb	0	; () banked
  1457  000FA6  51D8               	movf	printf@c& (0+255),w,b
  1458  000FA8  ECC6  F016         	call	_putch
  1459                           
  1460                           ;doprnt.c: 542: continue;
  1461  000FAC  EF57  F00C         	goto	l3002
  1462  000FB0                     l2774:
  1463                           
  1464                           ;doprnt.c: 543: }
  1465                           ;doprnt.c: 546: width = 0;
  1466  000FB0  0E00               	movlw	0
  1467  000FB2  0100               	movlb	0	; () banked
  1468  000FB4  6FCC               	movwf	(printf@width+1)& (0+255),b
  1469  000FB6  0E00               	movlw	0
  1470  000FB8  6FCB               	movwf	printf@width& (0+255),b
  1471                           
  1472                           ;doprnt.c: 548: flag = 0;
  1473  000FBA  0E00               	movlw	0
  1474  000FBC  0100               	movlb	0	; () banked
  1475  000FBE  6FCA               	movwf	(printf@flag+1)& (0+255),b
  1476  000FC0  0E00               	movlw	0
  1477  000FC2  6FC9               	movwf	printf@flag& (0+255),b
  1478                           
  1479                           ; BSR set to: 0
  1480                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1481  000FC4  C040  FFF6         	movff	printf@f,tblptrl
  1482  000FC8  C041  FFF7         	movff	printf@f+1,tblptrh
  1483  000FCC                     	if	0	;tblptru may be non-zero
  1484  000FCC                     	endif
  1485  000FCC                     	if	0	;tblptru may be non-zero
  1486  000FCC                     	endif
  1487  000FCC  0008               	tblrd		*
  1488  000FCE  50F5               	movf	tablat,w,c
  1489  000FD0  ECAE  F016         	call	_isdigit
  1490  000FD4  A0D8               	btfss	status,0,c
  1491  000FD6  D035               	goto	l2788
  1492                           
  1493                           ;doprnt.c: 598: width = 0;
  1494  000FD8  0E00               	movlw	0
  1495  000FDA  0100               	movlb	0	; () banked
  1496  000FDC  6FCC               	movwf	(printf@width+1)& (0+255),b
  1497  000FDE  0E00               	movlw	0
  1498  000FE0  6FCB               	movwf	printf@width& (0+255),b
  1499  000FE2                     l2780:
  1500                           
  1501                           ;doprnt.c: 600: width *= 10;
  1502  000FE2  C0CB  F00F         	movff	printf@width,___wmul@multiplier
  1503  000FE6  C0CC  F010         	movff	printf@width+1,___wmul@multiplier+1
  1504  000FEA  0E00               	movlw	0
  1505  000FEC  6E12               	movwf	___wmul@multiplicand+1,c
  1506  000FEE  0E0A               	movlw	10
  1507  000FF0  6E11               	movwf	___wmul@multiplicand,c
  1508  000FF2  EC64  F016         	call	___wmul	;wreg free
  1509  000FF6  C00F  F0CB         	movff	?___wmul,printf@width
  1510  000FFA  C010  F0CC         	movff	?___wmul+1,printf@width+1
  1511                           
  1512                           ;doprnt.c: 601: width += *f++ - '0';
  1513  000FFE  0ED0               	movlw	208
  1514  001000  6E45               	movwf	??_printf& (0+255),c
  1515  001002  0EFF               	movlw	255
  1516  001004  6E46               	movwf	(??_printf+1)& (0+255),c
  1517  001006  C040  FFF6         	movff	printf@f,tblptrl
  1518  00100A  C041  FFF7         	movff	printf@f+1,tblptrh
  1519  00100E                     	if	0	;tblptru may be non-zero
  1520  00100E                     	endif
  1521  00100E                     	if	0	;tblptru may be non-zero
  1522  00100E                     	endif
  1523  00100E  0008               	tblrd		*
  1524  001010  50F5               	movf	tablat,w,c
  1525  001012  6E47               	movwf	(??_printf+2)& (0+255),c
  1526  001014  6A48               	clrf	(??_printf+3)& (0+255),c
  1527  001016  5045               	movf	??_printf,w,c
  1528  001018  2647               	addwf	??_printf+2,f,c
  1529  00101A  5046               	movf	??_printf+1,w,c
  1530  00101C  2248               	addwfc	??_printf+3,f,c
  1531  00101E  5047               	movf	??_printf+2,w,c
  1532  001020  0100               	movlb	0	; () banked
  1533  001022  27CB               	addwf	printf@width& (0+255),f,b
  1534  001024  5048               	movf	??_printf+3,w,c
  1535  001026  0100               	movlb	0	; () banked
  1536  001028  23CC               	addwfc	(printf@width+1)& (0+255),f,b
  1537                           
  1538                           ; BSR set to: 0
  1539  00102A  4A40               	infsnz	printf@f,f,c
  1540  00102C  2A41               	incf	printf@f+1,f,c
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1544  00102E  C040  FFF6         	movff	printf@f,tblptrl
  1545  001032  C041  FFF7         	movff	printf@f+1,tblptrh
  1546  001036                     	if	0	;tblptru may be non-zero
  1547  001036                     	endif
  1548  001036                     	if	0	;tblptru may be non-zero
  1549  001036                     	endif
  1550  001036  0008               	tblrd		*
  1551  001038  50F5               	movf	tablat,w,c
  1552  00103A  ECAE  F016         	call	_isdigit
  1553  00103E  B0D8               	btfsc	status,0,c
  1554  001040  D7D0               	goto	l2780
  1555  001042                     l2788:
  1556                           
  1557                           ;doprnt.c: 608: }
  1558                           ;doprnt.c: 611: if(*f == '.') {
  1559  001042  C040  FFF6         	movff	printf@f,tblptrl
  1560  001046  C041  FFF7         	movff	printf@f+1,tblptrh
  1561  00104A                     	if	0	;tblptru may be non-zero
  1562  00104A                     	endif
  1563  00104A                     	if	0	;tblptru may be non-zero
  1564  00104A                     	endif
  1565  00104A  0008               	tblrd		*
  1566  00104C  50F5               	movf	tablat,w,c
  1567  00104E  0A2E               	xorlw	46
  1568  001050  A4D8               	btfss	status,2,c
  1569  001052  D032               	goto	l2800
  1570                           
  1571                           ;doprnt.c: 612: flag |= 0x4000;
  1572  001054  0100               	movlb	0	; () banked
  1573  001056  8DCA               	bsf	(printf@flag+1)& (0+255),6,b
  1574                           
  1575                           ;doprnt.c: 613: f++;
  1576  001058  4A40               	infsnz	printf@f,f,c
  1577  00105A  2A41               	incf	printf@f+1,f,c
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;doprnt.c: 620: {
  1581                           ;doprnt.c: 621: prec = 0;
  1582  00105C  0E00               	movlw	0
  1583  00105E  0100               	movlb	0	; () banked
  1584  001060  6FD7               	movwf	(printf@prec+1)& (0+255),b
  1585  001062  0E00               	movlw	0
  1586  001064  6FD6               	movwf	printf@prec& (0+255),b
  1587                           
  1588                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1589  001066  D01D               	goto	l2798
  1590  001068                     l2794:
  1591                           
  1592                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1593  001068  C0D6  F00F         	movff	printf@prec,___wmul@multiplier
  1594  00106C  C0D7  F010         	movff	printf@prec+1,___wmul@multiplier+1
  1595  001070  0E00               	movlw	0
  1596  001072  6E12               	movwf	___wmul@multiplicand+1,c
  1597  001074  0E0A               	movlw	10
  1598  001076  6E11               	movwf	___wmul@multiplicand,c
  1599  001078  EC64  F016         	call	___wmul	;wreg free
  1600  00107C  C040  FFF6         	movff	printf@f,tblptrl
  1601  001080  C041  FFF7         	movff	printf@f+1,tblptrh
  1602  001084                     	if	0	;tblptru may be non-zero
  1603  001084                     	endif
  1604  001084                     	if	0	;tblptru may be non-zero
  1605  001084                     	endif
  1606  001084  0008               	tblrd		*
  1607  001086  50F5               	movf	tablat,w,c
  1608  001088  260F               	addwf	?___wmul,f,c
  1609  00108A  0E00               	movlw	0
  1610  00108C  2210               	addwfc	?___wmul+1,f,c
  1611  00108E  0ED0               	movlw	208
  1612  001090  240F               	addwf	?___wmul,w,c
  1613  001092  0100               	movlb	0	; () banked
  1614  001094  6FD6               	movwf	printf@prec& (0+255),b
  1615  001096  0EFF               	movlw	255
  1616  001098  2010               	addwfc	?___wmul+1,w,c
  1617  00109A  0100               	movlb	0	; () banked
  1618  00109C  6FD7               	movwf	(printf@prec+1)& (0+255),b
  1619                           
  1620                           ; BSR set to: 0
  1621  00109E  4A40               	infsnz	printf@f,f,c
  1622  0010A0  2A41               	incf	printf@f+1,f,c
  1623  0010A2                     l2798:
  1624                           
  1625                           ; BSR set to: 0
  1626  0010A2  C040  FFF6         	movff	printf@f,tblptrl
  1627  0010A6  C041  FFF7         	movff	printf@f+1,tblptrh
  1628  0010AA                     	if	0	;tblptru may be non-zero
  1629  0010AA                     	endif
  1630  0010AA                     	if	0	;tblptru may be non-zero
  1631  0010AA                     	endif
  1632  0010AA  0008               	tblrd		*
  1633  0010AC  50F5               	movf	tablat,w,c
  1634  0010AE  ECAE  F016         	call	_isdigit
  1635  0010B2  A0D8               	btfss	status,0,c
  1636  0010B4  D00C               	goto	l2808
  1637  0010B6  D7D8               	goto	l2794
  1638  0010B8                     l2800:
  1639                           
  1640                           ;doprnt.c: 626: prec = 0;
  1641  0010B8  0E00               	movlw	0
  1642  0010BA  0100               	movlb	0	; () banked
  1643  0010BC  6FD7               	movwf	(printf@prec+1)& (0+255),b
  1644  0010BE  0E00               	movlw	0
  1645  0010C0  6FD6               	movwf	printf@prec& (0+255),b
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;doprnt.c: 628: flag |= 0x1000;
  1649  0010C2  0100               	movlb	0	; () banked
  1650  0010C4  89CA               	bsf	(printf@flag+1)& (0+255),4,b
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;doprnt.c: 630: }
  1654                           ;doprnt.c: 635: switch(c = *f++) {
  1655  0010C6  D003               	goto	l2808
  1656  0010C8                     l2804:
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;doprnt.c: 663: flag |= 0x400;
  1660  0010C8  0100               	movlb	0	; () banked
  1661  0010CA  85CA               	bsf	(printf@flag+1)& (0+255),2,b
  1662                           
  1663                           ;doprnt.c: 664: break;
  1664  0010CC  D012               	goto	l2810
  1665  0010CE                     l2808:
  1666  0010CE  C040  FFF6         	movff	printf@f,tblptrl
  1667  0010D2  C041  FFF7         	movff	printf@f+1,tblptrh
  1668  0010D6  4A40               	infsnz	printf@f,f,c
  1669  0010D8  2A41               	incf	printf@f+1,f,c
  1670  0010DA                     	if	0	;tblptru may be non-zero
  1671  0010DA                     	endif
  1672  0010DA                     	if	0	;tblptru may be non-zero
  1673  0010DA                     	endif
  1674  0010DA  0008               	tblrd		*
  1675  0010DC  CFF5 F0D8          	movff	tablat,printf@c
  1676  0010E0  0100               	movlb	0	; () banked
  1677  0010E2  51D8               	movf	printf@c& (0+255),w,b
  1678                           
  1679                           ; Switch size 1, requested type "space"
  1680                           ; Number of cases is 2, Range of values is 0 to 102
  1681                           ; switch strategies available:
  1682                           ; Name         Instructions Cycles
  1683                           ; simple_byte            7     4 (average)
  1684                           ;	Chosen strategy is simple_byte
  1685  0010E4  0A00               	xorlw	0	; case 0
  1686  0010E6  B4D8               	btfsc	status,2,c
  1687  0010E8  0012               	return	
  1688  0010EA  0A66               	xorlw	102	; case 102
  1689  0010EC  B4D8               	btfsc	status,2,c
  1690  0010EE  D7EC               	goto	l2804
  1691  0010F0  D3DE               	goto	l3002
  1692  0010F2                     l2810:
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;doprnt.c: 825: if(flag & (0x700)) {
  1696  0010F2  0E07               	movlw	7
  1697  0010F4  0100               	movlb	0	; () banked
  1698  0010F6  15CA               	andwf	(printf@flag+1)& (0+255),w,b
  1699  0010F8  B4D8               	btfsc	status,2,c
  1700  0010FA  D328               	goto	l2958
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;doprnt.c: 827: if(flag & 0x1000)
  1704  0010FC  0100               	movlb	0	; () banked
  1705  0010FE  A9CA               	btfss	(printf@flag+1)& (0+255),4,b
  1706  001100  D005               	goto	l2816
  1707                           
  1708                           ; BSR set to: 0
  1709                           ;doprnt.c: 829: prec = 6;
  1710  001102  0E00               	movlw	0
  1711  001104  0100               	movlb	0	; () banked
  1712  001106  6FD7               	movwf	(printf@prec+1)& (0+255),b
  1713  001108  0E06               	movlw	6
  1714  00110A  6FD6               	movwf	printf@prec& (0+255),b
  1715  00110C                     l2816:
  1716                           
  1717                           ; BSR set to: 0
  1718                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1719  00110C  C0C3  FFD9         	movff	printf@ap,fsr2l
  1720  001110  C0C4  FFDA         	movff	printf@ap+1,fsr2h
  1721  001114  CFDE F0D3          	movff	postinc2,printf@fval
  1722  001118  CFDE F0D4          	movff	postinc2,printf@fval+1
  1723  00111C  CFDD F0D5          	movff	postdec2,printf@fval+2
  1724                           
  1725                           ; BSR set to: 0
  1726  001120  0E03               	movlw	3
  1727  001122  0100               	movlb	0	; () banked
  1728  001124  27C3               	addwf	printf@ap& (0+255),f,b
  1729  001126  0E00               	movlw	0
  1730  001128  23C4               	addwfc	(printf@ap+1)& (0+255),f,b
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;doprnt.c: 831: if(fval < 0.0) {
  1734  00112A  0100               	movlb	0	; () banked
  1735  00112C  AFD5               	btfss	(printf@fval+2)& (0+255),7,b
  1736  00112E  D011               	goto	l2826
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;doprnt.c: 832: fval = -fval;
  1740  001130  C0D3  F001         	movff	printf@fval,___ftneg@f1
  1741  001134  C0D4  F002         	movff	printf@fval+1,___ftneg@f1+1
  1742  001138  C0D5  F003         	movff	printf@fval+2,___ftneg@f1+2
  1743  00113C  EC8A  F016         	call	___ftneg	;wreg free
  1744  001140  C001  F0D3         	movff	?___ftneg,printf@fval
  1745  001144  C002  F0D4         	movff	?___ftneg+1,printf@fval+1
  1746  001148  C003  F0D5         	movff	?___ftneg+2,printf@fval+2
  1747                           
  1748                           ;doprnt.c: 833: flag |= 0x03;
  1749  00114C  0E03               	movlw	3
  1750  00114E  0100               	movlb	0	; () banked
  1751  001150  13C9               	iorwf	printf@flag& (0+255),f,b
  1752  001152                     l2826:
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;doprnt.c: 834: }
  1756                           ;doprnt.c: 835: exp = 0;
  1757  001152  0E00               	movlw	0
  1758  001154  0100               	movlb	0	; () banked
  1759  001156  6FD2               	movwf	(printf@exp+1)& (0+255),b
  1760  001158  0E00               	movlw	0
  1761  00115A  6FD1               	movwf	printf@exp& (0+255),b
  1762                           
  1763                           ; BSR set to: 0
  1764                           ;doprnt.c: 836: if( fval!=0) {
  1765  00115C  0100               	movlb	0	; () banked
  1766  00115E  51D3               	movf	printf@fval& (0+255),w,b
  1767  001160  0100               	movlb	0	; () banked
  1768  001162  11D4               	iorwf	(printf@fval+1)& (0+255),w,b
  1769  001164  0100               	movlb	0	; () banked
  1770  001166  11D5               	iorwf	(printf@fval+2)& (0+255),w,b
  1771  001168  B4D8               	btfsc	status,2,c
  1772  00116A  D08B               	goto	l2854
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1776  00116C  0E82               	movlw	130
  1777  00116E  6E45               	movwf	??_printf& (0+255),c
  1778  001170  0EFF               	movlw	255
  1779  001172  6E46               	movwf	(??_printf+1)& (0+255),c
  1780  001174  C0D3  F047         	movff	printf@fval,??_printf+2
  1781  001178  C0D4  F048         	movff	printf@fval+1,??_printf+3
  1782  00117C  C0D5  F049         	movff	printf@fval+2,??_printf+4
  1783  001180  C0D6  F04A         	movff	printf@fval+3,??_printf+5
  1784  001184  0E10               	movlw	16
  1785  001186  D005               	goto	u2880
  1786  001188                     u2885:
  1787  001188  90D8               	bcf	status,0,c
  1788  00118A  324A               	rrcf	??_printf+5,f,c
  1789  00118C  3249               	rrcf	??_printf+4,f,c
  1790  00118E  3248               	rrcf	??_printf+3,f,c
  1791  001190  3247               	rrcf	??_printf+2,f,c
  1792  001192                     u2880:
  1793  001192  2EE8               	decfsz	wreg,f,c
  1794  001194  D7F9               	goto	u2885
  1795  001196  5047               	movf	??_printf+2,w,c
  1796  001198  2445               	addwf	??_printf,w,c
  1797  00119A  0100               	movlb	0	; () banked
  1798  00119C  6FD1               	movwf	printf@exp& (0+255),b
  1799  00119E  0E00               	movlw	0
  1800  0011A0  2046               	addwfc	??_printf+1,w,c
  1801  0011A2  0100               	movlb	0	; () banked
  1802  0011A4  6FD2               	movwf	(printf@exp+1)& (0+255),b
  1803                           
  1804                           ; BSR set to: 0
  1805                           ;doprnt.c: 838: exp--;
  1806  0011A6  0100               	movlb	0	; () banked
  1807  0011A8  07D1               	decf	printf@exp& (0+255),f,b
  1808  0011AA  A0D8               	btfss	status,0,c
  1809  0011AC  07D2               	decf	(printf@exp+1)& (0+255),f,b
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;doprnt.c: 839: exp *= 3;
  1813  0011AE  C0D1  F00F         	movff	printf@exp,___wmul@multiplier
  1814  0011B2  C0D2  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1815  0011B6  0E00               	movlw	0
  1816  0011B8  6E12               	movwf	___wmul@multiplicand+1,c
  1817  0011BA  0E03               	movlw	3
  1818  0011BC  6E11               	movwf	___wmul@multiplicand,c
  1819  0011BE  EC64  F016         	call	___wmul	;wreg free
  1820  0011C2  C00F  F0D1         	movff	?___wmul,printf@exp
  1821  0011C6  C010  F0D2         	movff	?___wmul+1,printf@exp+1
  1822                           
  1823                           ;doprnt.c: 840: exp /= 10;
  1824  0011CA  C0D1  F007         	movff	printf@exp,___awdiv@dividend
  1825  0011CE  C0D2  F008         	movff	printf@exp+1,___awdiv@dividend+1
  1826  0011D2  0E00               	movlw	0
  1827  0011D4  6E0A               	movwf	___awdiv@divisor+1,c
  1828  0011D6  0E0A               	movlw	10
  1829  0011D8  6E09               	movwf	___awdiv@divisor,c
  1830  0011DA  EC3A  F014         	call	___awdiv	;wreg free
  1831  0011DE  C007  F0D1         	movff	?___awdiv,printf@exp
  1832  0011E2  C008  F0D2         	movff	?___awdiv+1,printf@exp+1
  1833                           
  1834                           ;doprnt.c: 841: if(exp < 0)
  1835  0011E6  0100               	movlb	0	; () banked
  1836  0011E8  AFD2               	btfss	(printf@exp+1)& (0+255),7,b
  1837  0011EA  D004               	goto	l2842
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;doprnt.c: 842: exp--;
  1841  0011EC  0100               	movlb	0	; () banked
  1842  0011EE  07D1               	decf	printf@exp& (0+255),f,b
  1843  0011F0  A0D8               	btfss	status,0,c
  1844  0011F2  07D2               	decf	(printf@exp+1)& (0+255),f,b
  1845  0011F4                     l2842:
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1849  0011F4  0100               	movlb	0	; () banked
  1850  0011F6  51D1               	movf	printf@exp& (0+255),w,b
  1851  0011F8  0800               	sublw	0
  1852  0011FA  EC66  F00C         	call	_scale
  1853  0011FE  C024  F0CD         	movff	?_scale,printf@tmpval
  1854  001202  C025  F0CE         	movff	?_scale+1,printf@tmpval+1
  1855  001206  C026  F0CF         	movff	?_scale+2,printf@tmpval+2
  1856                           
  1857                           ;doprnt.c: 847: tmpval.integ *= fval;
  1858  00120A  C0CD  F015         	movff	printf@tmpval,___ftmul@f1
  1859  00120E  C0CE  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  1860  001212  C0CF  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  1861  001216  C0D3  F018         	movff	printf@fval,___ftmul@f2
  1862  00121A  C0D4  F019         	movff	printf@fval+1,___ftmul@f2+1
  1863  00121E  C0D5  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1864  001222  EC84  F011         	call	___ftmul	;wreg free
  1865  001226  C015  F0CD         	movff	?___ftmul,printf@tmpval
  1866  00122A  C016  F0CE         	movff	?___ftmul+1,printf@tmpval+1
  1867  00122E  C017  F0CF         	movff	?___ftmul+2,printf@tmpval+2
  1868                           
  1869                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1870  001232  C0CD  F001         	movff	printf@tmpval,___ftge@ff1
  1871  001236  C0CE  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1872  00123A  C0CF  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1873  00123E  0E00               	movlw	0
  1874  001240  6E04               	movwf	___ftge@ff2,c
  1875  001242  0E80               	movlw	128
  1876  001244  6E05               	movwf	___ftge@ff2+1,c
  1877  001246  0E3F               	movlw	63
  1878  001248  6E06               	movwf	___ftge@ff2+2,c
  1879  00124A  ECF2  F013         	call	___ftge	;wreg free
  1880  00124E  B0D8               	btfsc	status,0,c
  1881  001250  D005               	goto	l2850
  1882                           
  1883                           ;doprnt.c: 849: exp--;
  1884  001252  0100               	movlb	0	; () banked
  1885  001254  07D1               	decf	printf@exp& (0+255),f,b
  1886  001256  A0D8               	btfss	status,0,c
  1887  001258  07D2               	decf	(printf@exp+1)& (0+255),f,b
  1888  00125A  D013               	goto	l2854
  1889  00125C                     l2850:
  1890                           
  1891                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1892  00125C  C0CD  F001         	movff	printf@tmpval,___ftge@ff1
  1893  001260  C0CE  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1894  001264  C0CF  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1895  001268  0E00               	movlw	0
  1896  00126A  6E04               	movwf	___ftge@ff2,c
  1897  00126C  0E20               	movlw	32
  1898  00126E  6E05               	movwf	___ftge@ff2+1,c
  1899  001270  0E41               	movlw	65
  1900  001272  6E06               	movwf	___ftge@ff2+2,c
  1901  001274  ECF2  F013         	call	___ftge	;wreg free
  1902  001278  A0D8               	btfss	status,0,c
  1903  00127A  D003               	goto	l2854
  1904                           
  1905                           ;doprnt.c: 851: exp++;
  1906  00127C  0100               	movlb	0	; () banked
  1907  00127E  4BD1               	infsnz	printf@exp& (0+255),f,b
  1908  001280  2BD2               	incf	(printf@exp+1)& (0+255),f,b
  1909  001282                     l2854:
  1910                           
  1911                           ;doprnt.c: 852: }
  1912                           ;doprnt.c: 1112: if(prec <= 12)
  1913  001282  0100               	movlb	0	; () banked
  1914  001284  BFD7               	btfsc	(printf@prec+1)& (0+255),7,b
  1915  001286  D008               	goto	l2856
  1916  001288  0100               	movlb	0	; () banked
  1917  00128A  51D7               	movf	(printf@prec+1)& (0+255),w,b
  1918  00128C  E11D               	bnz	l2858
  1919  00128E  0E0D               	movlw	13
  1920  001290  0100               	movlb	0	; () banked
  1921  001292  5DD6               	subwf	printf@prec& (0+255),w,b
  1922  001294  B0D8               	btfsc	status,0,c
  1923  001296  D018               	goto	l2858
  1924  001298                     l2856:
  1925                           
  1926                           ; BSR set to: 0
  1927                           ;doprnt.c: 1113: fval += fround(prec);
  1928  001298  C0D3  F02E         	movff	printf@fval,___ftadd@f1
  1929  00129C  C0D4  F02F         	movff	printf@fval+1,___ftadd@f1+1
  1930  0012A0  C0D5  F030         	movff	printf@fval+2,___ftadd@f1+2
  1931  0012A4  0100               	movlb	0	; () banked
  1932  0012A6  51D6               	movf	printf@prec& (0+255),w,b
  1933  0012A8  EC5E  F00E         	call	_fround
  1934  0012AC  C024  F031         	movff	?_fround,___ftadd@f2
  1935  0012B0  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1936  0012B4  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1937  0012B8  EC81  F00F         	call	___ftadd	;wreg free
  1938  0012BC  C02E  F0D3         	movff	?___ftadd,printf@fval
  1939  0012C0  C02F  F0D4         	movff	?___ftadd+1,printf@fval+1
  1940  0012C4  C030  F0D5         	movff	?___ftadd+2,printf@fval+2
  1941  0012C8                     l2858:
  1942                           
  1943                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1944  0012C8  0100               	movlb	0	; () banked
  1945  0012CA  BFD2               	btfsc	(printf@exp+1)& (0+255),7,b
  1946  0012CC  D008               	goto	l2860
  1947  0012CE  0100               	movlb	0	; () banked
  1948  0012D0  51D2               	movf	(printf@exp+1)& (0+255),w,b
  1949  0012D2  E126               	bnz	l2866
  1950  0012D4  0E0A               	movlw	10
  1951  0012D6  0100               	movlb	0	; () banked
  1952  0012D8  5DD1               	subwf	printf@exp& (0+255),w,b
  1953  0012DA  B0D8               	btfsc	status,0,c
  1954  0012DC  D021               	goto	l2866
  1955  0012DE                     l2860:
  1956                           
  1957                           ; BSR set to: 0
  1958  0012DE  0100               	movlb	0	; () banked
  1959  0012E0  51D3               	movf	printf@fval& (0+255),w,b
  1960  0012E2  0100               	movlb	0	; () banked
  1961  0012E4  11D4               	iorwf	(printf@fval+1)& (0+255),w,b
  1962  0012E6  0100               	movlb	0	; () banked
  1963  0012E8  11D5               	iorwf	(printf@fval+2)& (0+255),w,b
  1964  0012EA  B4D8               	btfsc	status,2,c
  1965  0012EC  D05B               	goto	l2880
  1966                           
  1967                           ; BSR set to: 0
  1968  0012EE  C0D3  F02B         	movff	printf@fval,___fttol@f1
  1969  0012F2  C0D4  F02C         	movff	printf@fval+1,___fttol@f1+1
  1970  0012F6  C0D5  F02D         	movff	printf@fval+2,___fttol@f1+2
  1971  0012FA  ECFE  F011         	call	___fttol	;wreg free
  1972  0012FE  502B               	movf	?___fttol,w,c
  1973  001300  102C               	iorwf	?___fttol+1,w,c
  1974  001302  102D               	iorwf	?___fttol+2,w,c
  1975  001304  102E               	iorwf	?___fttol+3,w,c
  1976  001306  A4D8               	btfss	status,2,c
  1977  001308  D04D               	goto	l2880
  1978  00130A  0100               	movlb	0	; () banked
  1979  00130C  BFD2               	btfsc	(printf@exp+1)& (0+255),7,b
  1980  00130E  D04A               	goto	l2880
  1981  001310  0100               	movlb	0	; () banked
  1982  001312  51D2               	movf	(printf@exp+1)& (0+255),w,b
  1983  001314  E105               	bnz	l2866
  1984  001316  0E02               	movlw	2
  1985  001318  0100               	movlb	0	; () banked
  1986  00131A  5DD1               	subwf	printf@exp& (0+255),w,b
  1987  00131C  A0D8               	btfss	status,0,c
  1988  00131E  D042               	goto	l2880
  1989  001320                     l2866:
  1990                           
  1991                           ; BSR set to: 0
  1992                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1993  001320  C0CD  F001         	movff	printf@tmpval,___ftge@ff1
  1994  001324  C0CE  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1995  001328  C0CF  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1996  00132C  0E70               	movlw	112
  1997  00132E  6E04               	movwf	___ftge@ff2,c
  1998  001330  0E89               	movlw	137
  1999  001332  6E05               	movwf	___ftge@ff2+1,c
  2000  001334  0E40               	movlw	64
  2001  001336  6E06               	movwf	___ftge@ff2+2,c
  2002  001338  ECF2  F013         	call	___ftge	;wreg free
  2003  00133C  B0D8               	btfsc	status,0,c
  2004  00133E  D003               	goto	l2870
  2005                           
  2006                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2007  001340  0100               	movlb	0	; () banked
  2008  001342  0EF7               	movlw	247
  2009  001344  D002               	goto	L1
  2010  001346                     l2870:
  2011                           
  2012                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2013  001346  0100               	movlb	0	; () banked
  2014  001348  0EF8               	movlw	248
  2015  00134A                     L1:
  2016  00134A  27D1               	addwf	printf@exp& (0+255),f,b
  2017  00134C  0EFF               	movlw	255
  2018  00134E  23D2               	addwfc	(printf@exp+1)& (0+255),f,b
  2019                           
  2020                           ; BSR set to: 0
  2021                           ;doprnt.c: 1124: }
  2022                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2023                           
  2024                           ; BSR set to: 0
  2025  001350  0100               	movlb	0	; () banked
  2026  001352  51D1               	movf	printf@exp& (0+255),w,b
  2027  001354  EC66  F00C         	call	_scale
  2028  001358  C024  F0CD         	movff	?_scale,printf@tmpval
  2029  00135C  C025  F0CE         	movff	?_scale+1,printf@tmpval+1
  2030  001360  C026  F0CF         	movff	?_scale+2,printf@tmpval+2
  2031                           
  2032                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2033  001364  C0D3  F001         	movff	printf@fval,__tdiv_to_l_@f1
  2034  001368  C0D4  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2035  00136C  C0D5  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2036  001370  C0CD  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  2037  001374  C0CE  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  2038  001378  C0CF  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  2039  00137C  EC57  F010         	call	__tdiv_to_l_	;wreg free
  2040  001380  C001  F0C5         	movff	?__tdiv_to_l_,printf@val
  2041  001384  C002  F0C6         	movff	?__tdiv_to_l_+1,printf@val+1
  2042  001388  C003  F0C7         	movff	?__tdiv_to_l_+2,printf@val+2
  2043  00138C  C004  F0C8         	movff	?__tdiv_to_l_+3,printf@val+3
  2044                           
  2045                           ;doprnt.c: 1129: fval = 0.0;
  2046  001390  0E00               	movlw	0
  2047  001392  0100               	movlb	0	; () banked
  2048  001394  6FD3               	movwf	printf@fval& (0+255),b
  2049  001396  0E00               	movlw	0
  2050  001398  0100               	movlb	0	; () banked
  2051  00139A  6FD4               	movwf	(printf@fval+1)& (0+255),b
  2052  00139C  0E00               	movlw	0
  2053  00139E  0100               	movlb	0	; () banked
  2054  0013A0  6FD5               	movwf	(printf@fval+2)& (0+255),b
  2055                           
  2056                           ;doprnt.c: 1130: } else {
  2057  0013A2  D033               	goto	l2884
  2058  0013A4                     l2880:
  2059                           
  2060                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2061  0013A4  C0D3  F02B         	movff	printf@fval,___fttol@f1
  2062  0013A8  C0D4  F02C         	movff	printf@fval+1,___fttol@f1+1
  2063  0013AC  C0D5  F02D         	movff	printf@fval+2,___fttol@f1+2
  2064  0013B0  ECFE  F011         	call	___fttol	;wreg free
  2065  0013B4  C02B  F0C5         	movff	?___fttol,printf@val
  2066  0013B8  C02C  F0C6         	movff	?___fttol+1,printf@val+1
  2067  0013BC  C02D  F0C7         	movff	?___fttol+2,printf@val+2
  2068  0013C0  C02E  F0C8         	movff	?___fttol+3,printf@val+3
  2069                           
  2070                           ;doprnt.c: 1132: fval -= (double)val;
  2071  0013C4  C0D3  F03A         	movff	printf@fval,___ftsub@f1
  2072  0013C8  C0D4  F03B         	movff	printf@fval+1,___ftsub@f1+1
  2073  0013CC  C0D5  F03C         	movff	printf@fval+2,___ftsub@f1+2
  2074  0013D0  C0C5  F009         	movff	printf@val,___lltoft@c
  2075  0013D4  C0C6  F00A         	movff	printf@val+1,___lltoft@c+1
  2076  0013D8  C0C7  F00B         	movff	printf@val+2,___lltoft@c+2
  2077  0013DC  C0C8  F00C         	movff	printf@val+3,___lltoft@c+3
  2078  0013E0  EC5F  F015         	call	___lltoft	;wreg free
  2079  0013E4  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2080  0013E8  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2081  0013EC  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2082  0013F0  ECCE  F015         	call	___ftsub	;wreg free
  2083  0013F4  C03A  F0D3         	movff	?___ftsub,printf@fval
  2084  0013F8  C03B  F0D4         	movff	?___ftsub+1,printf@fval+1
  2085  0013FC  C03C  F0D5         	movff	?___ftsub+2,printf@fval+2
  2086                           
  2087                           ;doprnt.c: 1133: exp = 0;
  2088  001400  0E00               	movlw	0
  2089  001402  0100               	movlb	0	; () banked
  2090  001404  6FD2               	movwf	(printf@exp+1)& (0+255),b
  2091  001406  0E00               	movlw	0
  2092  001408  6FD1               	movwf	printf@exp& (0+255),b
  2093  00140A                     l2884:
  2094                           
  2095                           ; BSR set to: 0
  2096                           ;doprnt.c: 1134: }
  2097                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2098  00140A  0E01               	movlw	1
  2099  00140C  0100               	movlb	0	; () banked
  2100  00140E  6FD8               	movwf	printf@c& (0+255),b
  2101  001410                     l2886:
  2102                           
  2103                           ; BSR set to: 0
  2104  001410  0E0A               	movlw	10
  2105  001412  0100               	movlb	0	; () banked
  2106  001414  19D8               	xorwf	printf@c& (0+255),w,b
  2107  001416  B4D8               	btfsc	status,2,c
  2108  001418  D01E               	goto	l2898
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;doprnt.c: 1137: if(val < dpowers[c])
  2112                           
  2113                           ; BSR set to: 0
  2114                           
  2115                           ; BSR set to: 0
  2116  00141A  0100               	movlb	0	; () banked
  2117  00141C  51D8               	movf	printf@c& (0+255),w,b
  2118  00141E  0D04               	mullw	4
  2119  001420  0E01               	movlw	low _dpowers
  2120  001422  24F3               	addwf	prodl,w,c
  2121  001424  6EF6               	movwf	tblptrl,c
  2122  001426  0E0F               	movlw	high _dpowers
  2123  001428  20F4               	addwfc	prodh,w,c
  2124  00142A  6EF7               	movwf	tblptrh,c
  2125  00142C                     	if	0	;There are less than 3 active tblptr bytes
  2126  00142C                     	endif
  2127  00142C  0009               	tblrd		*+
  2128  00142E  50F5               	movf	tablat,w,c
  2129  001430  0100               	movlb	0	; () banked
  2130  001432  5DC5               	subwf	printf@val& (0+255),w,b
  2131  001434  0009               	tblrd		*+
  2132  001436  50F5               	movf	tablat,w,c
  2133  001438  0100               	movlb	0	; () banked
  2134  00143A  59C6               	subwfb	(printf@val+1)& (0+255),w,b
  2135  00143C  0009               	tblrd		*+
  2136  00143E  50F5               	movf	tablat,w,c
  2137  001440  0100               	movlb	0	; () banked
  2138  001442  59C7               	subwfb	(printf@val+2)& (0+255),w,b
  2139  001444  0009               	tblrd		*+
  2140  001446  50F5               	movf	tablat,w,c
  2141  001448  0100               	movlb	0	; () banked
  2142  00144A  59C8               	subwfb	(printf@val+3)& (0+255),w,b
  2143  00144C  A0D8               	btfss	status,0,c
  2144  00144E  D003               	goto	l2898
  2145                           
  2146                           ; BSR set to: 0
  2147                           
  2148                           ; BSR set to: 0
  2149                           
  2150                           ; BSR set to: 0
  2151                           ;doprnt.c: 1138: break;
  2152  001450  0100               	movlb	0	; () banked
  2153  001452  2BD8               	incf	printf@c& (0+255),f,b
  2154  001454  D7DD               	goto	l2886
  2155  001456                     l2898:
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;doprnt.c: 1142: width -= prec + c + exp;
  2159  001456  C0D8  F045         	movff	printf@c,??_printf
  2160  00145A  6A46               	clrf	(??_printf+1)& (0+255),c
  2161  00145C  BE45               	btfsc	??_printf& (0+255),7,c
  2162  00145E  0646               	decf	(??_printf+1)& (0+255),f,c
  2163  001460  0100               	movlb	0	; () banked
  2164  001462  51D6               	movf	printf@prec& (0+255),w,b
  2165  001464  2645               	addwf	??_printf,f,c
  2166  001466  0100               	movlb	0	; () banked
  2167  001468  51D7               	movf	(printf@prec+1)& (0+255),w,b
  2168  00146A  2246               	addwfc	??_printf+1,f,c
  2169  00146C  0100               	movlb	0	; () banked
  2170  00146E  51D1               	movf	printf@exp& (0+255),w,b
  2171  001470  2645               	addwf	??_printf,f,c
  2172  001472  0100               	movlb	0	; () banked
  2173  001474  51D2               	movf	(printf@exp+1)& (0+255),w,b
  2174  001476  2246               	addwfc	??_printf+1,f,c
  2175  001478  5045               	movf	??_printf,w,c
  2176  00147A  0100               	movlb	0	; () banked
  2177  00147C  5FCB               	subwf	printf@width& (0+255),f,b
  2178  00147E  5046               	movf	??_printf+1,w,c
  2179  001480  0100               	movlb	0	; () banked
  2180  001482  5BCC               	subwfb	(printf@width+1)& (0+255),f,b
  2181                           
  2182                           ;doprnt.c: 1143: if(
  2183                           ;doprnt.c: 1147: prec)
  2184  001484  0100               	movlb	0	; () banked
  2185  001486  51D6               	movf	printf@prec& (0+255),w,b
  2186  001488  0100               	movlb	0	; () banked
  2187  00148A  11D7               	iorwf	(printf@prec+1)& (0+255),w,b
  2188  00148C  B4D8               	btfsc	status,2,c
  2189  00148E  D004               	goto	l2902
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;doprnt.c: 1148: width--;
  2193  001490  0100               	movlb	0	; () banked
  2194  001492  07CB               	decf	printf@width& (0+255),f,b
  2195  001494  A0D8               	btfss	status,0,c
  2196  001496  07CC               	decf	(printf@width+1)& (0+255),f,b
  2197  001498                     l2902:
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;doprnt.c: 1149: if(flag & 0x03)
  2201  001498  0E03               	movlw	3
  2202  00149A  0100               	movlb	0	; () banked
  2203  00149C  15C9               	andwf	printf@flag& (0+255),w,b
  2204  00149E  6E45               	movwf	??_printf& (0+255),c
  2205  0014A0  0E00               	movlw	0
  2206  0014A2  0100               	movlb	0	; () banked
  2207  0014A4  15CA               	andwf	(printf@flag+1)& (0+255),w,b
  2208  0014A6  6E46               	movwf	(??_printf+1)& (0+255),c
  2209  0014A8  5045               	movf	??_printf,w,c
  2210  0014AA  1046               	iorwf	??_printf+1,w,c
  2211  0014AC  B4D8               	btfsc	status,2,c
  2212  0014AE  D008               	goto	l2910
  2213  0014B0  D003               	goto	l2908
  2214  0014B2                     l2906:
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;doprnt.c: 1181: (putch(' ') );
  2218  0014B2  0E20               	movlw	32
  2219  0014B4  ECC6  F016         	call	_putch
  2220  0014B8                     l2908:
  2221                           
  2222                           ;doprnt.c: 1182: width--;
  2223  0014B8  0100               	movlb	0	; () banked
  2224  0014BA  07CB               	decf	printf@width& (0+255),f,b
  2225  0014BC  A0D8               	btfss	status,0,c
  2226  0014BE  07CC               	decf	(printf@width+1)& (0+255),f,b
  2227  0014C0                     l2910:
  2228                           
  2229                           ; BSR set to: 0
  2230  0014C0  0100               	movlb	0	; () banked
  2231  0014C2  BFCC               	btfsc	(printf@width+1)& (0+255),7,b
  2232  0014C4  D007               	goto	l2912
  2233  0014C6  0100               	movlb	0	; () banked
  2234  0014C8  51CC               	movf	(printf@width+1)& (0+255),w,b
  2235  0014CA  E1F3               	bnz	l2906
  2236  0014CC  0100               	movlb	0	; () banked
  2237  0014CE  05CB               	decf	printf@width& (0+255),w,b
  2238  0014D0  B0D8               	btfsc	status,0,c
  2239  0014D2  D7EF               	goto	l2906
  2240  0014D4                     l2912:
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;doprnt.c: 1183: }
  2244                           ;doprnt.c: 1188: if(flag & 0x03)
  2245  0014D4  0E03               	movlw	3
  2246  0014D6  0100               	movlb	0	; () banked
  2247  0014D8  15C9               	andwf	printf@flag& (0+255),w,b
  2248  0014DA  6E45               	movwf	??_printf& (0+255),c
  2249  0014DC  0E00               	movlw	0
  2250  0014DE  0100               	movlb	0	; () banked
  2251  0014E0  15CA               	andwf	(printf@flag+1)& (0+255),w,b
  2252  0014E2  6E46               	movwf	(??_printf+1)& (0+255),c
  2253  0014E4  5045               	movf	??_printf,w,c
  2254  0014E6  1046               	iorwf	??_printf+1,w,c
  2255  0014E8  B4D8               	btfsc	status,2,c
  2256  0014EA  D04A               	goto	l2922
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;doprnt.c: 1190: (putch('-') );
  2260  0014EC  0E2D               	movlw	45
  2261  0014EE  ECC6  F016         	call	_putch
  2262                           
  2263                           ;doprnt.c: 1195: }
  2264                           ;doprnt.c: 1196: while(c--) {
  2265  0014F2  D046               	goto	l2922
  2266  0014F4                     l2916:
  2267                           
  2268                           ;doprnt.c: 1200: {
  2269                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2270  0014F4  C0C5  F001         	movff	printf@val,___lldiv@dividend
  2271  0014F8  C0C6  F002         	movff	printf@val+1,___lldiv@dividend+1
  2272  0014FC  C0C7  F003         	movff	printf@val+2,___lldiv@dividend+2
  2273  001500  C0C8  F004         	movff	printf@val+3,___lldiv@dividend+3
  2274  001504  0100               	movlb	0	; () banked
  2275  001506  51D8               	movf	printf@c& (0+255),w,b
  2276  001508  0D04               	mullw	4
  2277  00150A  0E01               	movlw	low _dpowers
  2278  00150C  24F3               	addwf	prodl,w,c
  2279  00150E  6EF6               	movwf	tblptrl,c
  2280  001510  0E0F               	movlw	high _dpowers
  2281  001512  20F4               	addwfc	prodh,w,c
  2282  001514  6EF7               	movwf	tblptrh,c
  2283  001516                     	if	0	;There are less than 3 active tblptr bytes
  2284  001516                     	endif
  2285  001516  0009               	tblrd		*+
  2286  001518  CFF5 F005          	movff	tablat,___lldiv@divisor
  2287  00151C  0009               	tblrd		*+
  2288  00151E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2289  001522  0009               	tblrd		*+
  2290  001524  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2291  001528  000A               	tblrd		*-
  2292  00152A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2293  00152E  EC7C  F014         	call	___lldiv	;wreg free
  2294  001532  C001  F0CD         	movff	?___lldiv,printf@tmpval
  2295  001536  C002  F0CE         	movff	?___lldiv+1,printf@tmpval+1
  2296  00153A  C003  F0CF         	movff	?___lldiv+2,printf@tmpval+2
  2297  00153E  C004  F0D0         	movff	?___lldiv+3,printf@tmpval+3
  2298                           
  2299                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2300  001542  C0CD  F001         	movff	printf@tmpval,___llmod@dividend
  2301  001546  C0CE  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  2302  00154A  C0CF  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  2303  00154E  C0D0  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  2304  001552  0E0A               	movlw	10
  2305  001554  6E05               	movwf	___llmod@divisor,c
  2306  001556  0E00               	movlw	0
  2307  001558  6E06               	movwf	___llmod@divisor+1,c
  2308  00155A  0E00               	movlw	0
  2309  00155C  6E07               	movwf	___llmod@divisor+2,c
  2310  00155E  0E00               	movlw	0
  2311  001560  6E08               	movwf	___llmod@divisor+3,c
  2312  001562  EC2C  F015         	call	___llmod	;wreg free
  2313  001566  C001  F0CD         	movff	?___llmod,printf@tmpval
  2314  00156A  C002  F0CE         	movff	?___llmod+1,printf@tmpval+1
  2315  00156E  C003  F0CF         	movff	?___llmod+2,printf@tmpval+2
  2316  001572  C004  F0D0         	movff	?___llmod+3,printf@tmpval+3
  2317                           
  2318                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2319  001576  0100               	movlb	0	; () banked
  2320  001578  51CD               	movf	printf@tmpval& (0+255),w,b
  2321  00157A  0F30               	addlw	48
  2322  00157C  ECC6  F016         	call	_putch
  2323  001580                     l2922:
  2324  001580  0100               	movlb	0	; () banked
  2325  001582  07D8               	decf	printf@c& (0+255),f,b
  2326  001584  0100               	movlb	0	; () banked
  2327  001586  29D8               	incf	printf@c& (0+255),w,b
  2328  001588  B4D8               	btfsc	status,2,c
  2329  00158A  D008               	goto	l2928
  2330  00158C  D7B3               	goto	l2916
  2331  00158E                     l2924:
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;doprnt.c: 1208: (putch('0') );
  2335  00158E  0E30               	movlw	48
  2336  001590  ECC6  F016         	call	_putch
  2337                           
  2338                           ;doprnt.c: 1209: exp--;
  2339  001594  0100               	movlb	0	; () banked
  2340  001596  07D1               	decf	printf@exp& (0+255),f,b
  2341  001598  A0D8               	btfss	status,0,c
  2342  00159A  07D2               	decf	(printf@exp+1)& (0+255),f,b
  2343  00159C                     l2928:
  2344                           
  2345                           ; BSR set to: 0
  2346  00159C  0100               	movlb	0	; () banked
  2347  00159E  BFD2               	btfsc	(printf@exp+1)& (0+255),7,b
  2348  0015A0  D007               	goto	l2930
  2349  0015A2  0100               	movlb	0	; () banked
  2350  0015A4  51D2               	movf	(printf@exp+1)& (0+255),w,b
  2351  0015A6  E1F3               	bnz	l2924
  2352  0015A8  0100               	movlb	0	; () banked
  2353  0015AA  05D1               	decf	printf@exp& (0+255),w,b
  2354  0015AC  B0D8               	btfsc	status,0,c
  2355  0015AE  D7EF               	goto	l2924
  2356  0015B0                     l2930:
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;doprnt.c: 1210: }
  2360                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2361  0015B0  0100               	movlb	0	; () banked
  2362  0015B2  BFD7               	btfsc	(printf@prec+1)& (0+255),7,b
  2363  0015B4  D00C               	goto	l304
  2364  0015B6  0100               	movlb	0	; () banked
  2365  0015B8  51D7               	movf	(printf@prec+1)& (0+255),w,b
  2366  0015BA  E105               	bnz	u3070
  2367  0015BC  0E09               	movlw	9
  2368  0015BE  0100               	movlb	0	; () banked
  2369  0015C0  5DD6               	subwf	printf@prec& (0+255),w,b
  2370  0015C2  A0D8               	btfss	status,0,c
  2371  0015C4  D004               	goto	l304
  2372  0015C6                     u3070:
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2376  0015C6  0E08               	movlw	8
  2377  0015C8  0100               	movlb	0	; () banked
  2378  0015CA  6FD8               	movwf	printf@c& (0+255),b
  2379  0015CC  D002               	goto	l2934
  2380  0015CE                     l304:
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;doprnt.c: 1213: else
  2384                           ;doprnt.c: 1214: c = prec;
  2385  0015CE  C0D6  F0D8         	movff	printf@prec,printf@c
  2386  0015D2                     l2934:
  2387                           
  2388                           ; BSR set to: 0
  2389                           ;doprnt.c: 1215: prec -= c;
  2390  0015D2  0100               	movlb	0	; () banked
  2391  0015D4  51D8               	movf	printf@c& (0+255),w,b
  2392  0015D6  0100               	movlb	0	; () banked
  2393  0015D8  5FD6               	subwf	printf@prec& (0+255),f,b
  2394  0015DA  0E00               	movlw	0
  2395  0015DC  0100               	movlb	0	; () banked
  2396  0015DE  BFD8               	btfsc	printf@c& (0+255),7,b
  2397  0015E0  0EFF               	movlw	255
  2398  0015E2  0100               	movlb	0	; () banked
  2399  0015E4  5BD7               	subwfb	(printf@prec+1)& (0+255),f,b
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;doprnt.c: 1219: if(c)
  2403  0015E6  0100               	movlb	0	; () banked
  2404  0015E8  51D8               	movf	printf@c& (0+255),w,b
  2405  0015EA  0100               	movlb	0	; () banked
  2406  0015EC  B4D8               	btfsc	status,2,c
  2407  0015EE  D003               	goto	l2940
  2408                           
  2409                           ; BSR set to: 0
  2410                           ;doprnt.c: 1221: (putch('.') );
  2411  0015F0  0E2E               	movlw	46
  2412  0015F2  ECC6  F016         	call	_putch
  2413  0015F6                     l2940:
  2414                           
  2415                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2416  0015F6  0100               	movlb	0	; () banked
  2417  0015F8  51D8               	movf	printf@c& (0+255),w,b
  2418  0015FA  EC66  F00C         	call	_scale
  2419  0015FE  C024  F0C0         	movff	?_scale,_printf$1795
  2420  001602  C025  F0C1         	movff	?_scale+1,_printf$1795+1
  2421  001606  C026  F0C2         	movff	?_scale+2,_printf$1795+2
  2422                           
  2423                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2424  00160A  C0D3  F018         	movff	printf@fval,___ftmul@f2
  2425  00160E  C0D4  F019         	movff	printf@fval+1,___ftmul@f2+1
  2426  001612  C0D5  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2427  001616  C0C0  F015         	movff	_printf$1795,___ftmul@f1
  2428  00161A  C0C1  F016         	movff	_printf$1795+1,___ftmul@f1+1
  2429  00161E  C0C2  F017         	movff	_printf$1795+2,___ftmul@f1+2
  2430  001622  EC84  F011         	call	___ftmul	;wreg free
  2431  001626  C015  F02B         	movff	?___ftmul,___fttol@f1
  2432  00162A  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2433  00162E  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2434  001632  ECFE  F011         	call	___fttol	;wreg free
  2435  001636  C02B  F0C5         	movff	?___fttol,printf@val
  2436  00163A  C02C  F0C6         	movff	?___fttol+1,printf@val+1
  2437  00163E  C02D  F0C7         	movff	?___fttol+2,printf@val+2
  2438  001642  C02E  F0C8         	movff	?___fttol+3,printf@val+3
  2439                           
  2440                           ;doprnt.c: 1228: while(c--) {
  2441  001646  D06D               	goto	l2950
  2442  001648                     l2944:
  2443                           
  2444                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2445  001648  C0C5  F001         	movff	printf@val,___lldiv@dividend
  2446  00164C  C0C6  F002         	movff	printf@val+1,___lldiv@dividend+1
  2447  001650  C0C7  F003         	movff	printf@val+2,___lldiv@dividend+2
  2448  001654  C0C8  F004         	movff	printf@val+3,___lldiv@dividend+3
  2449  001658  0100               	movlb	0	; () banked
  2450  00165A  51D8               	movf	printf@c& (0+255),w,b
  2451  00165C  0D04               	mullw	4
  2452  00165E  0E01               	movlw	low _dpowers
  2453  001660  24F3               	addwf	prodl,w,c
  2454  001662  6EF6               	movwf	tblptrl,c
  2455  001664  0E0F               	movlw	high _dpowers
  2456  001666  20F4               	addwfc	prodh,w,c
  2457  001668  6EF7               	movwf	tblptrh,c
  2458  00166A                     	if	0	;There are less than 3 active tblptr bytes
  2459  00166A                     	endif
  2460  00166A  0009               	tblrd		*+
  2461  00166C  CFF5 F005          	movff	tablat,___lldiv@divisor
  2462  001670  0009               	tblrd		*+
  2463  001672  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2464  001676  0009               	tblrd		*+
  2465  001678  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2466  00167C  000A               	tblrd		*-
  2467  00167E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2468  001682  EC7C  F014         	call	___lldiv	;wreg free
  2469  001686  C001  F0CD         	movff	?___lldiv,printf@tmpval
  2470  00168A  C002  F0CE         	movff	?___lldiv+1,printf@tmpval+1
  2471  00168E  C003  F0CF         	movff	?___lldiv+2,printf@tmpval+2
  2472  001692  C004  F0D0         	movff	?___lldiv+3,printf@tmpval+3
  2473                           
  2474                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2475  001696  C0CD  F001         	movff	printf@tmpval,___llmod@dividend
  2476  00169A  C0CE  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  2477  00169E  C0CF  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  2478  0016A2  C0D0  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  2479  0016A6  0E0A               	movlw	10
  2480  0016A8  6E05               	movwf	___llmod@divisor,c
  2481  0016AA  0E00               	movlw	0
  2482  0016AC  6E06               	movwf	___llmod@divisor+1,c
  2483  0016AE  0E00               	movlw	0
  2484  0016B0  6E07               	movwf	___llmod@divisor+2,c
  2485  0016B2  0E00               	movlw	0
  2486  0016B4  6E08               	movwf	___llmod@divisor+3,c
  2487  0016B6  EC2C  F015         	call	___llmod	;wreg free
  2488  0016BA  C001  F0CD         	movff	?___llmod,printf@tmpval
  2489  0016BE  C002  F0CE         	movff	?___llmod+1,printf@tmpval+1
  2490  0016C2  C003  F0CF         	movff	?___llmod+2,printf@tmpval+2
  2491  0016C6  C004  F0D0         	movff	?___llmod+3,printf@tmpval+3
  2492                           
  2493                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2494  0016CA  0100               	movlb	0	; () banked
  2495  0016CC  51CD               	movf	printf@tmpval& (0+255),w,b
  2496  0016CE  0F30               	addlw	48
  2497  0016D0  ECC6  F016         	call	_putch
  2498                           
  2499                           ;doprnt.c: 1232: val %= dpowers[c];
  2500  0016D4  C0C5  F001         	movff	printf@val,___llmod@dividend
  2501  0016D8  C0C6  F002         	movff	printf@val+1,___llmod@dividend+1
  2502  0016DC  C0C7  F003         	movff	printf@val+2,___llmod@dividend+2
  2503  0016E0  C0C8  F004         	movff	printf@val+3,___llmod@dividend+3
  2504  0016E4  0100               	movlb	0	; () banked
  2505  0016E6  51D8               	movf	printf@c& (0+255),w,b
  2506  0016E8  0D04               	mullw	4
  2507  0016EA  0E01               	movlw	low _dpowers
  2508  0016EC  24F3               	addwf	prodl,w,c
  2509  0016EE  6EF6               	movwf	tblptrl,c
  2510  0016F0  0E0F               	movlw	high _dpowers
  2511  0016F2  20F4               	addwfc	prodh,w,c
  2512  0016F4  6EF7               	movwf	tblptrh,c
  2513  0016F6                     	if	0	;There are less than 3 active tblptr bytes
  2514  0016F6                     	endif
  2515  0016F6  0009               	tblrd		*+
  2516  0016F8  CFF5 F005          	movff	tablat,___llmod@divisor
  2517  0016FC  0009               	tblrd		*+
  2518  0016FE  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2519  001702  0009               	tblrd		*+
  2520  001704  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2521  001708  000A               	tblrd		*-
  2522  00170A  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2523  00170E  EC2C  F015         	call	___llmod	;wreg free
  2524  001712  C001  F0C5         	movff	?___llmod,printf@val
  2525  001716  C002  F0C6         	movff	?___llmod+1,printf@val+1
  2526  00171A  C003  F0C7         	movff	?___llmod+2,printf@val+2
  2527  00171E  C004  F0C8         	movff	?___llmod+3,printf@val+3
  2528  001722                     l2950:
  2529  001722  0100               	movlb	0	; () banked
  2530  001724  07D8               	decf	printf@c& (0+255),f,b
  2531  001726  0100               	movlb	0	; () banked
  2532  001728  29D8               	incf	printf@c& (0+255),w,b
  2533  00172A  B4D8               	btfsc	status,2,c
  2534  00172C  D008               	goto	l2956
  2535  00172E  D78C               	goto	l2944
  2536  001730                     l2952:
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;doprnt.c: 1236: (putch('0') );
  2540  001730  0E30               	movlw	48
  2541  001732  ECC6  F016         	call	_putch
  2542                           
  2543                           ;doprnt.c: 1237: prec--;
  2544  001736  0100               	movlb	0	; () banked
  2545  001738  07D6               	decf	printf@prec& (0+255),f,b
  2546  00173A  A0D8               	btfss	status,0,c
  2547  00173C  07D7               	decf	(printf@prec+1)& (0+255),f,b
  2548  00173E                     l2956:
  2549                           
  2550                           ; BSR set to: 0
  2551  00173E  0100               	movlb	0	; () banked
  2552  001740  51D6               	movf	printf@prec& (0+255),w,b
  2553  001742  0100               	movlb	0	; () banked
  2554  001744  11D7               	iorwf	(printf@prec+1)& (0+255),w,b
  2555  001746  B4D8               	btfsc	status,2,c
  2556  001748  D0B2               	goto	l3002
  2557  00174A  D7F2               	goto	l2952
  2558  00174C                     l2958:
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;doprnt.c: 1246: }
  2562                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2563  00174C  0100               	movlb	0	; () banked
  2564  00174E  51D6               	movf	printf@prec& (0+255),w,b
  2565  001750  0100               	movlb	0	; () banked
  2566  001752  11D7               	iorwf	(printf@prec+1)& (0+255),w,b
  2567  001754  A4D8               	btfss	status,2,c
  2568  001756  D00D               	goto	l2964
  2569                           
  2570                           ; BSR set to: 0
  2571  001758  0100               	movlb	0	; () banked
  2572  00175A  51C5               	movf	printf@val& (0+255),w,b
  2573  00175C  0100               	movlb	0	; () banked
  2574  00175E  11C6               	iorwf	(printf@val+1)& (0+255),w,b
  2575  001760  0100               	movlb	0	; () banked
  2576  001762  11C7               	iorwf	(printf@val+2)& (0+255),w,b
  2577  001764  0100               	movlb	0	; () banked
  2578  001766  11C8               	iorwf	(printf@val+3)& (0+255),w,b
  2579  001768  A4D8               	btfss	status,2,c
  2580  00176A  D003               	goto	l2964
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;doprnt.c: 1291: prec++;
  2584  00176C  0100               	movlb	0	; () banked
  2585  00176E  4BD6               	infsnz	printf@prec& (0+255),f,b
  2586  001770  2BD7               	incf	(printf@prec+1)& (0+255),f,b
  2587  001772                     l2964:
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;doprnt.c: 1339: if(c < prec)
  2591  001772  0E80               	movlw	128
  2592  001774  0100               	movlb	0	; () banked
  2593  001776  BFD8               	btfsc	printf@c& (0+255),7,b
  2594  001778  0E7F               	movlw	127
  2595  00177A  6E45               	movwf	??_printf& (0+255),c
  2596  00177C  0100               	movlb	0	; () banked
  2597  00177E  51D6               	movf	printf@prec& (0+255),w,b
  2598  001780  0100               	movlb	0	; () banked
  2599  001782  5DD8               	subwf	printf@c& (0+255),w,b
  2600  001784  0100               	movlb	0	; () banked
  2601  001786  51D7               	movf	(printf@prec+1)& (0+255),w,b
  2602  001788  0A80               	xorlw	128
  2603  00178A  5845               	subwfb	??_printf& (0+255),w,c
  2604  00178C  B0D8               	btfsc	status,0,c
  2605  00178E  D003               	goto	l2968
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;doprnt.c: 1340: c = prec;
  2609  001790  C0D6  F0D8         	movff	printf@prec,printf@c
  2610  001794  D016               	goto	l2972
  2611  001796                     l2968:
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;doprnt.c: 1341: else if(prec < c)
  2615  001796  0100               	movlb	0	; () banked
  2616  001798  51D7               	movf	(printf@prec+1)& (0+255),w,b
  2617  00179A  0A80               	xorlw	128
  2618  00179C  6E45               	movwf	??_printf& (0+255),c
  2619  00179E  0100               	movlb	0	; () banked
  2620  0017A0  51D8               	movf	printf@c& (0+255),w,b
  2621  0017A2  0100               	movlb	0	; () banked
  2622  0017A4  5DD6               	subwf	printf@prec& (0+255),w,b
  2623  0017A6  0E80               	movlw	128
  2624  0017A8  0100               	movlb	0	; () banked
  2625  0017AA  BFD8               	btfsc	printf@c& (0+255),7,b
  2626  0017AC  0E7F               	movlw	127
  2627  0017AE  5845               	subwfb	??_printf& (0+255),w,c
  2628  0017B0  B0D8               	btfsc	status,0,c
  2629  0017B2  D007               	goto	l2972
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;doprnt.c: 1342: prec = c;
  2633  0017B4  0100               	movlb	0	; () banked
  2634  0017B6  51D8               	movf	printf@c& (0+255),w,b
  2635  0017B8  0100               	movlb	0	; () banked
  2636  0017BA  6FD6               	movwf	printf@prec& (0+255),b
  2637  0017BC  6BD7               	clrf	(printf@prec+1)& (0+255),b
  2638  0017BE  BFD6               	btfsc	printf@prec& (0+255),7,b
  2639  0017C0  07D7               	decf	(printf@prec+1)& (0+255),f,b
  2640  0017C2                     l2972:
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2644  0017C2  0100               	movlb	0	; () banked
  2645  0017C4  51CB               	movf	printf@width& (0+255),w,b
  2646  0017C6  0100               	movlb	0	; () banked
  2647  0017C8  11CC               	iorwf	(printf@width+1)& (0+255),w,b
  2648  0017CA  B4D8               	btfsc	status,2,c
  2649  0017CC  D010               	goto	l2978
  2650                           
  2651                           ; BSR set to: 0
  2652  0017CE  0E03               	movlw	3
  2653  0017D0  0100               	movlb	0	; () banked
  2654  0017D2  15C9               	andwf	printf@flag& (0+255),w,b
  2655  0017D4  6E45               	movwf	??_printf& (0+255),c
  2656  0017D6  0E00               	movlw	0
  2657  0017D8  0100               	movlb	0	; () banked
  2658  0017DA  15CA               	andwf	(printf@flag+1)& (0+255),w,b
  2659  0017DC  6E46               	movwf	(??_printf+1)& (0+255),c
  2660  0017DE  5045               	movf	??_printf,w,c
  2661  0017E0  1046               	iorwf	??_printf+1,w,c
  2662  0017E2  B4D8               	btfsc	status,2,c
  2663  0017E4  D004               	goto	l2978
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;doprnt.c: 1346: width--;
  2667  0017E6  0100               	movlb	0	; () banked
  2668  0017E8  07CB               	decf	printf@width& (0+255),f,b
  2669  0017EA  A0D8               	btfss	status,0,c
  2670  0017EC  07CC               	decf	(printf@width+1)& (0+255),f,b
  2671  0017EE                     l2978:
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2675  0017EE  0100               	movlb	0	; () banked
  2676  0017F0  ADCA               	btfss	(printf@flag+1)& (0+255),6,b
  2677  0017F2  D01C               	goto	l2986
  2678                           
  2679                           ; BSR set to: 0
  2680                           ;doprnt.c: 1349: if(width > prec)
  2681  0017F4  0100               	movlb	0	; () banked
  2682  0017F6  51CB               	movf	printf@width& (0+255),w,b
  2683  0017F8  0100               	movlb	0	; () banked
  2684  0017FA  5DD6               	subwf	printf@prec& (0+255),w,b
  2685  0017FC  0100               	movlb	0	; () banked
  2686  0017FE  51D7               	movf	(printf@prec+1)& (0+255),w,b
  2687  001800  0A80               	xorlw	128
  2688  001802  6E45               	movwf	??_printf& (0+255),c
  2689  001804  0100               	movlb	0	; () banked
  2690  001806  51CC               	movf	(printf@width+1)& (0+255),w,b
  2691  001808  0A80               	xorlw	128
  2692  00180A  5845               	subwfb	??_printf& (0+255),w,c
  2693  00180C  B0D8               	btfsc	status,0,c
  2694  00180E  D009               	goto	l2984
  2695                           
  2696                           ; BSR set to: 0
  2697                           ;doprnt.c: 1350: width -= prec;
  2698  001810  0100               	movlb	0	; () banked
  2699  001812  51D6               	movf	printf@prec& (0+255),w,b
  2700  001814  0100               	movlb	0	; () banked
  2701  001816  5FCB               	subwf	printf@width& (0+255),f,b
  2702  001818  0100               	movlb	0	; () banked
  2703  00181A  51D7               	movf	(printf@prec+1)& (0+255),w,b
  2704  00181C  0100               	movlb	0	; () banked
  2705  00181E  5BCC               	subwfb	(printf@width+1)& (0+255),f,b
  2706  001820  D005               	goto	l2986
  2707  001822                     l2984:
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;doprnt.c: 1351: else
  2711                           ;doprnt.c: 1352: width = 0;
  2712  001822  0E00               	movlw	0
  2713  001824  0100               	movlb	0	; () banked
  2714  001826  6FCC               	movwf	(printf@width+1)& (0+255),b
  2715  001828  0E00               	movlw	0
  2716  00182A  6FCB               	movwf	printf@width& (0+255),b
  2717  00182C                     l2986:
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;doprnt.c: 1353: }
  2721                           ;doprnt.c: 1381: if(width > c)
  2722  00182C  0E80               	movlw	128
  2723  00182E  0100               	movlb	0	; () banked
  2724  001830  BFD8               	btfsc	printf@c& (0+255),7,b
  2725  001832  0E7F               	movlw	127
  2726  001834  6E45               	movwf	??_printf& (0+255),c
  2727  001836  0100               	movlb	0	; () banked
  2728  001838  51CB               	movf	printf@width& (0+255),w,b
  2729  00183A  0100               	movlb	0	; () banked
  2730  00183C  5DD8               	subwf	printf@c& (0+255),w,b
  2731  00183E  0100               	movlb	0	; () banked
  2732  001840  51CC               	movf	(printf@width+1)& (0+255),w,b
  2733  001842  0A80               	xorlw	128
  2734  001844  5845               	subwfb	??_printf& (0+255),w,c
  2735  001846  B0D8               	btfsc	status,0,c
  2736  001848  D00B               	goto	l2990
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;doprnt.c: 1382: width -= c;
  2740  00184A  0100               	movlb	0	; () banked
  2741  00184C  51D8               	movf	printf@c& (0+255),w,b
  2742  00184E  0100               	movlb	0	; () banked
  2743  001850  5FCB               	subwf	printf@width& (0+255),f,b
  2744  001852  0E00               	movlw	0
  2745  001854  0100               	movlb	0	; () banked
  2746  001856  BFD8               	btfsc	printf@c& (0+255),7,b
  2747  001858  0EFF               	movlw	255
  2748  00185A  0100               	movlb	0	; () banked
  2749  00185C  5BCC               	subwfb	(printf@width+1)& (0+255),f,b
  2750  00185E  D005               	goto	l2992
  2751  001860                     l2990:
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;doprnt.c: 1383: else
  2755                           ;doprnt.c: 1384: width = 0;
  2756  001860  0E00               	movlw	0
  2757  001862  0100               	movlb	0	; () banked
  2758  001864  6FCC               	movwf	(printf@width+1)& (0+255),b
  2759  001866  0E00               	movlw	0
  2760  001868  6FCB               	movwf	printf@width& (0+255),b
  2761  00186A                     l2992:
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;doprnt.c: 1422: {
  2765                           ;doprnt.c: 1424: if(width
  2766                           ;doprnt.c: 1428: )
  2767  00186A  0100               	movlb	0	; () banked
  2768  00186C  51CB               	movf	printf@width& (0+255),w,b
  2769  00186E  0100               	movlb	0	; () banked
  2770  001870  11CC               	iorwf	(printf@width+1)& (0+255),w,b
  2771  001872  B4D8               	btfsc	status,2,c
  2772  001874  D00D               	goto	l2998
  2773  001876                     l2994:
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;doprnt.c: 1430: (putch(' ') );
  2777  001876  0E20               	movlw	32
  2778  001878  ECC6  F016         	call	_putch
  2779                           
  2780                           ;doprnt.c: 1431: while(--width);
  2781  00187C  0100               	movlb	0	; () banked
  2782  00187E  07CB               	decf	printf@width& (0+255),f,b
  2783  001880  A0D8               	btfss	status,0,c
  2784  001882  07CC               	decf	(printf@width+1)& (0+255),f,b
  2785  001884  0100               	movlb	0	; () banked
  2786  001886  51CB               	movf	printf@width& (0+255),w,b
  2787  001888  0100               	movlb	0	; () banked
  2788  00188A  11CC               	iorwf	(printf@width+1)& (0+255),w,b
  2789  00188C  A4D8               	btfss	status,2,c
  2790  00188E  D7F3               	goto	l2994
  2791  001890                     l2998:
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;doprnt.c: 1438: if(flag & 0x03)
  2795  001890  0E03               	movlw	3
  2796  001892  0100               	movlb	0	; () banked
  2797  001894  15C9               	andwf	printf@flag& (0+255),w,b
  2798  001896  6E45               	movwf	??_printf& (0+255),c
  2799  001898  0E00               	movlw	0
  2800  00189A  0100               	movlb	0	; () banked
  2801  00189C  15CA               	andwf	(printf@flag+1)& (0+255),w,b
  2802  00189E  6E46               	movwf	(??_printf+1)& (0+255),c
  2803  0018A0  5045               	movf	??_printf,w,c
  2804  0018A2  1046               	iorwf	??_printf+1,w,c
  2805  0018A4  B4D8               	btfsc	status,2,c
  2806  0018A6  D003               	goto	l3002
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;doprnt.c: 1439: (putch('-') );
  2810  0018A8  0E2D               	movlw	45
  2811  0018AA  ECC6  F016         	call	_putch
  2812  0018AE                     l3002:
  2813  0018AE  C040  FFF6         	movff	printf@f,tblptrl
  2814  0018B2  C041  FFF7         	movff	printf@f+1,tblptrh
  2815  0018B6  4A40               	infsnz	printf@f,f,c
  2816  0018B8  2A41               	incf	printf@f+1,f,c
  2817  0018BA                     	if	0	;tblptru may be non-zero
  2818  0018BA                     	endif
  2819  0018BA                     	if	0	;tblptru may be non-zero
  2820  0018BA                     	endif
  2821  0018BA  0008               	tblrd		*
  2822  0018BC  CFF5 F0D8          	movff	tablat,printf@c
  2823  0018C0  0100               	movlb	0	; () banked
  2824  0018C2  51D8               	movf	printf@c& (0+255),w,b
  2825  0018C4  B4D8               	btfsc	status,2,c
  2826  0018C6  0012               	return	
  2827  0018C8  EFCD  F007         	goto	l2770
  2828  0018CC                     __end_of_printf:
  2829                           	opt stack 0
  2830                           tblptru	equ	0xFF8
  2831                           tblptrh	equ	0xFF7
  2832                           tblptrl	equ	0xFF6
  2833                           tablat	equ	0xFF5
  2834                           prodh	equ	0xFF4
  2835                           prodl	equ	0xFF3
  2836                           postinc0	equ	0xFEE
  2837                           wreg	equ	0xFE8
  2838                           postdec1	equ	0xFE5
  2839                           fsr1l	equ	0xFE1
  2840                           indf2	equ	0xFDF
  2841                           postinc2	equ	0xFDE
  2842                           postdec2	equ	0xFDD
  2843                           fsr2h	equ	0xFDA
  2844                           fsr2l	equ	0xFD9
  2845                           status	equ	0xFD8
  2846                           
  2847 ;; *************** function _scale *****************
  2848 ;; Defined at:
  2849 ;;		line 425 in file "/opt/microchip/xc8/v1.42/sources/common/doprnt.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;  scl             1    wreg     char 
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;  scl             1   41[COMRAM] char 
  2854 ;; Return value:  Size  Location     Type
  2855 ;;                  3   35[COMRAM] char 
  2856 ;; Registers used:
  2857 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2863 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2864 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2866 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2867 ;;Total ram usage:        7 bytes
  2868 ;; Hardware stack levels used:    1
  2869 ;; Hardware stack levels required when called:    2
  2870 ;; This function calls:
  2871 ;;		___awdiv
  2872 ;;		___awmod
  2873 ;;		___ftmul
  2874 ;;		___wmul
  2875 ;; This function is called by:
  2876 ;;		_printf
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           	psect	text6
  2881  0018CC                     __ptext6:
  2882                           	opt stack 0
  2883  0018CC                     _scale:
  2884                           	opt stack 26
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;incstack = 0
  2888                           ;scale@scl stored from wreg
  2889  0018CC  6E2A               	movwf	scale@scl,c
  2890                           
  2891                           ;doprnt.c: 428: if(scl < 0) {
  2892  0018CE  AE2A               	btfss	scale@scl,7,c
  2893  0018D0  D0FB               	goto	l2484
  2894                           
  2895                           ;doprnt.c: 429: scl = -scl;
  2896  0018D2  6C2A               	negf	scale@scl,c
  2897                           
  2898                           ;doprnt.c: 430: if(scl>=110)
  2899  0018D4  502A               	movf	scale@scl,w,c
  2900  0018D6  0A80               	xorlw	128
  2901  0018D8  0F12               	addlw	-238
  2902  0018DA  A0D8               	btfss	status,0,c
  2903  0018DC  D091               	goto	l2474
  2904                           
  2905                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2906  0018DE  0E00               	movlw	0
  2907  0018E0  6E12               	movwf	___wmul@multiplicand+1,c
  2908  0018E2  0E03               	movlw	3
  2909  0018E4  6E11               	movwf	___wmul@multiplicand,c
  2910  0018E6  0E00               	movlw	0
  2911  0018E8  6E0A               	movwf	___awdiv@divisor+1,c
  2912  0018EA  0E0A               	movlw	10
  2913  0018EC  6E09               	movwf	___awdiv@divisor,c
  2914  0018EE  0E00               	movlw	0
  2915  0018F0  6E04               	movwf	___awmod@divisor+1,c
  2916  0018F2  0E64               	movlw	100
  2917  0018F4  6E03               	movwf	___awmod@divisor,c
  2918  0018F6  502A               	movf	scale@scl,w,c
  2919  0018F8  6E01               	movwf	___awmod@dividend,c
  2920  0018FA  6A02               	clrf	___awmod@dividend+1,c
  2921  0018FC  BE01               	btfsc	___awmod@dividend,7,c
  2922  0018FE  0602               	decf	___awmod@dividend+1,f,c
  2923  001900  ECBD  F014         	call	___awmod	;wreg free
  2924  001904  C001  F007         	movff	?___awmod,___awdiv@dividend
  2925  001908  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2926  00190C  EC3A  F014         	call	___awdiv	;wreg free
  2927  001910  0E09               	movlw	9
  2928  001912  2407               	addwf	?___awdiv,w,c
  2929  001914  6E0F               	movwf	___wmul@multiplier,c
  2930  001916  0E00               	movlw	0
  2931  001918  2008               	addwfc	?___awdiv+1,w,c
  2932  00191A  6E10               	movwf	___wmul@multiplier+1,c
  2933  00191C  EC64  F016         	call	___wmul	;wreg free
  2934  001920  0E50               	movlw	low __npowers_
  2935  001922  240F               	addwf	?___wmul,w,c
  2936  001924  6EF6               	movwf	tblptrl,c
  2937  001926  0E0F               	movlw	high __npowers_
  2938  001928  2010               	addwfc	?___wmul+1,w,c
  2939  00192A  6EF7               	movwf	tblptrh,c
  2940  00192C                     	if	0	;There are less than 3 active tblptr bytes
  2941  00192C                     	endif
  2942  00192C  0009               	tblrd		*+
  2943  00192E  CFF5 F018          	movff	tablat,___ftmul@f2
  2944  001932  0009               	tblrd		*+
  2945  001934  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2946  001938  000A               	tblrd		*-
  2947  00193A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2948  00193E  0E00               	movlw	0
  2949  001940  6E0A               	movwf	___awdiv@divisor+1,c
  2950  001942  0E64               	movlw	100
  2951  001944  6E09               	movwf	___awdiv@divisor,c
  2952  001946  502A               	movf	scale@scl,w,c
  2953  001948  6E07               	movwf	___awdiv@dividend,c
  2954  00194A  6A08               	clrf	___awdiv@dividend+1,c
  2955  00194C  BE07               	btfsc	___awdiv@dividend,7,c
  2956  00194E  0608               	decf	___awdiv@dividend+1,f,c
  2957  001950  EC3A  F014         	call	___awdiv	;wreg free
  2958  001954  0E12               	movlw	18
  2959  001956  2407               	addwf	?___awdiv,w,c
  2960  001958  6E0F               	movwf	___wmul@multiplier,c
  2961  00195A  0E00               	movlw	0
  2962  00195C  2008               	addwfc	?___awdiv+1,w,c
  2963  00195E  6E10               	movwf	___wmul@multiplier+1,c
  2964  001960  0E00               	movlw	0
  2965  001962  6E12               	movwf	___wmul@multiplicand+1,c
  2966  001964  0E03               	movlw	3
  2967  001966  6E11               	movwf	___wmul@multiplicand,c
  2968  001968  EC64  F016         	call	___wmul	;wreg free
  2969  00196C  0E50               	movlw	low __npowers_
  2970  00196E  240F               	addwf	?___wmul,w,c
  2971  001970  6EF6               	movwf	tblptrl,c
  2972  001972  0E0F               	movlw	high __npowers_
  2973  001974  2010               	addwfc	?___wmul+1,w,c
  2974  001976  6EF7               	movwf	tblptrh,c
  2975  001978                     	if	0	;There are less than 3 active tblptr bytes
  2976  001978                     	endif
  2977  001978  0009               	tblrd		*+
  2978  00197A  CFF5 F015          	movff	tablat,___ftmul@f1
  2979  00197E  0009               	tblrd		*+
  2980  001980  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2981  001984  000A               	tblrd		*-
  2982  001986  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2983  00198A  EC84  F011         	call	___ftmul	;wreg free
  2984  00198E  C015  F027         	movff	?___ftmul,_scale$1794
  2985  001992  C016  F028         	movff	?___ftmul+1,_scale$1794+1
  2986  001996  C017  F029         	movff	?___ftmul+2,_scale$1794+2
  2987                           
  2988                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2989  00199A  C027  F015         	movff	_scale$1794,___ftmul@f1
  2990  00199E  C028  F016         	movff	_scale$1794+1,___ftmul@f1+1
  2991  0019A2  C029  F017         	movff	_scale$1794+2,___ftmul@f1+2
  2992  0019A6  0E00               	movlw	0
  2993  0019A8  6E12               	movwf	___wmul@multiplicand+1,c
  2994  0019AA  0E03               	movlw	3
  2995  0019AC  6E11               	movwf	___wmul@multiplicand,c
  2996  0019AE  0E00               	movlw	0
  2997  0019B0  6E04               	movwf	___awmod@divisor+1,c
  2998  0019B2  0E0A               	movlw	10
  2999  0019B4  6E03               	movwf	___awmod@divisor,c
  3000  0019B6  502A               	movf	scale@scl,w,c
  3001  0019B8  6E01               	movwf	___awmod@dividend,c
  3002  0019BA  6A02               	clrf	___awmod@dividend+1,c
  3003  0019BC  BE01               	btfsc	___awmod@dividend,7,c
  3004  0019BE  0602               	decf	___awmod@dividend+1,f,c
  3005  0019C0  ECBD  F014         	call	___awmod	;wreg free
  3006  0019C4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3007  0019C8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3008  0019CC  EC64  F016         	call	___wmul	;wreg free
  3009  0019D0  0E50               	movlw	low __npowers_
  3010  0019D2  240F               	addwf	?___wmul,w,c
  3011  0019D4  6EF6               	movwf	tblptrl,c
  3012  0019D6  0E0F               	movlw	high __npowers_
  3013  0019D8  2010               	addwfc	?___wmul+1,w,c
  3014  0019DA  6EF7               	movwf	tblptrh,c
  3015  0019DC                     	if	0	;There are less than 3 active tblptr bytes
  3016  0019DC                     	endif
  3017  0019DC  0009               	tblrd		*+
  3018  0019DE  CFF5 F018          	movff	tablat,___ftmul@f2
  3019  0019E2  0009               	tblrd		*+
  3020  0019E4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3021  0019E8  000A               	tblrd		*-
  3022  0019EA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3023  0019EE  EC84  F011         	call	___ftmul	;wreg free
  3024  0019F2  C015  F024         	movff	?___ftmul,?_scale
  3025  0019F6  C016  F025         	movff	?___ftmul+1,?_scale+1
  3026  0019FA  C017  F026         	movff	?___ftmul+2,?_scale+2
  3027  0019FE  0012               	return	
  3028  001A00                     l2474:
  3029                           
  3030                           ;doprnt.c: 432: else if(scl > 10)
  3031  001A00  502A               	movf	scale@scl,w,c
  3032  001A02  0A80               	xorlw	128
  3033  001A04  0F75               	addlw	-139
  3034  001A06  A0D8               	btfss	status,0,c
  3035  001A08  D04D               	goto	l2480
  3036                           
  3037                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3038  001A0A  0E00               	movlw	0
  3039  001A0C  6E0A               	movwf	___awdiv@divisor+1,c
  3040  001A0E  0E0A               	movlw	10
  3041  001A10  6E09               	movwf	___awdiv@divisor,c
  3042  001A12  502A               	movf	scale@scl,w,c
  3043  001A14  6E07               	movwf	___awdiv@dividend,c
  3044  001A16  6A08               	clrf	___awdiv@dividend+1,c
  3045  001A18  BE07               	btfsc	___awdiv@dividend,7,c
  3046  001A1A  0608               	decf	___awdiv@dividend+1,f,c
  3047  001A1C  EC3A  F014         	call	___awdiv	;wreg free
  3048  001A20  0E09               	movlw	9
  3049  001A22  2407               	addwf	?___awdiv,w,c
  3050  001A24  6E0F               	movwf	___wmul@multiplier,c
  3051  001A26  0E00               	movlw	0
  3052  001A28  2008               	addwfc	?___awdiv+1,w,c
  3053  001A2A  6E10               	movwf	___wmul@multiplier+1,c
  3054  001A2C  0E00               	movlw	0
  3055  001A2E  6E12               	movwf	___wmul@multiplicand+1,c
  3056  001A30  0E03               	movlw	3
  3057  001A32  6E11               	movwf	___wmul@multiplicand,c
  3058  001A34  EC64  F016         	call	___wmul	;wreg free
  3059  001A38  0E50               	movlw	low __npowers_
  3060  001A3A  240F               	addwf	?___wmul,w,c
  3061  001A3C  6EF6               	movwf	tblptrl,c
  3062  001A3E  0E0F               	movlw	high __npowers_
  3063  001A40  2010               	addwfc	?___wmul+1,w,c
  3064  001A42  6EF7               	movwf	tblptrh,c
  3065  001A44                     	if	0	;There are less than 3 active tblptr bytes
  3066  001A44                     	endif
  3067  001A44  0009               	tblrd		*+
  3068  001A46  CFF5 F015          	movff	tablat,___ftmul@f1
  3069  001A4A  0009               	tblrd		*+
  3070  001A4C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3071  001A50  000A               	tblrd		*-
  3072  001A52  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3073  001A56  0E00               	movlw	0
  3074  001A58  6E12               	movwf	___wmul@multiplicand+1,c
  3075  001A5A  0E03               	movlw	3
  3076  001A5C  6E11               	movwf	___wmul@multiplicand,c
  3077  001A5E  0E00               	movlw	0
  3078  001A60  6E04               	movwf	___awmod@divisor+1,c
  3079  001A62  0E0A               	movlw	10
  3080  001A64  6E03               	movwf	___awmod@divisor,c
  3081  001A66  502A               	movf	scale@scl,w,c
  3082  001A68  6E01               	movwf	___awmod@dividend,c
  3083  001A6A  6A02               	clrf	___awmod@dividend+1,c
  3084  001A6C  BE01               	btfsc	___awmod@dividend,7,c
  3085  001A6E  0602               	decf	___awmod@dividend+1,f,c
  3086  001A70  ECBD  F014         	call	___awmod	;wreg free
  3087  001A74  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3088  001A78  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3089  001A7C  EC64  F016         	call	___wmul	;wreg free
  3090  001A80  0E50               	movlw	low __npowers_
  3091  001A82  240F               	addwf	?___wmul,w,c
  3092  001A84  6EF6               	movwf	tblptrl,c
  3093  001A86  0E0F               	movlw	high __npowers_
  3094  001A88  2010               	addwfc	?___wmul+1,w,c
  3095  001A8A  6EF7               	movwf	tblptrh,c
  3096  001A8C                     	if	0	;There are less than 3 active tblptr bytes
  3097  001A8C                     	endif
  3098  001A8C  0009               	tblrd		*+
  3099  001A8E  CFF5 F018          	movff	tablat,___ftmul@f2
  3100  001A92  0009               	tblrd		*+
  3101  001A94  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3102  001A98  000A               	tblrd		*-
  3103  001A9A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3104  001A9E  EC84  F011         	call	___ftmul	;wreg free
  3105  001AA2  D7A7               	goto	L2
  3106  001AA4                     l2480:
  3107                           
  3108                           ;doprnt.c: 434: return _npowers_[scl];
  3109  001AA4  502A               	movf	scale@scl,w,c
  3110  001AA6  0D03               	mullw	3
  3111  001AA8  0E50               	movlw	low __npowers_
  3112  001AAA  24F3               	addwf	prodl,w,c
  3113  001AAC  6EF6               	movwf	tblptrl,c
  3114  001AAE  0E0F               	movlw	high __npowers_
  3115  001AB0  20F4               	addwfc	prodh,w,c
  3116  001AB2  6EF7               	movwf	tblptrh,c
  3117  001AB4                     	if	0	;There are less than 3 active tblptr bytes
  3118  001AB4                     	endif
  3119  001AB4  0009               	tblrd		*+
  3120  001AB6  CFF5 F024          	movff	tablat,?_scale
  3121  001ABA  0009               	tblrd		*+
  3122  001ABC  CFF5 F025          	movff	tablat,?_scale+1
  3123  001AC0  000A               	tblrd		*-
  3124  001AC2  CFF5 F026          	movff	tablat,?_scale+2
  3125  001AC6  0012               	return	
  3126  001AC8                     l2484:
  3127                           
  3128                           ;doprnt.c: 435: }
  3129                           ;doprnt.c: 436: if(scl>=110)
  3130  001AC8  502A               	movf	scale@scl,w,c
  3131  001ACA  0A80               	xorlw	128
  3132  001ACC  0F12               	addlw	-238
  3133  001ACE  A0D8               	btfss	status,0,c
  3134  001AD0  D091               	goto	l2492
  3135                           
  3136                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3137  001AD2  0E00               	movlw	0
  3138  001AD4  6E12               	movwf	___wmul@multiplicand+1,c
  3139  001AD6  0E03               	movlw	3
  3140  001AD8  6E11               	movwf	___wmul@multiplicand,c
  3141  001ADA  0E00               	movlw	0
  3142  001ADC  6E0A               	movwf	___awdiv@divisor+1,c
  3143  001ADE  0E0A               	movlw	10
  3144  001AE0  6E09               	movwf	___awdiv@divisor,c
  3145  001AE2  0E00               	movlw	0
  3146  001AE4  6E04               	movwf	___awmod@divisor+1,c
  3147  001AE6  0E64               	movlw	100
  3148  001AE8  6E03               	movwf	___awmod@divisor,c
  3149  001AEA  502A               	movf	scale@scl,w,c
  3150  001AEC  6E01               	movwf	___awmod@dividend,c
  3151  001AEE  6A02               	clrf	___awmod@dividend+1,c
  3152  001AF0  BE01               	btfsc	___awmod@dividend,7,c
  3153  001AF2  0602               	decf	___awmod@dividend+1,f,c
  3154  001AF4  ECBD  F014         	call	___awmod	;wreg free
  3155  001AF8  C001  F007         	movff	?___awmod,___awdiv@dividend
  3156  001AFC  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3157  001B00  EC3A  F014         	call	___awdiv	;wreg free
  3158  001B04  0E09               	movlw	9
  3159  001B06  2407               	addwf	?___awdiv,w,c
  3160  001B08  6E0F               	movwf	___wmul@multiplier,c
  3161  001B0A  0E00               	movlw	0
  3162  001B0C  2008               	addwfc	?___awdiv+1,w,c
  3163  001B0E  6E10               	movwf	___wmul@multiplier+1,c
  3164  001B10  EC64  F016         	call	___wmul	;wreg free
  3165  001B14  0E29               	movlw	low __powers_
  3166  001B16  240F               	addwf	?___wmul,w,c
  3167  001B18  6EF6               	movwf	tblptrl,c
  3168  001B1A  0E0F               	movlw	high __powers_
  3169  001B1C  2010               	addwfc	?___wmul+1,w,c
  3170  001B1E  6EF7               	movwf	tblptrh,c
  3171  001B20                     	if	0	;There are less than 3 active tblptr bytes
  3172  001B20                     	endif
  3173  001B20  0009               	tblrd		*+
  3174  001B22  CFF5 F018          	movff	tablat,___ftmul@f2
  3175  001B26  0009               	tblrd		*+
  3176  001B28  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3177  001B2C  000A               	tblrd		*-
  3178  001B2E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3179  001B32  0E00               	movlw	0
  3180  001B34  6E0A               	movwf	___awdiv@divisor+1,c
  3181  001B36  0E64               	movlw	100
  3182  001B38  6E09               	movwf	___awdiv@divisor,c
  3183  001B3A  502A               	movf	scale@scl,w,c
  3184  001B3C  6E07               	movwf	___awdiv@dividend,c
  3185  001B3E  6A08               	clrf	___awdiv@dividend+1,c
  3186  001B40  BE07               	btfsc	___awdiv@dividend,7,c
  3187  001B42  0608               	decf	___awdiv@dividend+1,f,c
  3188  001B44  EC3A  F014         	call	___awdiv	;wreg free
  3189  001B48  0E12               	movlw	18
  3190  001B4A  2407               	addwf	?___awdiv,w,c
  3191  001B4C  6E0F               	movwf	___wmul@multiplier,c
  3192  001B4E  0E00               	movlw	0
  3193  001B50  2008               	addwfc	?___awdiv+1,w,c
  3194  001B52  6E10               	movwf	___wmul@multiplier+1,c
  3195  001B54  0E00               	movlw	0
  3196  001B56  6E12               	movwf	___wmul@multiplicand+1,c
  3197  001B58  0E03               	movlw	3
  3198  001B5A  6E11               	movwf	___wmul@multiplicand,c
  3199  001B5C  EC64  F016         	call	___wmul	;wreg free
  3200  001B60  0E29               	movlw	low __powers_
  3201  001B62  240F               	addwf	?___wmul,w,c
  3202  001B64  6EF6               	movwf	tblptrl,c
  3203  001B66  0E0F               	movlw	high __powers_
  3204  001B68  2010               	addwfc	?___wmul+1,w,c
  3205  001B6A  6EF7               	movwf	tblptrh,c
  3206  001B6C                     	if	0	;There are less than 3 active tblptr bytes
  3207  001B6C                     	endif
  3208  001B6C  0009               	tblrd		*+
  3209  001B6E  CFF5 F015          	movff	tablat,___ftmul@f1
  3210  001B72  0009               	tblrd		*+
  3211  001B74  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3212  001B78  000A               	tblrd		*-
  3213  001B7A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3214  001B7E  EC84  F011         	call	___ftmul	;wreg free
  3215  001B82  C015  F027         	movff	?___ftmul,_scale$1794
  3216  001B86  C016  F028         	movff	?___ftmul+1,_scale$1794+1
  3217  001B8A  C017  F029         	movff	?___ftmul+2,_scale$1794+2
  3218                           
  3219                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3220  001B8E  C027  F015         	movff	_scale$1794,___ftmul@f1
  3221  001B92  C028  F016         	movff	_scale$1794+1,___ftmul@f1+1
  3222  001B96  C029  F017         	movff	_scale$1794+2,___ftmul@f1+2
  3223  001B9A  0E00               	movlw	0
  3224  001B9C  6E12               	movwf	___wmul@multiplicand+1,c
  3225  001B9E  0E03               	movlw	3
  3226  001BA0  6E11               	movwf	___wmul@multiplicand,c
  3227  001BA2  0E00               	movlw	0
  3228  001BA4  6E04               	movwf	___awmod@divisor+1,c
  3229  001BA6  0E0A               	movlw	10
  3230  001BA8  6E03               	movwf	___awmod@divisor,c
  3231  001BAA  502A               	movf	scale@scl,w,c
  3232  001BAC  6E01               	movwf	___awmod@dividend,c
  3233  001BAE  6A02               	clrf	___awmod@dividend+1,c
  3234  001BB0  BE01               	btfsc	___awmod@dividend,7,c
  3235  001BB2  0602               	decf	___awmod@dividend+1,f,c
  3236  001BB4  ECBD  F014         	call	___awmod	;wreg free
  3237  001BB8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3238  001BBC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3239  001BC0  EC64  F016         	call	___wmul	;wreg free
  3240  001BC4  0E29               	movlw	low __powers_
  3241  001BC6  240F               	addwf	?___wmul,w,c
  3242  001BC8  6EF6               	movwf	tblptrl,c
  3243  001BCA  0E0F               	movlw	high __powers_
  3244  001BCC  2010               	addwfc	?___wmul+1,w,c
  3245  001BCE  6EF7               	movwf	tblptrh,c
  3246  001BD0                     	if	0	;There are less than 3 active tblptr bytes
  3247  001BD0                     	endif
  3248  001BD0  0009               	tblrd		*+
  3249  001BD2  CFF5 F018          	movff	tablat,___ftmul@f2
  3250  001BD6  0009               	tblrd		*+
  3251  001BD8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3252  001BDC  000A               	tblrd		*-
  3253  001BDE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3254  001BE2  EC84  F011         	call	___ftmul	;wreg free
  3255  001BE6  C015  F024         	movff	?___ftmul,?_scale
  3256  001BEA  C016  F025         	movff	?___ftmul+1,?_scale+1
  3257  001BEE  C017  F026         	movff	?___ftmul+2,?_scale+2
  3258  001BF2  0012               	return	
  3259  001BF4                     l2492:
  3260                           
  3261                           ;doprnt.c: 438: else if(scl > 10)
  3262  001BF4  502A               	movf	scale@scl,w,c
  3263  001BF6  0A80               	xorlw	128
  3264  001BF8  0F75               	addlw	-139
  3265  001BFA  A0D8               	btfss	status,0,c
  3266  001BFC  D04D               	goto	l2498
  3267                           
  3268                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3269  001BFE  0E00               	movlw	0
  3270  001C00  6E0A               	movwf	___awdiv@divisor+1,c
  3271  001C02  0E0A               	movlw	10
  3272  001C04  6E09               	movwf	___awdiv@divisor,c
  3273  001C06  502A               	movf	scale@scl,w,c
  3274  001C08  6E07               	movwf	___awdiv@dividend,c
  3275  001C0A  6A08               	clrf	___awdiv@dividend+1,c
  3276  001C0C  BE07               	btfsc	___awdiv@dividend,7,c
  3277  001C0E  0608               	decf	___awdiv@dividend+1,f,c
  3278  001C10  EC3A  F014         	call	___awdiv	;wreg free
  3279  001C14  0E09               	movlw	9
  3280  001C16  2407               	addwf	?___awdiv,w,c
  3281  001C18  6E0F               	movwf	___wmul@multiplier,c
  3282  001C1A  0E00               	movlw	0
  3283  001C1C  2008               	addwfc	?___awdiv+1,w,c
  3284  001C1E  6E10               	movwf	___wmul@multiplier+1,c
  3285  001C20  0E00               	movlw	0
  3286  001C22  6E12               	movwf	___wmul@multiplicand+1,c
  3287  001C24  0E03               	movlw	3
  3288  001C26  6E11               	movwf	___wmul@multiplicand,c
  3289  001C28  EC64  F016         	call	___wmul	;wreg free
  3290  001C2C  0E29               	movlw	low __powers_
  3291  001C2E  240F               	addwf	?___wmul,w,c
  3292  001C30  6EF6               	movwf	tblptrl,c
  3293  001C32  0E0F               	movlw	high __powers_
  3294  001C34  2010               	addwfc	?___wmul+1,w,c
  3295  001C36  6EF7               	movwf	tblptrh,c
  3296  001C38                     	if	0	;There are less than 3 active tblptr bytes
  3297  001C38                     	endif
  3298  001C38  0009               	tblrd		*+
  3299  001C3A  CFF5 F015          	movff	tablat,___ftmul@f1
  3300  001C3E  0009               	tblrd		*+
  3301  001C40  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3302  001C44  000A               	tblrd		*-
  3303  001C46  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3304  001C4A  0E00               	movlw	0
  3305  001C4C  6E12               	movwf	___wmul@multiplicand+1,c
  3306  001C4E  0E03               	movlw	3
  3307  001C50  6E11               	movwf	___wmul@multiplicand,c
  3308  001C52  0E00               	movlw	0
  3309  001C54  6E04               	movwf	___awmod@divisor+1,c
  3310  001C56  0E0A               	movlw	10
  3311  001C58  6E03               	movwf	___awmod@divisor,c
  3312  001C5A  502A               	movf	scale@scl,w,c
  3313  001C5C  6E01               	movwf	___awmod@dividend,c
  3314  001C5E  6A02               	clrf	___awmod@dividend+1,c
  3315  001C60  BE01               	btfsc	___awmod@dividend,7,c
  3316  001C62  0602               	decf	___awmod@dividend+1,f,c
  3317  001C64  ECBD  F014         	call	___awmod	;wreg free
  3318  001C68  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3319  001C6C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3320  001C70  EC64  F016         	call	___wmul	;wreg free
  3321  001C74  0E29               	movlw	low __powers_
  3322  001C76  240F               	addwf	?___wmul,w,c
  3323  001C78  6EF6               	movwf	tblptrl,c
  3324  001C7A  0E0F               	movlw	high __powers_
  3325  001C7C  2010               	addwfc	?___wmul+1,w,c
  3326  001C7E  6EF7               	movwf	tblptrh,c
  3327  001C80                     	if	0	;There are less than 3 active tblptr bytes
  3328  001C80                     	endif
  3329  001C80  0009               	tblrd		*+
  3330  001C82  CFF5 F018          	movff	tablat,___ftmul@f2
  3331  001C86  0009               	tblrd		*+
  3332  001C88  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3333  001C8C  000A               	tblrd		*-
  3334  001C8E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3335  001C92  EC84  F011         	call	___ftmul	;wreg free
  3336  001C96  D7A7               	goto	L3
  3337  001C98                     l2498:
  3338                           
  3339                           ;doprnt.c: 440: return _powers_[scl];
  3340  001C98  502A               	movf	scale@scl,w,c
  3341  001C9A  0D03               	mullw	3
  3342  001C9C  0E29               	movlw	low __powers_
  3343  001C9E  24F3               	addwf	prodl,w,c
  3344  001CA0  6EF6               	movwf	tblptrl,c
  3345  001CA2  0E0F               	movlw	high __powers_
  3346  001CA4  20F4               	addwfc	prodh,w,c
  3347  001CA6  6EF7               	movwf	tblptrh,c
  3348  001CA8                     	if	0	;There are less than 3 active tblptr bytes
  3349  001CA8                     	endif
  3350  001CA8  0009               	tblrd		*+
  3351  001CAA  CFF5 F024          	movff	tablat,?_scale
  3352  001CAE  0009               	tblrd		*+
  3353  001CB0  CFF5 F025          	movff	tablat,?_scale+1
  3354  001CB4  000A               	tblrd		*-
  3355  001CB6  CFF5 F026          	movff	tablat,?_scale+2
  3356  001CBA  0012               	return	
  3357  001CBC                     __end_of_scale:
  3358                           	opt stack 0
  3359                           tblptru	equ	0xFF8
  3360                           tblptrh	equ	0xFF7
  3361                           tblptrl	equ	0xFF6
  3362                           tablat	equ	0xFF5
  3363                           prodh	equ	0xFF4
  3364                           prodl	equ	0xFF3
  3365                           postinc0	equ	0xFEE
  3366                           wreg	equ	0xFE8
  3367                           postdec1	equ	0xFE5
  3368                           fsr1l	equ	0xFE1
  3369                           indf2	equ	0xFDF
  3370                           postinc2	equ	0xFDE
  3371                           postdec2	equ	0xFDD
  3372                           fsr2h	equ	0xFDA
  3373                           fsr2l	equ	0xFD9
  3374                           status	equ	0xFD8
  3375                           
  3376 ;; *************** function _putch *****************
  3377 ;; Defined at:
  3378 ;;		line 271 in file "main.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;  data            1    wreg     unsigned char 
  3381 ;; Auto vars:     Size  Location     Type
  3382 ;;  data            1    0[COMRAM] unsigned char 
  3383 ;; Return value:  Size  Location     Type
  3384 ;;                  1    wreg      void 
  3385 ;; Registers used:
  3386 ;;		wreg
  3387 ;; Tracked objects:
  3388 ;;		On entry : 0/0
  3389 ;;		On exit  : 0/0
  3390 ;;		Unchanged: 0/0
  3391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3393 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3395 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3396 ;;Total ram usage:        1 bytes
  3397 ;; Hardware stack levels used:    1
  3398 ;; This function calls:
  3399 ;;		Nothing
  3400 ;; This function is called by:
  3401 ;;		_printf
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text7
  3406  002D8C                     __ptext7:
  3407                           	opt stack 0
  3408  002D8C                     _putch:
  3409                           	opt stack 28
  3410                           
  3411                           ;incstack = 0
  3412                           ;putch@data stored from wreg
  3413  002D8C  6E01               	movwf	putch@data,c
  3414  002D8E                     l132:
  3415  002D8E  A89E               	btfss	3998,4,c	;volatile
  3416  002D90  D7FE               	goto	l132
  3417                           
  3418                           ;main.c: 274: TXREG = data;
  3419  002D92  C001  FFAD         	movff	putch@data,4013	;volatile
  3420  002D96  0012               	return		;funcret
  3421  002D98                     __end_of_putch:
  3422                           	opt stack 0
  3423                           tblptru	equ	0xFF8
  3424                           tblptrh	equ	0xFF7
  3425                           tblptrl	equ	0xFF6
  3426                           tablat	equ	0xFF5
  3427                           prodh	equ	0xFF4
  3428                           prodl	equ	0xFF3
  3429                           postinc0	equ	0xFEE
  3430                           wreg	equ	0xFE8
  3431                           postdec1	equ	0xFE5
  3432                           fsr1l	equ	0xFE1
  3433                           indf2	equ	0xFDF
  3434                           postinc2	equ	0xFDE
  3435                           postdec2	equ	0xFDD
  3436                           fsr2h	equ	0xFDA
  3437                           fsr2l	equ	0xFD9
  3438                           status	equ	0xFD8
  3439                           
  3440 ;; *************** function _isdigit *****************
  3441 ;; Defined at:
  3442 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/isdigit.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  c               1    wreg     unsigned char 
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;  c               1    2[COMRAM] unsigned char 
  3447 ;; Return value:  Size  Location     Type
  3448 ;;		None               void
  3449 ;; Registers used:
  3450 ;;		wreg, status,2, status,0
  3451 ;; Tracked objects:
  3452 ;;		On entry : 0/0
  3453 ;;		On exit  : 0/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3457 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3458 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3459 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3460 ;;Total ram usage:        3 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; This function calls:
  3463 ;;		Nothing
  3464 ;; This function is called by:
  3465 ;;		_printf
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           	psect	text8
  3470  002D5C                     __ptext8:
  3471                           	opt stack 0
  3472  002D5C                     _isdigit:
  3473                           	opt stack 28
  3474                           
  3475                           ;incstack = 0
  3476                           ;isdigit@c stored from wreg
  3477  002D5C  6E03               	movwf	isdigit@c,c
  3478  002D5E  0E00               	movlw	0
  3479  002D60  6E02               	movwf	_isdigit$1419,c
  3480  002D62  0E3A               	movlw	58
  3481  002D64  6003               	cpfslt	isdigit@c,c
  3482  002D66  D005               	goto	l2510
  3483  002D68  0E2F               	movlw	47
  3484  002D6A  6403               	cpfsgt	isdigit@c,c
  3485  002D6C  D002               	goto	l2510
  3486  002D6E  0E01               	movlw	1
  3487  002D70  6E02               	movwf	_isdigit$1419,c
  3488  002D72                     l2510:
  3489  002D72  C002  F001         	movff	_isdigit$1419,??_isdigit
  3490  002D76  3001               	rrcf	??_isdigit,w,c
  3491  002D78  0012               	return	
  3492  002D7A                     __end_of_isdigit:
  3493                           	opt stack 0
  3494                           tblptru	equ	0xFF8
  3495                           tblptrh	equ	0xFF7
  3496                           tblptrl	equ	0xFF6
  3497                           tablat	equ	0xFF5
  3498                           prodh	equ	0xFF4
  3499                           prodl	equ	0xFF3
  3500                           postinc0	equ	0xFEE
  3501                           wreg	equ	0xFE8
  3502                           postdec1	equ	0xFE5
  3503                           fsr1l	equ	0xFE1
  3504                           indf2	equ	0xFDF
  3505                           postinc2	equ	0xFDE
  3506                           postdec2	equ	0xFDD
  3507                           fsr2h	equ	0xFDA
  3508                           fsr2l	equ	0xFD9
  3509                           status	equ	0xFD8
  3510                           
  3511 ;; *************** function _fround *****************
  3512 ;; Defined at:
  3513 ;;		line 409 in file "/opt/microchip/xc8/v1.42/sources/common/doprnt.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;  prec            1    wreg     unsigned char 
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  prec            1   44[COMRAM] unsigned char 
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  3   35[COMRAM] unsigned char 
  3520 ;; Registers used:
  3521 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3527 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3528 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3530 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3531 ;;Total ram usage:       10 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; Hardware stack levels required when called:    2
  3534 ;; This function calls:
  3535 ;;		___awdiv
  3536 ;;		___awmod
  3537 ;;		___ftmul
  3538 ;;		___wmul
  3539 ;; This function is called by:
  3540 ;;		_printf
  3541 ;; This function uses a non-reentrant model
  3542 ;;
  3543                           
  3544                           	psect	text9
  3545  001CBC                     __ptext9:
  3546                           	opt stack 0
  3547  001CBC                     _fround:
  3548                           	opt stack 26
  3549                           
  3550                           ;incstack = 0
  3551                           ;fround@prec stored from wreg
  3552  001CBC  6E2D               	movwf	fround@prec,c
  3553                           
  3554                           ;doprnt.c: 413: if(prec>=110)
  3555  001CBE  0E6D               	movlw	109
  3556  001CC0  642D               	cpfsgt	fround@prec,c
  3557  001CC2  D09F               	goto	l2452
  3558                           
  3559                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3560  001CC4  0E00               	movlw	0
  3561  001CC6  6E12               	movwf	___wmul@multiplicand+1,c
  3562  001CC8  0E03               	movlw	3
  3563  001CCA  6E11               	movwf	___wmul@multiplicand,c
  3564  001CCC  0E00               	movlw	0
  3565  001CCE  6E0A               	movwf	___awdiv@divisor+1,c
  3566  001CD0  0E0A               	movlw	10
  3567  001CD2  6E09               	movwf	___awdiv@divisor,c
  3568  001CD4  0E00               	movlw	0
  3569  001CD6  6E04               	movwf	___awmod@divisor+1,c
  3570  001CD8  0E64               	movlw	100
  3571  001CDA  6E03               	movwf	___awmod@divisor,c
  3572  001CDC  C02D  F001         	movff	fround@prec,___awmod@dividend
  3573  001CE0  6A02               	clrf	___awmod@dividend+1,c
  3574  001CE2  ECBD  F014         	call	___awmod	;wreg free
  3575  001CE6  C001  F007         	movff	?___awmod,___awdiv@dividend
  3576  001CEA  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3577  001CEE  EC3A  F014         	call	___awdiv	;wreg free
  3578  001CF2  0E09               	movlw	9
  3579  001CF4  2407               	addwf	?___awdiv,w,c
  3580  001CF6  6E0F               	movwf	___wmul@multiplier,c
  3581  001CF8  0E00               	movlw	0
  3582  001CFA  2008               	addwfc	?___awdiv+1,w,c
  3583  001CFC  6E10               	movwf	___wmul@multiplier+1,c
  3584  001CFE  EC64  F016         	call	___wmul	;wreg free
  3585  001D02  0E50               	movlw	low __npowers_
  3586  001D04  240F               	addwf	?___wmul,w,c
  3587  001D06  6EF6               	movwf	tblptrl,c
  3588  001D08  0E0F               	movlw	high __npowers_
  3589  001D0A  2010               	addwfc	?___wmul+1,w,c
  3590  001D0C  6EF7               	movwf	tblptrh,c
  3591  001D0E                     	if	0	;There are less than 3 active tblptr bytes
  3592  001D0E                     	endif
  3593  001D0E  0009               	tblrd		*+
  3594  001D10  CFF5 F018          	movff	tablat,___ftmul@f2
  3595  001D14  0009               	tblrd		*+
  3596  001D16  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3597  001D1A  000A               	tblrd		*-
  3598  001D1C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3599  001D20  0E00               	movlw	0
  3600  001D22  6E0A               	movwf	___awdiv@divisor+1,c
  3601  001D24  0E64               	movlw	100
  3602  001D26  6E09               	movwf	___awdiv@divisor,c
  3603  001D28  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3604  001D2C  6A08               	clrf	___awdiv@dividend+1,c
  3605  001D2E  EC3A  F014         	call	___awdiv	;wreg free
  3606  001D32  0E12               	movlw	18
  3607  001D34  2407               	addwf	?___awdiv,w,c
  3608  001D36  6E0F               	movwf	___wmul@multiplier,c
  3609  001D38  0E00               	movlw	0
  3610  001D3A  2008               	addwfc	?___awdiv+1,w,c
  3611  001D3C  6E10               	movwf	___wmul@multiplier+1,c
  3612  001D3E  0E00               	movlw	0
  3613  001D40  6E12               	movwf	___wmul@multiplicand+1,c
  3614  001D42  0E03               	movlw	3
  3615  001D44  6E11               	movwf	___wmul@multiplicand,c
  3616  001D46  EC64  F016         	call	___wmul	;wreg free
  3617  001D4A  0E50               	movlw	low __npowers_
  3618  001D4C  240F               	addwf	?___wmul,w,c
  3619  001D4E  6EF6               	movwf	tblptrl,c
  3620  001D50  0E0F               	movlw	high __npowers_
  3621  001D52  2010               	addwfc	?___wmul+1,w,c
  3622  001D54  6EF7               	movwf	tblptrh,c
  3623  001D56                     	if	0	;There are less than 3 active tblptr bytes
  3624  001D56                     	endif
  3625  001D56  0009               	tblrd		*+
  3626  001D58  CFF5 F015          	movff	tablat,___ftmul@f1
  3627  001D5C  0009               	tblrd		*+
  3628  001D5E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3629  001D62  000A               	tblrd		*-
  3630  001D64  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3631  001D68  EC84  F011         	call	___ftmul	;wreg free
  3632  001D6C  C015  F02A         	movff	?___ftmul,_fround$1792
  3633  001D70  C016  F02B         	movff	?___ftmul+1,_fround$1792+1
  3634  001D74  C017  F02C         	movff	?___ftmul+2,_fround$1792+2
  3635                           
  3636                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3637  001D78  0E00               	movlw	0
  3638  001D7A  6E12               	movwf	___wmul@multiplicand+1,c
  3639  001D7C  0E03               	movlw	3
  3640  001D7E  6E11               	movwf	___wmul@multiplicand,c
  3641  001D80  0E00               	movlw	0
  3642  001D82  6E04               	movwf	___awmod@divisor+1,c
  3643  001D84  0E0A               	movlw	10
  3644  001D86  6E03               	movwf	___awmod@divisor,c
  3645  001D88  C02D  F001         	movff	fround@prec,___awmod@dividend
  3646  001D8C  6A02               	clrf	___awmod@dividend+1,c
  3647  001D8E  ECBD  F014         	call	___awmod	;wreg free
  3648  001D92  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3649  001D96  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3650  001D9A  EC64  F016         	call	___wmul	;wreg free
  3651  001D9E  0E50               	movlw	low __npowers_
  3652  001DA0  240F               	addwf	?___wmul,w,c
  3653  001DA2  6EF6               	movwf	tblptrl,c
  3654  001DA4  0E0F               	movlw	high __npowers_
  3655  001DA6  2010               	addwfc	?___wmul+1,w,c
  3656  001DA8  6EF7               	movwf	tblptrh,c
  3657  001DAA                     	if	0	;There are less than 3 active tblptr bytes
  3658  001DAA                     	endif
  3659  001DAA  0009               	tblrd		*+
  3660  001DAC  CFF5 F018          	movff	tablat,___ftmul@f2
  3661  001DB0  0009               	tblrd		*+
  3662  001DB2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3663  001DB6  000A               	tblrd		*-
  3664  001DB8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3665  001DBC  C02A  F015         	movff	_fround$1792,___ftmul@f1
  3666  001DC0  C02B  F016         	movff	_fround$1792+1,___ftmul@f1+1
  3667  001DC4  C02C  F017         	movff	_fround$1792+2,___ftmul@f1+2
  3668  001DC8  EC84  F011         	call	___ftmul	;wreg free
  3669  001DCC  C015  F027         	movff	?___ftmul,_fround$1793
  3670  001DD0  C016  F028         	movff	?___ftmul+1,_fround$1793+1
  3671  001DD4  C017  F029         	movff	?___ftmul+2,_fround$1793+2
  3672                           
  3673                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3674  001DD8  C027  F015         	movff	_fround$1793,___ftmul@f1
  3675  001DDC  C028  F016         	movff	_fround$1793+1,___ftmul@f1+1
  3676  001DE0  C029  F017         	movff	_fround$1793+2,___ftmul@f1+2
  3677  001DE4  0E00               	movlw	0
  3678  001DE6  6E18               	movwf	___ftmul@f2,c
  3679  001DE8  0E00               	movlw	0
  3680  001DEA  6E19               	movwf	___ftmul@f2+1,c
  3681  001DEC  0E3F               	movlw	63
  3682  001DEE  6E1A               	movwf	___ftmul@f2+2,c
  3683  001DF0  EC84  F011         	call	___ftmul	;wreg free
  3684  001DF4  C015  F024         	movff	?___ftmul,?_fround
  3685  001DF8  C016  F025         	movff	?___ftmul+1,?_fround+1
  3686  001DFC  C017  F026         	movff	?___ftmul+2,?_fround+2
  3687  001E00  0012               	return	
  3688  001E02                     l2452:
  3689                           
  3690                           ;doprnt.c: 415: else if(prec > 10)
  3691  001E02  0E0A               	movlw	10
  3692  001E04  642D               	cpfsgt	fround@prec,c
  3693  001E06  D05D               	goto	l2460
  3694                           
  3695                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3696  001E08  0E00               	movlw	0
  3697  001E0A  6E12               	movwf	___wmul@multiplicand+1,c
  3698  001E0C  0E03               	movlw	3
  3699  001E0E  6E11               	movwf	___wmul@multiplicand,c
  3700  001E10  0E00               	movlw	0
  3701  001E12  6E04               	movwf	___awmod@divisor+1,c
  3702  001E14  0E0A               	movlw	10
  3703  001E16  6E03               	movwf	___awmod@divisor,c
  3704  001E18  C02D  F001         	movff	fround@prec,___awmod@dividend
  3705  001E1C  6A02               	clrf	___awmod@dividend+1,c
  3706  001E1E  ECBD  F014         	call	___awmod	;wreg free
  3707  001E22  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3708  001E26  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3709  001E2A  EC64  F016         	call	___wmul	;wreg free
  3710  001E2E  0E50               	movlw	low __npowers_
  3711  001E30  240F               	addwf	?___wmul,w,c
  3712  001E32  6EF6               	movwf	tblptrl,c
  3713  001E34  0E0F               	movlw	high __npowers_
  3714  001E36  2010               	addwfc	?___wmul+1,w,c
  3715  001E38  6EF7               	movwf	tblptrh,c
  3716  001E3A                     	if	0	;There are less than 3 active tblptr bytes
  3717  001E3A                     	endif
  3718  001E3A  0009               	tblrd		*+
  3719  001E3C  CFF5 F018          	movff	tablat,___ftmul@f2
  3720  001E40  0009               	tblrd		*+
  3721  001E42  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3722  001E46  000A               	tblrd		*-
  3723  001E48  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3724  001E4C  0E00               	movlw	0
  3725  001E4E  6E0A               	movwf	___awdiv@divisor+1,c
  3726  001E50  0E0A               	movlw	10
  3727  001E52  6E09               	movwf	___awdiv@divisor,c
  3728  001E54  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3729  001E58  6A08               	clrf	___awdiv@dividend+1,c
  3730  001E5A  EC3A  F014         	call	___awdiv	;wreg free
  3731  001E5E  0E09               	movlw	9
  3732  001E60  2407               	addwf	?___awdiv,w,c
  3733  001E62  6E0F               	movwf	___wmul@multiplier,c
  3734  001E64  0E00               	movlw	0
  3735  001E66  2008               	addwfc	?___awdiv+1,w,c
  3736  001E68  6E10               	movwf	___wmul@multiplier+1,c
  3737  001E6A  0E00               	movlw	0
  3738  001E6C  6E12               	movwf	___wmul@multiplicand+1,c
  3739  001E6E  0E03               	movlw	3
  3740  001E70  6E11               	movwf	___wmul@multiplicand,c
  3741  001E72  EC64  F016         	call	___wmul	;wreg free
  3742  001E76  0E50               	movlw	low __npowers_
  3743  001E78  240F               	addwf	?___wmul,w,c
  3744  001E7A  6EF6               	movwf	tblptrl,c
  3745  001E7C  0E0F               	movlw	high __npowers_
  3746  001E7E  2010               	addwfc	?___wmul+1,w,c
  3747  001E80  6EF7               	movwf	tblptrh,c
  3748  001E82                     	if	0	;There are less than 3 active tblptr bytes
  3749  001E82                     	endif
  3750  001E82  0009               	tblrd		*+
  3751  001E84  CFF5 F015          	movff	tablat,___ftmul@f1
  3752  001E88  0009               	tblrd		*+
  3753  001E8A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3754  001E8E  000A               	tblrd		*-
  3755  001E90  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3756  001E94  EC84  F011         	call	___ftmul	;wreg free
  3757  001E98  C015  F02A         	movff	?___ftmul,_fround$1792
  3758  001E9C  C016  F02B         	movff	?___ftmul+1,_fround$1792+1
  3759  001EA0  C017  F02C         	movff	?___ftmul+2,_fround$1792+2
  3760                           
  3761                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3762  001EA4  C02A  F015         	movff	_fround$1792,___ftmul@f1
  3763  001EA8  C02B  F016         	movff	_fround$1792+1,___ftmul@f1+1
  3764  001EAC  C02C  F017         	movff	_fround$1792+2,___ftmul@f1+2
  3765  001EB0  0E00               	movlw	0
  3766  001EB2  6E18               	movwf	___ftmul@f2,c
  3767  001EB4  0E00               	movlw	0
  3768  001EB6  6E19               	movwf	___ftmul@f2+1,c
  3769  001EB8  0E3F               	movlw	63
  3770  001EBA  6E1A               	movwf	___ftmul@f2+2,c
  3771  001EBC  EC84  F011         	call	___ftmul	;wreg free
  3772  001EC0  D799               	goto	L4
  3773  001EC2                     l2460:
  3774                           
  3775                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3776  001EC2  502D               	movf	fround@prec,w,c
  3777  001EC4  0D03               	mullw	3
  3778  001EC6  0E50               	movlw	low __npowers_
  3779  001EC8  24F3               	addwf	prodl,w,c
  3780  001ECA  6EF6               	movwf	tblptrl,c
  3781  001ECC  0E0F               	movlw	high __npowers_
  3782  001ECE  20F4               	addwfc	prodh,w,c
  3783  001ED0  6EF7               	movwf	tblptrh,c
  3784  001ED2                     	if	0	;There are less than 3 active tblptr bytes
  3785  001ED2                     	endif
  3786  001ED2  0009               	tblrd		*+
  3787  001ED4  CFF5 F015          	movff	tablat,___ftmul@f1
  3788  001ED8  0009               	tblrd		*+
  3789  001EDA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3790  001EDE  000A               	tblrd		*-
  3791  001EE0  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3792  001EE4  0E00               	movlw	0
  3793  001EE6  6E18               	movwf	___ftmul@f2,c
  3794  001EE8  0E00               	movlw	0
  3795  001EEA  6E19               	movwf	___ftmul@f2+1,c
  3796  001EEC  0E3F               	movlw	63
  3797  001EEE  6E1A               	movwf	___ftmul@f2+2,c
  3798  001EF0  EC84  F011         	call	___ftmul	;wreg free
  3799  001EF4  C015  F024         	movff	?___ftmul,?_fround
  3800  001EF8  C016  F025         	movff	?___ftmul+1,?_fround+1
  3801  001EFC  C017  F026         	movff	?___ftmul+2,?_fround+2
  3802  001F00  0012               	return	
  3803  001F02                     __end_of_fround:
  3804                           	opt stack 0
  3805                           tblptru	equ	0xFF8
  3806                           tblptrh	equ	0xFF7
  3807                           tblptrl	equ	0xFF6
  3808                           tablat	equ	0xFF5
  3809                           prodh	equ	0xFF4
  3810                           prodl	equ	0xFF3
  3811                           postinc0	equ	0xFEE
  3812                           wreg	equ	0xFE8
  3813                           postdec1	equ	0xFE5
  3814                           fsr1l	equ	0xFE1
  3815                           indf2	equ	0xFDF
  3816                           postinc2	equ	0xFDE
  3817                           postdec2	equ	0xFDD
  3818                           fsr2h	equ	0xFDA
  3819                           fsr2l	equ	0xFD9
  3820                           status	equ	0xFD8
  3821                           
  3822 ;; *************** function ___wmul *****************
  3823 ;; Defined at:
  3824 ;;		line 15 in file "/opt/microchip/xc8/v1.42/sources/common/Umul16.c"
  3825 ;; Parameters:    Size  Location     Type
  3826 ;;  multiplier      2   14[COMRAM] unsigned int 
  3827 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3828 ;; Auto vars:     Size  Location     Type
  3829 ;;  product         2   18[COMRAM] unsigned int 
  3830 ;; Return value:  Size  Location     Type
  3831 ;;                  2   14[COMRAM] unsigned int 
  3832 ;; Registers used:
  3833 ;;		wreg, status,2, status,0, prodl, prodh
  3834 ;; Tracked objects:
  3835 ;;		On entry : 0/0
  3836 ;;		On exit  : 0/0
  3837 ;;		Unchanged: 0/0
  3838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3839 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3840 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3842 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3843 ;;Total ram usage:        6 bytes
  3844 ;; Hardware stack levels used:    1
  3845 ;; This function calls:
  3846 ;;		Nothing
  3847 ;; This function is called by:
  3848 ;;		_fround
  3849 ;;		_scale
  3850 ;;		_printf
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853                           
  3854                           	psect	text10
  3855  002CC8                     __ptext10:
  3856                           	opt stack 0
  3857  002CC8                     ___wmul:
  3858                           	opt stack 27
  3859                           
  3860                           ;incstack = 0
  3861  002CC8  500F               	movf	___wmul@multiplier,w,c
  3862  002CCA  0211               	mulwf	___wmul@multiplicand,c
  3863  002CCC  CFF3 F013          	movff	prodl,___wmul@product
  3864  002CD0  CFF4 F014          	movff	prodh,___wmul@product+1
  3865  002CD4  500F               	movf	___wmul@multiplier,w,c
  3866  002CD6  0212               	mulwf	___wmul@multiplicand+1,c
  3867  002CD8  50F3               	movf	prodl,w,c
  3868  002CDA  2614               	addwf	___wmul@product+1,f,c
  3869  002CDC  5010               	movf	___wmul@multiplier+1,w,c
  3870  002CDE  0211               	mulwf	___wmul@multiplicand,c
  3871  002CE0  50F3               	movf	prodl,w,c
  3872  002CE2  2614               	addwf	___wmul@product+1,f,c
  3873  002CE4  C013  F00F         	movff	___wmul@product,?___wmul
  3874  002CE8  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3875  002CEC  0012               	return	
  3876  002CEE                     __end_of___wmul:
  3877                           	opt stack 0
  3878                           tblptru	equ	0xFF8
  3879                           tblptrh	equ	0xFF7
  3880                           tblptrl	equ	0xFF6
  3881                           tablat	equ	0xFF5
  3882                           prodh	equ	0xFF4
  3883                           prodl	equ	0xFF3
  3884                           postinc0	equ	0xFEE
  3885                           wreg	equ	0xFE8
  3886                           postdec1	equ	0xFE5
  3887                           fsr1l	equ	0xFE1
  3888                           indf2	equ	0xFDF
  3889                           postinc2	equ	0xFDE
  3890                           postdec2	equ	0xFDD
  3891                           fsr2h	equ	0xFDA
  3892                           fsr2l	equ	0xFD9
  3893                           status	equ	0xFD8
  3894                           
  3895 ;; *************** function ___ftmul *****************
  3896 ;; Defined at:
  3897 ;;		line 62 in file "/opt/microchip/xc8/v1.42/sources/common/ftmul.c"
  3898 ;; Parameters:    Size  Location     Type
  3899 ;;  f1              3   20[COMRAM] float 
  3900 ;;  f2              3   23[COMRAM] float 
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3903 ;;  sign            1   34[COMRAM] unsigned char 
  3904 ;;  cntr            1   33[COMRAM] unsigned char 
  3905 ;;  exp             1   29[COMRAM] unsigned char 
  3906 ;; Return value:  Size  Location     Type
  3907 ;;                  3   20[COMRAM] float 
  3908 ;; Registers used:
  3909 ;;		wreg, status,2, status,0, cstack
  3910 ;; Tracked objects:
  3911 ;;		On entry : 0/0
  3912 ;;		On exit  : 0/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3915 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3916 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3917 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3918 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3919 ;;Total ram usage:       15 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; Hardware stack levels required when called:    1
  3922 ;; This function calls:
  3923 ;;		___ftpack
  3924 ;; This function is called by:
  3925 ;;		_do_voltage
  3926 ;;		_fround
  3927 ;;		_scale
  3928 ;;		_printf
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           	psect	text11
  3933  002308                     __ptext11:
  3934                           	opt stack 0
  3935  002308                     ___ftmul:
  3936                           	opt stack 26
  3937                           
  3938                           ;incstack = 0
  3939  002308  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3940  00230C  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3941  00230E  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3942  002310  3416               	rlcf	___ftmul@f1+1,w,c
  3943  002312  361B               	rlcf	??___ftmul& (0+255),f,c
  3944  002314  E301               	bnc	u2131
  3945  002316  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3946  002318                     u2131:
  3947  002318  501B               	movf	??___ftmul,w,c
  3948  00231A  6E1E               	movwf	___ftmul@exp,c
  3949  00231C  501E               	movf	___ftmul@exp,w,c
  3950  00231E  A4D8               	btfss	status,2,c
  3951  002320  D007               	goto	l2316
  3952  002322  0E00               	movlw	0
  3953  002324  6E15               	movwf	?___ftmul,c
  3954  002326  0E00               	movlw	0
  3955  002328  6E16               	movwf	?___ftmul+1,c
  3956  00232A  0E00               	movlw	0
  3957  00232C  6E17               	movwf	?___ftmul+2,c
  3958  00232E  0012               	return	
  3959  002330                     l2316:
  3960  002330  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3961  002334  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3962  002336  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3963  002338  3419               	rlcf	___ftmul@f2+1,w,c
  3964  00233A  361B               	rlcf	??___ftmul& (0+255),f,c
  3965  00233C  E301               	bnc	u2151
  3966  00233E  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3967  002340                     u2151:
  3968  002340  501B               	movf	??___ftmul,w,c
  3969  002342  6E23               	movwf	___ftmul@sign,c
  3970  002344  5023               	movf	___ftmul@sign,w,c
  3971  002346  A4D8               	btfss	status,2,c
  3972  002348  D007               	goto	l2322
  3973  00234A  0E00               	movlw	0
  3974  00234C  6E15               	movwf	?___ftmul,c
  3975  00234E  0E00               	movlw	0
  3976  002350  6E16               	movwf	?___ftmul+1,c
  3977  002352  0E00               	movlw	0
  3978  002354  6E17               	movwf	?___ftmul+2,c
  3979  002356  0012               	return	
  3980  002358                     l2322:
  3981  002358  5023               	movf	___ftmul@sign,w,c
  3982  00235A  0F7B               	addlw	123
  3983  00235C  261E               	addwf	___ftmul@exp,f,c
  3984  00235E  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3985  002362  501A               	movf	___ftmul@f2+2,w,c
  3986  002364  1A23               	xorwf	___ftmul@sign,f,c
  3987  002366  0E80               	movlw	128
  3988  002368  1623               	andwf	___ftmul@sign,f,c
  3989  00236A  8E16               	bsf	___ftmul@f1+1,7,c
  3990  00236C  8E19               	bsf	___ftmul@f2+1,7,c
  3991  00236E  0EFF               	movlw	255
  3992  002370  1618               	andwf	___ftmul@f2,f,c
  3993  002372  0EFF               	movlw	255
  3994  002374  1619               	andwf	___ftmul@f2+1,f,c
  3995  002376  0E00               	movlw	0
  3996  002378  161A               	andwf	___ftmul@f2+2,f,c
  3997  00237A  0E00               	movlw	0
  3998  00237C  6E1F               	movwf	___ftmul@f3_as_product,c
  3999  00237E  0E00               	movlw	0
  4000  002380  6E20               	movwf	___ftmul@f3_as_product+1,c
  4001  002382  0E00               	movlw	0
  4002  002384  6E21               	movwf	___ftmul@f3_as_product+2,c
  4003  002386  0E07               	movlw	7
  4004  002388  6E22               	movwf	___ftmul@cntr,c
  4005  00238A                     l2336:
  4006  00238A  A015               	btfss	___ftmul@f1,0,c
  4007  00238C  D006               	goto	l2340
  4008  00238E  5018               	movf	___ftmul@f2,w,c
  4009  002390  261F               	addwf	___ftmul@f3_as_product,f,c
  4010  002392  5019               	movf	___ftmul@f2+1,w,c
  4011  002394  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  4012  002396  501A               	movf	___ftmul@f2+2,w,c
  4013  002398  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  4014  00239A                     l2340:
  4015  00239A  90D8               	bcf	status,0,c
  4016  00239C  3217               	rrcf	___ftmul@f1+2,f,c
  4017  00239E  3216               	rrcf	___ftmul@f1+1,f,c
  4018  0023A0  3215               	rrcf	___ftmul@f1,f,c
  4019  0023A2  90D8               	bcf	status,0,c
  4020  0023A4  3618               	rlcf	___ftmul@f2,f,c
  4021  0023A6  3619               	rlcf	___ftmul@f2+1,f,c
  4022  0023A8  361A               	rlcf	___ftmul@f2+2,f,c
  4023  0023AA  2E22               	decfsz	___ftmul@cntr,f,c
  4024  0023AC  D7EE               	goto	l2336
  4025  0023AE  0E09               	movlw	9
  4026  0023B0  6E22               	movwf	___ftmul@cntr,c
  4027  0023B2                     l2346:
  4028  0023B2  A015               	btfss	___ftmul@f1,0,c
  4029  0023B4  D006               	goto	l2350
  4030  0023B6  5018               	movf	___ftmul@f2,w,c
  4031  0023B8  261F               	addwf	___ftmul@f3_as_product,f,c
  4032  0023BA  5019               	movf	___ftmul@f2+1,w,c
  4033  0023BC  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  4034  0023BE  501A               	movf	___ftmul@f2+2,w,c
  4035  0023C0  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  4036  0023C2                     l2350:
  4037  0023C2  90D8               	bcf	status,0,c
  4038  0023C4  3217               	rrcf	___ftmul@f1+2,f,c
  4039  0023C6  3216               	rrcf	___ftmul@f1+1,f,c
  4040  0023C8  3215               	rrcf	___ftmul@f1,f,c
  4041  0023CA  90D8               	bcf	status,0,c
  4042  0023CC  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  4043  0023CE  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  4044  0023D0  321F               	rrcf	___ftmul@f3_as_product,f,c
  4045  0023D2  2E22               	decfsz	___ftmul@cntr,f,c
  4046  0023D4  D7EE               	goto	l2346
  4047  0023D6  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4048  0023DA  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4049  0023DE  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4050  0023E2  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  4051  0023E6  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  4052  0023EA  EC51  F013         	call	___ftpack	;wreg free
  4053  0023EE  C001  F015         	movff	?___ftpack,?___ftmul
  4054  0023F2  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  4055  0023F6  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  4056  0023FA  0012               	return	
  4057  0023FC                     __end_of___ftmul:
  4058                           	opt stack 0
  4059                           tblptru	equ	0xFF8
  4060                           tblptrh	equ	0xFF7
  4061                           tblptrl	equ	0xFF6
  4062                           tablat	equ	0xFF5
  4063                           prodh	equ	0xFF4
  4064                           prodl	equ	0xFF3
  4065                           postinc0	equ	0xFEE
  4066                           wreg	equ	0xFE8
  4067                           postdec1	equ	0xFE5
  4068                           fsr1l	equ	0xFE1
  4069                           indf2	equ	0xFDF
  4070                           postinc2	equ	0xFDE
  4071                           postdec2	equ	0xFDD
  4072                           fsr2h	equ	0xFDA
  4073                           fsr2l	equ	0xFD9
  4074                           status	equ	0xFD8
  4075                           
  4076 ;; *************** function ___awmod *****************
  4077 ;; Defined at:
  4078 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/awmod.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;  dividend        2    0[COMRAM] int 
  4081 ;;  divisor         2    2[COMRAM] int 
  4082 ;; Auto vars:     Size  Location     Type
  4083 ;;  sign            1    5[COMRAM] unsigned char 
  4084 ;;  counter         1    4[COMRAM] unsigned char 
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  2    0[COMRAM] int 
  4087 ;; Registers used:
  4088 ;;		wreg, status,2, status,0
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4094 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4095 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4097 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4098 ;;Total ram usage:        6 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; This function calls:
  4101 ;;		Nothing
  4102 ;; This function is called by:
  4103 ;;		_fround
  4104 ;;		_scale
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           	psect	text12
  4109  00297A                     __ptext12:
  4110                           	opt stack 0
  4111  00297A                     ___awmod:
  4112                           	opt stack 27
  4113                           
  4114                           ;incstack = 0
  4115  00297A  0E00               	movlw	0
  4116  00297C  6E06               	movwf	___awmod@sign,c
  4117  00297E  AE02               	btfss	___awmod@dividend+1,7,c
  4118  002980  D006               	goto	l2410
  4119  002982  6C01               	negf	___awmod@dividend,c
  4120  002984  1E02               	comf	___awmod@dividend+1,f,c
  4121  002986  B0D8               	btfsc	status,0,c
  4122  002988  2A02               	incf	___awmod@dividend+1,f,c
  4123  00298A  0E01               	movlw	1
  4124  00298C  6E06               	movwf	___awmod@sign,c
  4125  00298E                     l2410:
  4126  00298E  AE04               	btfss	___awmod@divisor+1,7,c
  4127  002990  D004               	goto	l2414
  4128  002992  6C03               	negf	___awmod@divisor,c
  4129  002994  1E04               	comf	___awmod@divisor+1,f,c
  4130  002996  B0D8               	btfsc	status,0,c
  4131  002998  2A04               	incf	___awmod@divisor+1,f,c
  4132  00299A                     l2414:
  4133  00299A  5003               	movf	___awmod@divisor,w,c
  4134  00299C  1004               	iorwf	___awmod@divisor+1,w,c
  4135  00299E  B4D8               	btfsc	status,2,c
  4136  0029A0  D018               	goto	l2430
  4137  0029A2  0E01               	movlw	1
  4138  0029A4  6E05               	movwf	___awmod@counter,c
  4139  0029A6  D004               	goto	l2420
  4140  0029A8                     l2418:
  4141  0029A8  90D8               	bcf	status,0,c
  4142  0029AA  3603               	rlcf	___awmod@divisor,f,c
  4143  0029AC  3604               	rlcf	___awmod@divisor+1,f,c
  4144  0029AE  2A05               	incf	___awmod@counter,f,c
  4145  0029B0                     l2420:
  4146  0029B0  AE04               	btfss	___awmod@divisor+1,7,c
  4147  0029B2  D7FA               	goto	l2418
  4148  0029B4                     l2422:
  4149  0029B4  5003               	movf	___awmod@divisor,w,c
  4150  0029B6  5C01               	subwf	___awmod@dividend,w,c
  4151  0029B8  5004               	movf	___awmod@divisor+1,w,c
  4152  0029BA  5802               	subwfb	___awmod@dividend+1,w,c
  4153  0029BC  A0D8               	btfss	status,0,c
  4154  0029BE  D004               	goto	l2426
  4155  0029C0  5003               	movf	___awmod@divisor,w,c
  4156  0029C2  5E01               	subwf	___awmod@dividend,f,c
  4157  0029C4  5004               	movf	___awmod@divisor+1,w,c
  4158  0029C6  5A02               	subwfb	___awmod@dividend+1,f,c
  4159  0029C8                     l2426:
  4160  0029C8  90D8               	bcf	status,0,c
  4161  0029CA  3204               	rrcf	___awmod@divisor+1,f,c
  4162  0029CC  3203               	rrcf	___awmod@divisor,f,c
  4163  0029CE  2E05               	decfsz	___awmod@counter,f,c
  4164  0029D0  D7F1               	goto	l2422
  4165  0029D2                     l2430:
  4166  0029D2  5006               	movf	___awmod@sign,w,c
  4167  0029D4  B4D8               	btfsc	status,2,c
  4168  0029D6  D004               	goto	l2434
  4169  0029D8  6C01               	negf	___awmod@dividend,c
  4170  0029DA  1E02               	comf	___awmod@dividend+1,f,c
  4171  0029DC  B0D8               	btfsc	status,0,c
  4172  0029DE  2A02               	incf	___awmod@dividend+1,f,c
  4173  0029E0                     l2434:
  4174  0029E0  C001  F001         	movff	___awmod@dividend,?___awmod
  4175  0029E4  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4176  0029E8  0012               	return	
  4177  0029EA                     __end_of___awmod:
  4178                           	opt stack 0
  4179                           tblptru	equ	0xFF8
  4180                           tblptrh	equ	0xFF7
  4181                           tblptrl	equ	0xFF6
  4182                           tablat	equ	0xFF5
  4183                           prodh	equ	0xFF4
  4184                           prodl	equ	0xFF3
  4185                           postinc0	equ	0xFEE
  4186                           wreg	equ	0xFE8
  4187                           postdec1	equ	0xFE5
  4188                           fsr1l	equ	0xFE1
  4189                           indf2	equ	0xFDF
  4190                           postinc2	equ	0xFDE
  4191                           postdec2	equ	0xFDD
  4192                           fsr2h	equ	0xFDA
  4193                           fsr2l	equ	0xFD9
  4194                           status	equ	0xFD8
  4195                           
  4196 ;; *************** function ___awdiv *****************
  4197 ;; Defined at:
  4198 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/awdiv.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;  dividend        2    6[COMRAM] int 
  4201 ;;  divisor         2    8[COMRAM] int 
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;  quotient        2   12[COMRAM] int 
  4204 ;;  sign            1   11[COMRAM] unsigned char 
  4205 ;;  counter         1   10[COMRAM] unsigned char 
  4206 ;; Return value:  Size  Location     Type
  4207 ;;                  2    6[COMRAM] int 
  4208 ;; Registers used:
  4209 ;;		wreg, status,2, status,0
  4210 ;; Tracked objects:
  4211 ;;		On entry : 0/0
  4212 ;;		On exit  : 0/0
  4213 ;;		Unchanged: 0/0
  4214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4215 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4216 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4218 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4219 ;;Total ram usage:        8 bytes
  4220 ;; Hardware stack levels used:    1
  4221 ;; This function calls:
  4222 ;;		Nothing
  4223 ;; This function is called by:
  4224 ;;		_fround
  4225 ;;		_scale
  4226 ;;		_printf
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           	psect	text13
  4231  002874                     __ptext13:
  4232                           	opt stack 0
  4233  002874                     ___awdiv:
  4234                           	opt stack 27
  4235                           
  4236                           ;incstack = 0
  4237  002874  0E00               	movlw	0
  4238  002876  6E0C               	movwf	___awdiv@sign,c
  4239  002878  AE0A               	btfss	___awdiv@divisor+1,7,c
  4240  00287A  D006               	goto	l2366
  4241  00287C  6C09               	negf	___awdiv@divisor,c
  4242  00287E  1E0A               	comf	___awdiv@divisor+1,f,c
  4243  002880  B0D8               	btfsc	status,0,c
  4244  002882  2A0A               	incf	___awdiv@divisor+1,f,c
  4245  002884  0E01               	movlw	1
  4246  002886  6E0C               	movwf	___awdiv@sign,c
  4247  002888                     l2366:
  4248  002888  AE08               	btfss	___awdiv@dividend+1,7,c
  4249  00288A  D006               	goto	l2372
  4250  00288C  6C07               	negf	___awdiv@dividend,c
  4251  00288E  1E08               	comf	___awdiv@dividend+1,f,c
  4252  002890  B0D8               	btfsc	status,0,c
  4253  002892  2A08               	incf	___awdiv@dividend+1,f,c
  4254  002894  0E01               	movlw	1
  4255  002896  1A0C               	xorwf	___awdiv@sign,f,c
  4256  002898                     l2372:
  4257  002898  0E00               	movlw	0
  4258  00289A  6E0E               	movwf	___awdiv@quotient+1,c
  4259  00289C  0E00               	movlw	0
  4260  00289E  6E0D               	movwf	___awdiv@quotient,c
  4261  0028A0  5009               	movf	___awdiv@divisor,w,c
  4262  0028A2  100A               	iorwf	___awdiv@divisor+1,w,c
  4263  0028A4  B4D8               	btfsc	status,2,c
  4264  0028A6  D01C               	goto	l2394
  4265  0028A8  0E01               	movlw	1
  4266  0028AA  6E0B               	movwf	___awdiv@counter,c
  4267  0028AC  D004               	goto	l2380
  4268  0028AE                     l2378:
  4269  0028AE  90D8               	bcf	status,0,c
  4270  0028B0  3609               	rlcf	___awdiv@divisor,f,c
  4271  0028B2  360A               	rlcf	___awdiv@divisor+1,f,c
  4272  0028B4  2A0B               	incf	___awdiv@counter,f,c
  4273  0028B6                     l2380:
  4274  0028B6  AE0A               	btfss	___awdiv@divisor+1,7,c
  4275  0028B8  D7FA               	goto	l2378
  4276  0028BA                     l2382:
  4277  0028BA  90D8               	bcf	status,0,c
  4278  0028BC  360D               	rlcf	___awdiv@quotient,f,c
  4279  0028BE  360E               	rlcf	___awdiv@quotient+1,f,c
  4280  0028C0  5009               	movf	___awdiv@divisor,w,c
  4281  0028C2  5C07               	subwf	___awdiv@dividend,w,c
  4282  0028C4  500A               	movf	___awdiv@divisor+1,w,c
  4283  0028C6  5808               	subwfb	___awdiv@dividend+1,w,c
  4284  0028C8  A0D8               	btfss	status,0,c
  4285  0028CA  D005               	goto	l2390
  4286  0028CC  5009               	movf	___awdiv@divisor,w,c
  4287  0028CE  5E07               	subwf	___awdiv@dividend,f,c
  4288  0028D0  500A               	movf	___awdiv@divisor+1,w,c
  4289  0028D2  5A08               	subwfb	___awdiv@dividend+1,f,c
  4290  0028D4  800D               	bsf	___awdiv@quotient,0,c
  4291  0028D6                     l2390:
  4292  0028D6  90D8               	bcf	status,0,c
  4293  0028D8  320A               	rrcf	___awdiv@divisor+1,f,c
  4294  0028DA  3209               	rrcf	___awdiv@divisor,f,c
  4295  0028DC  2E0B               	decfsz	___awdiv@counter,f,c
  4296  0028DE  D7ED               	goto	l2382
  4297  0028E0                     l2394:
  4298  0028E0  500C               	movf	___awdiv@sign,w,c
  4299  0028E2  B4D8               	btfsc	status,2,c
  4300  0028E4  D004               	goto	l2398
  4301  0028E6  6C0D               	negf	___awdiv@quotient,c
  4302  0028E8  1E0E               	comf	___awdiv@quotient+1,f,c
  4303  0028EA  B0D8               	btfsc	status,0,c
  4304  0028EC  2A0E               	incf	___awdiv@quotient+1,f,c
  4305  0028EE                     l2398:
  4306  0028EE  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4307  0028F2  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4308  0028F6  0012               	return	
  4309  0028F8                     __end_of___awdiv:
  4310                           	opt stack 0
  4311                           tblptru	equ	0xFF8
  4312                           tblptrh	equ	0xFF7
  4313                           tblptrl	equ	0xFF6
  4314                           tablat	equ	0xFF5
  4315                           prodh	equ	0xFF4
  4316                           prodl	equ	0xFF3
  4317                           postinc0	equ	0xFEE
  4318                           wreg	equ	0xFE8
  4319                           postdec1	equ	0xFE5
  4320                           fsr1l	equ	0xFE1
  4321                           indf2	equ	0xFDF
  4322                           postinc2	equ	0xFDE
  4323                           postdec2	equ	0xFDD
  4324                           fsr2h	equ	0xFDA
  4325                           fsr2l	equ	0xFD9
  4326                           status	equ	0xFD8
  4327                           
  4328 ;; *************** function __tdiv_to_l_ *****************
  4329 ;; Defined at:
  4330 ;;		line 60 in file "/opt/microchip/xc8/v1.42/sources/common/ftdivl.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;  f1              3    0[COMRAM] float 
  4333 ;;  f2              3    3[COMRAM] float 
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;  quot            4    9[COMRAM] unsigned long 
  4336 ;;  exp1            1   14[COMRAM] unsigned char 
  4337 ;;  cntr            1   13[COMRAM] unsigned char 
  4338 ;; Return value:  Size  Location     Type
  4339 ;;                  4    0[COMRAM] unsigned long 
  4340 ;; Registers used:
  4341 ;;		wreg, status,2, status,0
  4342 ;; Tracked objects:
  4343 ;;		On entry : 0/0
  4344 ;;		On exit  : 0/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4347 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4348 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4349 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4350 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4351 ;;Total ram usage:       15 bytes
  4352 ;; Hardware stack levels used:    1
  4353 ;; This function calls:
  4354 ;;		Nothing
  4355 ;; This function is called by:
  4356 ;;		_printf
  4357 ;; This function uses a non-reentrant model
  4358 ;;
  4359                           
  4360                           	psect	text14
  4361  0020AE                     __ptext14:
  4362                           	opt stack 0
  4363  0020AE                     __tdiv_to_l_:
  4364                           	opt stack 28
  4365                           
  4366                           ;incstack = 0
  4367  0020AE  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4368  0020B2  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4369  0020B4  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4370  0020B6  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4371  0020B8  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4372  0020BA  E301               	bnc	u2411
  4373  0020BC  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4374  0020BE                     u2411:
  4375  0020BE  5007               	movf	??__tdiv_to_l_,w,c
  4376  0020C0  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4377  0020C2  500F               	movf	__tdiv_to_l_@exp1,w,c
  4378  0020C4  A4D8               	btfss	status,2,c
  4379  0020C6  D009               	goto	l2520
  4380  0020C8  0E00               	movlw	0
  4381  0020CA  6E01               	movwf	?__tdiv_to_l_,c
  4382  0020CC  0E00               	movlw	0
  4383  0020CE  6E02               	movwf	?__tdiv_to_l_+1,c
  4384  0020D0  0E00               	movlw	0
  4385  0020D2  6E03               	movwf	?__tdiv_to_l_+2,c
  4386  0020D4  0E00               	movlw	0
  4387  0020D6  6E04               	movwf	?__tdiv_to_l_+3,c
  4388  0020D8  0012               	return	
  4389  0020DA                     l2520:
  4390  0020DA  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4391  0020DE  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4392  0020E0  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4393  0020E2  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4394  0020E4  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4395  0020E6  E301               	bnc	u2431
  4396  0020E8  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4397  0020EA                     u2431:
  4398  0020EA  5007               	movf	??__tdiv_to_l_,w,c
  4399  0020EC  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4400  0020EE  500E               	movf	__tdiv_to_l_@cntr,w,c
  4401  0020F0  A4D8               	btfss	status,2,c
  4402  0020F2  D009               	goto	l2526
  4403  0020F4  0E00               	movlw	0
  4404  0020F6  6E01               	movwf	?__tdiv_to_l_,c
  4405  0020F8  0E00               	movlw	0
  4406  0020FA  6E02               	movwf	?__tdiv_to_l_+1,c
  4407  0020FC  0E00               	movlw	0
  4408  0020FE  6E03               	movwf	?__tdiv_to_l_+2,c
  4409  002100  0E00               	movlw	0
  4410  002102  6E04               	movwf	?__tdiv_to_l_+3,c
  4411  002104  0012               	return	
  4412  002106                     l2526:
  4413  002106  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4414  002108  0EFF               	movlw	255
  4415  00210A  1601               	andwf	__tdiv_to_l_@f1,f,c
  4416  00210C  0EFF               	movlw	255
  4417  00210E  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4418  002110  0E00               	movlw	0
  4419  002112  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4420  002114  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4421  002116  0EFF               	movlw	255
  4422  002118  1604               	andwf	__tdiv_to_l_@f2,f,c
  4423  00211A  0EFF               	movlw	255
  4424  00211C  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4425  00211E  0E00               	movlw	0
  4426  002120  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4427  002122  0E00               	movlw	0
  4428  002124  6E0A               	movwf	__tdiv_to_l_@quot,c
  4429  002126  0E00               	movlw	0
  4430  002128  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4431  00212A  0E00               	movlw	0
  4432  00212C  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4433  00212E  0E00               	movlw	0
  4434  002130  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4435  002132  0E7F               	movlw	127
  4436  002134  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4437  002136  500E               	movf	__tdiv_to_l_@cntr,w,c
  4438  002138  0F98               	addlw	152
  4439  00213A  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4440  00213C  0E18               	movlw	24
  4441  00213E  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4442  002140                     l658:
  4443  002140  90D8               	bcf	status,0,c
  4444  002142  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4445  002144  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4446  002146  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4447  002148  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4448  00214A  5004               	movf	__tdiv_to_l_@f2,w,c
  4449  00214C  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4450  00214E  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4451  002150  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4452  002152  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4453  002154  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4454  002156  A0D8               	btfss	status,0,c
  4455  002158  D007               	goto	l659
  4456  00215A  5004               	movf	__tdiv_to_l_@f2,w,c
  4457  00215C  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4458  00215E  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4459  002160  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4460  002162  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4461  002164  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4462  002166  800A               	bsf	__tdiv_to_l_@quot,0,c
  4463  002168                     l659:
  4464  002168  90D8               	bcf	status,0,c
  4465  00216A  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4466  00216C  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4467  00216E  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4468  002170  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4469  002172  D7E6               	goto	l658
  4470  002174  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4471  002176  D016               	goto	l2560
  4472  002178  500F               	movf	__tdiv_to_l_@exp1,w,c
  4473  00217A  0A80               	xorlw	128
  4474  00217C  0F97               	addlw	151
  4475  00217E  B0D8               	btfsc	status,0,c
  4476  002180  D009               	goto	l2556
  4477  002182  0E00               	movlw	0
  4478  002184  6E01               	movwf	?__tdiv_to_l_,c
  4479  002186  0E00               	movlw	0
  4480  002188  6E02               	movwf	?__tdiv_to_l_+1,c
  4481  00218A  0E00               	movlw	0
  4482  00218C  6E03               	movwf	?__tdiv_to_l_+2,c
  4483  00218E  0E00               	movlw	0
  4484  002190  6E04               	movwf	?__tdiv_to_l_+3,c
  4485  002192  0012               	return	
  4486  002194                     l2556:
  4487  002194  90D8               	bcf	status,0,c
  4488  002196  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4489  002198  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4490  00219A  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4491  00219C  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4492  00219E  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4493  0021A0  D7F9               	goto	l2556
  4494  0021A2  D015               	goto	l665
  4495  0021A4                     l2560:
  4496  0021A4  0E17               	movlw	23
  4497  0021A6  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4498  0021A8  D00F               	goto	l2568
  4499  0021AA  0E00               	movlw	0
  4500  0021AC  6E01               	movwf	?__tdiv_to_l_,c
  4501  0021AE  0E00               	movlw	0
  4502  0021B0  6E02               	movwf	?__tdiv_to_l_+1,c
  4503  0021B2  0E00               	movlw	0
  4504  0021B4  6E03               	movwf	?__tdiv_to_l_+2,c
  4505  0021B6  0E00               	movlw	0
  4506  0021B8  6E04               	movwf	?__tdiv_to_l_+3,c
  4507  0021BA  0012               	return	
  4508  0021BC                     l2566:
  4509  0021BC  90D8               	bcf	status,0,c
  4510  0021BE  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4511  0021C0  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4512  0021C2  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4513  0021C4  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4514  0021C6  060F               	decf	__tdiv_to_l_@exp1,f,c
  4515  0021C8                     l2568:
  4516  0021C8  500F               	movf	__tdiv_to_l_@exp1,w,c
  4517  0021CA  A4D8               	btfss	status,2,c
  4518  0021CC  D7F7               	goto	l2566
  4519  0021CE                     l665:
  4520  0021CE  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4521  0021D2  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4522  0021D6  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4523  0021DA  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4524  0021DE  0012               	return		;funcret
  4525  0021E0                     __end_of__tdiv_to_l_:
  4526                           	opt stack 0
  4527                           tblptru	equ	0xFF8
  4528                           tblptrh	equ	0xFF7
  4529                           tblptrl	equ	0xFF6
  4530                           tablat	equ	0xFF5
  4531                           prodh	equ	0xFF4
  4532                           prodl	equ	0xFF3
  4533                           postinc0	equ	0xFEE
  4534                           wreg	equ	0xFE8
  4535                           postdec1	equ	0xFE5
  4536                           fsr1l	equ	0xFE1
  4537                           indf2	equ	0xFDF
  4538                           postinc2	equ	0xFDE
  4539                           postdec2	equ	0xFDD
  4540                           fsr2h	equ	0xFDA
  4541                           fsr2l	equ	0xFD9
  4542                           status	equ	0xFD8
  4543                           
  4544 ;; *************** function __div_to_l_ *****************
  4545 ;; Defined at:
  4546 ;;		line 60 in file "/opt/microchip/xc8/v1.42/sources/common/fldivl.c"
  4547 ;; Parameters:    Size  Location     Type
  4548 ;;  f1              3    0[COMRAM] unsigned long 
  4549 ;;  f2              3    3[COMRAM] unsigned long 
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;  quot            4    6[COMRAM] unsigned long 
  4552 ;;  exp1            1   11[COMRAM] unsigned char 
  4553 ;;  cntr            1   10[COMRAM] unsigned char 
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  4    0[COMRAM] unsigned long 
  4556 ;; Registers used:
  4557 ;;		wreg, status,2, status,0
  4558 ;; Tracked objects:
  4559 ;;		On entry : 0/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4563 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4564 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4566 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4567 ;;Total ram usage:       12 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; This function calls:
  4570 ;;		Nothing
  4571 ;; This function is called by:
  4572 ;;		_printf
  4573 ;; This function uses a non-reentrant model
  4574 ;;
  4575                           
  4576                           	psect	text15
  4577  0021E0                     __ptext15:
  4578                           	opt stack 0
  4579  0021E0                     __div_to_l_:
  4580                           	opt stack 28
  4581                           
  4582                           ;incstack = 0
  4583  0021E0  3403               	rlcf	__div_to_l_@f1+2,w,c
  4584  0021E2  3404               	rlcf	__div_to_l_@f1+3,w,c
  4585  0021E4  6E0C               	movwf	__div_to_l_@exp1,c
  4586  0021E6  500C               	movf	__div_to_l_@exp1,w,c
  4587  0021E8  A4D8               	btfss	status,2,c
  4588  0021EA  D009               	goto	l2576
  4589  0021EC  0E00               	movlw	0
  4590  0021EE  6E01               	movwf	?__div_to_l_,c
  4591  0021F0  0E00               	movlw	0
  4592  0021F2  6E02               	movwf	?__div_to_l_+1,c
  4593  0021F4  0E00               	movlw	0
  4594  0021F6  6E03               	movwf	?__div_to_l_+2,c
  4595  0021F8  0E00               	movlw	0
  4596  0021FA  6E04               	movwf	?__div_to_l_+3,c
  4597  0021FC  0012               	return	
  4598  0021FE                     l2576:
  4599  0021FE  3406               	rlcf	__div_to_l_@f2+2,w,c
  4600  002200  3407               	rlcf	__div_to_l_@f2+3,w,c
  4601  002202  6E0B               	movwf	__div_to_l_@cntr,c
  4602  002204  500B               	movf	__div_to_l_@cntr,w,c
  4603  002206  A4D8               	btfss	status,2,c
  4604  002208  D009               	goto	l2582
  4605  00220A  0E00               	movlw	0
  4606  00220C  6E01               	movwf	?__div_to_l_,c
  4607  00220E  0E00               	movlw	0
  4608  002210  6E02               	movwf	?__div_to_l_+1,c
  4609  002212  0E00               	movlw	0
  4610  002214  6E03               	movwf	?__div_to_l_+2,c
  4611  002216  0E00               	movlw	0
  4612  002218  6E04               	movwf	?__div_to_l_+3,c
  4613  00221A  0012               	return	
  4614  00221C                     l2582:
  4615  00221C  8E03               	bsf	__div_to_l_@f1+2,7,c
  4616  00221E  0EFF               	movlw	255
  4617  002220  1601               	andwf	__div_to_l_@f1,f,c
  4618  002222  0EFF               	movlw	255
  4619  002224  1602               	andwf	__div_to_l_@f1+1,f,c
  4620  002226  0EFF               	movlw	255
  4621  002228  1603               	andwf	__div_to_l_@f1+2,f,c
  4622  00222A  0E00               	movlw	0
  4623  00222C  1604               	andwf	__div_to_l_@f1+3,f,c
  4624  00222E  8E06               	bsf	__div_to_l_@f2+2,7,c
  4625  002230  0EFF               	movlw	255
  4626  002232  1604               	andwf	__div_to_l_@f2,f,c
  4627  002234  0EFF               	movlw	255
  4628  002236  1605               	andwf	__div_to_l_@f2+1,f,c
  4629  002238  0EFF               	movlw	255
  4630  00223A  1606               	andwf	__div_to_l_@f2+2,f,c
  4631  00223C  0E00               	movlw	0
  4632  00223E  1607               	andwf	__div_to_l_@f2+3,f,c
  4633  002240  0E00               	movlw	0
  4634  002242  6E07               	movwf	__div_to_l_@quot,c
  4635  002244  0E00               	movlw	0
  4636  002246  6E08               	movwf	__div_to_l_@quot+1,c
  4637  002248  0E00               	movlw	0
  4638  00224A  6E09               	movwf	__div_to_l_@quot+2,c
  4639  00224C  0E00               	movlw	0
  4640  00224E  6E0A               	movwf	__div_to_l_@quot+3,c
  4641  002250  0E7F               	movlw	127
  4642  002252  5E0C               	subwf	__div_to_l_@exp1,f,c
  4643  002254  500B               	movf	__div_to_l_@cntr,w,c
  4644  002256  0FA0               	addlw	160
  4645  002258  5E0C               	subwf	__div_to_l_@exp1,f,c
  4646  00225A  0E20               	movlw	32
  4647  00225C  6E0B               	movwf	__div_to_l_@cntr,c
  4648  00225E                     l2596:
  4649  00225E  90D8               	bcf	status,0,c
  4650  002260  3607               	rlcf	__div_to_l_@quot,f,c
  4651  002262  3608               	rlcf	__div_to_l_@quot+1,f,c
  4652  002264  3609               	rlcf	__div_to_l_@quot+2,f,c
  4653  002266  360A               	rlcf	__div_to_l_@quot+3,f,c
  4654  002268  5004               	movf	__div_to_l_@f2,w,c
  4655  00226A  5C01               	subwf	__div_to_l_@f1,w,c
  4656  00226C  5005               	movf	__div_to_l_@f2+1,w,c
  4657  00226E  5802               	subwfb	__div_to_l_@f1+1,w,c
  4658  002270  5006               	movf	__div_to_l_@f2+2,w,c
  4659  002272  5803               	subwfb	__div_to_l_@f1+2,w,c
  4660  002274  5007               	movf	__div_to_l_@f2+3,w,c
  4661  002276  5804               	subwfb	__div_to_l_@f1+3,w,c
  4662  002278  A0D8               	btfss	status,0,c
  4663  00227A  D009               	goto	l2604
  4664  00227C  5004               	movf	__div_to_l_@f2,w,c
  4665  00227E  5E01               	subwf	__div_to_l_@f1,f,c
  4666  002280  5005               	movf	__div_to_l_@f2+1,w,c
  4667  002282  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4668  002284  5006               	movf	__div_to_l_@f2+2,w,c
  4669  002286  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4670  002288  5007               	movf	__div_to_l_@f2+3,w,c
  4671  00228A  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4672  00228C  8007               	bsf	__div_to_l_@quot,0,c
  4673  00228E                     l2604:
  4674  00228E  90D8               	bcf	status,0,c
  4675  002290  3601               	rlcf	__div_to_l_@f1,f,c
  4676  002292  3602               	rlcf	__div_to_l_@f1+1,f,c
  4677  002294  3603               	rlcf	__div_to_l_@f1+2,f,c
  4678  002296  3604               	rlcf	__div_to_l_@f1+3,f,c
  4679  002298  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4680  00229A  D7E1               	goto	l2596
  4681  00229C  AE0C               	btfss	__div_to_l_@exp1,7,c
  4682  00229E  D016               	goto	l2620
  4683  0022A0  500C               	movf	__div_to_l_@exp1,w,c
  4684  0022A2  0A80               	xorlw	128
  4685  0022A4  0F9F               	addlw	159
  4686  0022A6  B0D8               	btfsc	status,0,c
  4687  0022A8  D009               	goto	l2616
  4688  0022AA  0E00               	movlw	0
  4689  0022AC  6E01               	movwf	?__div_to_l_,c
  4690  0022AE  0E00               	movlw	0
  4691  0022B0  6E02               	movwf	?__div_to_l_+1,c
  4692  0022B2  0E00               	movlw	0
  4693  0022B4  6E03               	movwf	?__div_to_l_+2,c
  4694  0022B6  0E00               	movlw	0
  4695  0022B8  6E04               	movwf	?__div_to_l_+3,c
  4696  0022BA  0012               	return	
  4697  0022BC                     l2616:
  4698  0022BC  90D8               	bcf	status,0,c
  4699  0022BE  320A               	rrcf	__div_to_l_@quot+3,f,c
  4700  0022C0  3209               	rrcf	__div_to_l_@quot+2,f,c
  4701  0022C2  3208               	rrcf	__div_to_l_@quot+1,f,c
  4702  0022C4  3207               	rrcf	__div_to_l_@quot,f,c
  4703  0022C6  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4704  0022C8  D7F9               	goto	l2616
  4705  0022CA  D015               	goto	l561
  4706  0022CC                     l2620:
  4707  0022CC  0E1F               	movlw	31
  4708  0022CE  640C               	cpfsgt	__div_to_l_@exp1,c
  4709  0022D0  D00F               	goto	l2628
  4710  0022D2  0E00               	movlw	0
  4711  0022D4  6E01               	movwf	?__div_to_l_,c
  4712  0022D6  0E00               	movlw	0
  4713  0022D8  6E02               	movwf	?__div_to_l_+1,c
  4714  0022DA  0E00               	movlw	0
  4715  0022DC  6E03               	movwf	?__div_to_l_+2,c
  4716  0022DE  0E00               	movlw	0
  4717  0022E0  6E04               	movwf	?__div_to_l_+3,c
  4718  0022E2  0012               	return	
  4719  0022E4                     l2626:
  4720  0022E4  90D8               	bcf	status,0,c
  4721  0022E6  3607               	rlcf	__div_to_l_@quot,f,c
  4722  0022E8  3608               	rlcf	__div_to_l_@quot+1,f,c
  4723  0022EA  3609               	rlcf	__div_to_l_@quot+2,f,c
  4724  0022EC  360A               	rlcf	__div_to_l_@quot+3,f,c
  4725  0022EE  060C               	decf	__div_to_l_@exp1,f,c
  4726  0022F0                     l2628:
  4727  0022F0  500C               	movf	__div_to_l_@exp1,w,c
  4728  0022F2  A4D8               	btfss	status,2,c
  4729  0022F4  D7F7               	goto	l2626
  4730  0022F6                     l561:
  4731  0022F6  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4732  0022FA  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4733  0022FE  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4734  002302  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4735  002306  0012               	return		;funcret
  4736  002308                     __end_of__div_to_l_:
  4737                           	opt stack 0
  4738                           tblptru	equ	0xFF8
  4739                           tblptrh	equ	0xFF7
  4740                           tblptrl	equ	0xFF6
  4741                           tablat	equ	0xFF5
  4742                           prodh	equ	0xFF4
  4743                           prodl	equ	0xFF3
  4744                           postinc0	equ	0xFEE
  4745                           wreg	equ	0xFE8
  4746                           postdec1	equ	0xFE5
  4747                           fsr1l	equ	0xFE1
  4748                           indf2	equ	0xFDF
  4749                           postinc2	equ	0xFDE
  4750                           postdec2	equ	0xFDD
  4751                           fsr2h	equ	0xFDA
  4752                           fsr2l	equ	0xFD9
  4753                           status	equ	0xFD8
  4754                           
  4755 ;; *************** function ___lltoft *****************
  4756 ;; Defined at:
  4757 ;;		line 35 in file "/opt/microchip/xc8/v1.42/sources/common/lltoft.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;  c               4    8[COMRAM] unsigned long 
  4760 ;; Auto vars:     Size  Location     Type
  4761 ;;  exp             1   16[COMRAM] unsigned char 
  4762 ;; Return value:  Size  Location     Type
  4763 ;;                  3    8[COMRAM] float 
  4764 ;; Registers used:
  4765 ;;		wreg, status,2, status,0, cstack
  4766 ;; Tracked objects:
  4767 ;;		On entry : 0/0
  4768 ;;		On exit  : 0/0
  4769 ;;		Unchanged: 0/0
  4770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4771 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4772 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4773 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4774 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4775 ;;Total ram usage:        9 bytes
  4776 ;; Hardware stack levels used:    1
  4777 ;; Hardware stack levels required when called:    1
  4778 ;; This function calls:
  4779 ;;		___ftpack
  4780 ;; This function is called by:
  4781 ;;		_printf
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785                           	psect	text16
  4786  002ABE                     __ptext16:
  4787                           	opt stack 0
  4788  002ABE                     ___lltoft:
  4789                           	opt stack 27
  4790                           
  4791                           ;incstack = 0
  4792  002ABE  0E8E               	movlw	142
  4793  002AC0  6E11               	movwf	___lltoft@exp,c
  4794  002AC2  D006               	goto	l2748
  4795  002AC4                     l2746:
  4796  002AC4  90D8               	bcf	status,0,c
  4797  002AC6  320C               	rrcf	___lltoft@c+3,f,c
  4798  002AC8  320B               	rrcf	___lltoft@c+2,f,c
  4799  002ACA  320A               	rrcf	___lltoft@c+1,f,c
  4800  002ACC  3209               	rrcf	___lltoft@c,f,c
  4801  002ACE  2A11               	incf	___lltoft@exp,f,c
  4802  002AD0                     l2748:
  4803  002AD0  0E00               	movlw	0
  4804  002AD2  1409               	andwf	___lltoft@c,w,c
  4805  002AD4  6E0D               	movwf	??___lltoft& (0+255),c
  4806  002AD6  0E00               	movlw	0
  4807  002AD8  140A               	andwf	___lltoft@c+1,w,c
  4808  002ADA  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4809  002ADC  0E00               	movlw	0
  4810  002ADE  140B               	andwf	___lltoft@c+2,w,c
  4811  002AE0  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4812  002AE2  0EFF               	movlw	255
  4813  002AE4  140C               	andwf	___lltoft@c+3,w,c
  4814  002AE6  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4815  002AE8  500D               	movf	??___lltoft,w,c
  4816  002AEA  100E               	iorwf	??___lltoft+1,w,c
  4817  002AEC  100F               	iorwf	??___lltoft+2,w,c
  4818  002AEE  1010               	iorwf	??___lltoft+3,w,c
  4819  002AF0  A4D8               	btfss	status,2,c
  4820  002AF2  D7E8               	goto	l2746
  4821  002AF4  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4822  002AF8  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4823  002AFC  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4824  002B00  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4825  002B04  0E00               	movlw	0
  4826  002B06  6E05               	movwf	___ftpack@sign,c
  4827  002B08  EC51  F013         	call	___ftpack	;wreg free
  4828  002B0C  C001  F009         	movff	?___ftpack,?___lltoft
  4829  002B10  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4830  002B14  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4831  002B18  0012               	return	
  4832  002B1A                     __end_of___lltoft:
  4833                           	opt stack 0
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           prodh	equ	0xFF4
  4839                           prodl	equ	0xFF3
  4840                           postinc0	equ	0xFEE
  4841                           wreg	equ	0xFE8
  4842                           postdec1	equ	0xFE5
  4843                           fsr1l	equ	0xFE1
  4844                           indf2	equ	0xFDF
  4845                           postinc2	equ	0xFDE
  4846                           postdec2	equ	0xFDD
  4847                           fsr2h	equ	0xFDA
  4848                           fsr2l	equ	0xFD9
  4849                           status	equ	0xFD8
  4850                           
  4851 ;; *************** function ___llmod *****************
  4852 ;; Defined at:
  4853 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/llmod.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;  dividend        4    0[COMRAM] unsigned long 
  4856 ;;  divisor         4    4[COMRAM] unsigned long 
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;  counter         1    8[COMRAM] unsigned char 
  4859 ;; Return value:  Size  Location     Type
  4860 ;;                  4    0[COMRAM] unsigned long 
  4861 ;; Registers used:
  4862 ;;		wreg, status,2, status,0
  4863 ;; Tracked objects:
  4864 ;;		On entry : 0/0
  4865 ;;		On exit  : 0/0
  4866 ;;		Unchanged: 0/0
  4867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4868 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4869 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4871 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4872 ;;Total ram usage:        9 bytes
  4873 ;; Hardware stack levels used:    1
  4874 ;; This function calls:
  4875 ;;		Nothing
  4876 ;; This function is called by:
  4877 ;;		_printf
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881                           	psect	text17
  4882  002A58                     __ptext17:
  4883                           	opt stack 0
  4884  002A58                     ___llmod:
  4885                           	opt stack 28
  4886                           
  4887                           ;incstack = 0
  4888  002A58  5005               	movf	___llmod@divisor,w,c
  4889  002A5A  1006               	iorwf	___llmod@divisor+1,w,c
  4890  002A5C  1007               	iorwf	___llmod@divisor+2,w,c
  4891  002A5E  1008               	iorwf	___llmod@divisor+3,w,c
  4892  002A60  B4D8               	btfsc	status,2,c
  4893  002A62  D024               	goto	l750
  4894  002A64  0E01               	movlw	1
  4895  002A66  6E09               	movwf	___llmod@counter,c
  4896  002A68  D006               	goto	l2734
  4897  002A6A                     l2732:
  4898  002A6A  90D8               	bcf	status,0,c
  4899  002A6C  3605               	rlcf	___llmod@divisor,f,c
  4900  002A6E  3606               	rlcf	___llmod@divisor+1,f,c
  4901  002A70  3607               	rlcf	___llmod@divisor+2,f,c
  4902  002A72  3608               	rlcf	___llmod@divisor+3,f,c
  4903  002A74  2A09               	incf	___llmod@counter,f,c
  4904  002A76                     l2734:
  4905  002A76  AE08               	btfss	___llmod@divisor+3,7,c
  4906  002A78  D7F8               	goto	l2732
  4907  002A7A                     l2736:
  4908  002A7A  5005               	movf	___llmod@divisor,w,c
  4909  002A7C  5C01               	subwf	___llmod@dividend,w,c
  4910  002A7E  5006               	movf	___llmod@divisor+1,w,c
  4911  002A80  5802               	subwfb	___llmod@dividend+1,w,c
  4912  002A82  5007               	movf	___llmod@divisor+2,w,c
  4913  002A84  5803               	subwfb	___llmod@dividend+2,w,c
  4914  002A86  5008               	movf	___llmod@divisor+3,w,c
  4915  002A88  5804               	subwfb	___llmod@dividend+3,w,c
  4916  002A8A  A0D8               	btfss	status,0,c
  4917  002A8C  D008               	goto	l2740
  4918  002A8E  5005               	movf	___llmod@divisor,w,c
  4919  002A90  5E01               	subwf	___llmod@dividend,f,c
  4920  002A92  5006               	movf	___llmod@divisor+1,w,c
  4921  002A94  5A02               	subwfb	___llmod@dividend+1,f,c
  4922  002A96  5007               	movf	___llmod@divisor+2,w,c
  4923  002A98  5A03               	subwfb	___llmod@dividend+2,f,c
  4924  002A9A  5008               	movf	___llmod@divisor+3,w,c
  4925  002A9C  5A04               	subwfb	___llmod@dividend+3,f,c
  4926  002A9E                     l2740:
  4927  002A9E  90D8               	bcf	status,0,c
  4928  002AA0  3208               	rrcf	___llmod@divisor+3,f,c
  4929  002AA2  3207               	rrcf	___llmod@divisor+2,f,c
  4930  002AA4  3206               	rrcf	___llmod@divisor+1,f,c
  4931  002AA6  3205               	rrcf	___llmod@divisor,f,c
  4932  002AA8  2E09               	decfsz	___llmod@counter,f,c
  4933  002AAA  D7E7               	goto	l2736
  4934  002AAC                     l750:
  4935  002AAC  C001  F001         	movff	___llmod@dividend,?___llmod
  4936  002AB0  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4937  002AB4  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4938  002AB8  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4939  002ABC  0012               	return		;funcret
  4940  002ABE                     __end_of___llmod:
  4941                           	opt stack 0
  4942                           tblptru	equ	0xFF8
  4943                           tblptrh	equ	0xFF7
  4944                           tblptrl	equ	0xFF6
  4945                           tablat	equ	0xFF5
  4946                           prodh	equ	0xFF4
  4947                           prodl	equ	0xFF3
  4948                           postinc0	equ	0xFEE
  4949                           wreg	equ	0xFE8
  4950                           postdec1	equ	0xFE5
  4951                           fsr1l	equ	0xFE1
  4952                           indf2	equ	0xFDF
  4953                           postinc2	equ	0xFDE
  4954                           postdec2	equ	0xFDD
  4955                           fsr2h	equ	0xFDA
  4956                           fsr2l	equ	0xFD9
  4957                           status	equ	0xFD8
  4958                           
  4959 ;; *************** function ___lldiv *****************
  4960 ;; Defined at:
  4961 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/lldiv.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;  dividend        4    0[COMRAM] unsigned long 
  4964 ;;  divisor         4    4[COMRAM] unsigned long 
  4965 ;; Auto vars:     Size  Location     Type
  4966 ;;  quotient        4    8[COMRAM] unsigned long 
  4967 ;;  counter         1   12[COMRAM] unsigned char 
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  4    0[COMRAM] unsigned long 
  4970 ;; Registers used:
  4971 ;;		wreg, status,2, status,0
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4977 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4978 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4980 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4981 ;;Total ram usage:       13 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; This function calls:
  4984 ;;		Nothing
  4985 ;; This function is called by:
  4986 ;;		_printf
  4987 ;; This function uses a non-reentrant model
  4988 ;;
  4989                           
  4990                           	psect	text18
  4991  0028F8                     __ptext18:
  4992                           	opt stack 0
  4993  0028F8                     ___lldiv:
  4994                           	opt stack 28
  4995                           
  4996                           ;incstack = 0
  4997  0028F8  0E00               	movlw	0
  4998  0028FA  6E09               	movwf	___lldiv@quotient,c
  4999  0028FC  0E00               	movlw	0
  5000  0028FE  6E0A               	movwf	___lldiv@quotient+1,c
  5001  002900  0E00               	movlw	0
  5002  002902  6E0B               	movwf	___lldiv@quotient+2,c
  5003  002904  0E00               	movlw	0
  5004  002906  6E0C               	movwf	___lldiv@quotient+3,c
  5005  002908  5005               	movf	___lldiv@divisor,w,c
  5006  00290A  1006               	iorwf	___lldiv@divisor+1,w,c
  5007  00290C  1007               	iorwf	___lldiv@divisor+2,w,c
  5008  00290E  1008               	iorwf	___lldiv@divisor+3,w,c
  5009  002910  B4D8               	btfsc	status,2,c
  5010  002912  D02A               	goto	l740
  5011  002914  0E01               	movlw	1
  5012  002916  6E0D               	movwf	___lldiv@counter,c
  5013  002918  D006               	goto	l2714
  5014  00291A                     l2712:
  5015  00291A  90D8               	bcf	status,0,c
  5016  00291C  3605               	rlcf	___lldiv@divisor,f,c
  5017  00291E  3606               	rlcf	___lldiv@divisor+1,f,c
  5018  002920  3607               	rlcf	___lldiv@divisor+2,f,c
  5019  002922  3608               	rlcf	___lldiv@divisor+3,f,c
  5020  002924  2A0D               	incf	___lldiv@counter,f,c
  5021  002926                     l2714:
  5022  002926  AE08               	btfss	___lldiv@divisor+3,7,c
  5023  002928  D7F8               	goto	l2712
  5024  00292A                     l2716:
  5025  00292A  90D8               	bcf	status,0,c
  5026  00292C  3609               	rlcf	___lldiv@quotient,f,c
  5027  00292E  360A               	rlcf	___lldiv@quotient+1,f,c
  5028  002930  360B               	rlcf	___lldiv@quotient+2,f,c
  5029  002932  360C               	rlcf	___lldiv@quotient+3,f,c
  5030  002934  5005               	movf	___lldiv@divisor,w,c
  5031  002936  5C01               	subwf	___lldiv@dividend,w,c
  5032  002938  5006               	movf	___lldiv@divisor+1,w,c
  5033  00293A  5802               	subwfb	___lldiv@dividend+1,w,c
  5034  00293C  5007               	movf	___lldiv@divisor+2,w,c
  5035  00293E  5803               	subwfb	___lldiv@dividend+2,w,c
  5036  002940  5008               	movf	___lldiv@divisor+3,w,c
  5037  002942  5804               	subwfb	___lldiv@dividend+3,w,c
  5038  002944  A0D8               	btfss	status,0,c
  5039  002946  D009               	goto	l2724
  5040  002948  5005               	movf	___lldiv@divisor,w,c
  5041  00294A  5E01               	subwf	___lldiv@dividend,f,c
  5042  00294C  5006               	movf	___lldiv@divisor+1,w,c
  5043  00294E  5A02               	subwfb	___lldiv@dividend+1,f,c
  5044  002950  5007               	movf	___lldiv@divisor+2,w,c
  5045  002952  5A03               	subwfb	___lldiv@dividend+2,f,c
  5046  002954  5008               	movf	___lldiv@divisor+3,w,c
  5047  002956  5A04               	subwfb	___lldiv@dividend+3,f,c
  5048  002958  8009               	bsf	___lldiv@quotient,0,c
  5049  00295A                     l2724:
  5050  00295A  90D8               	bcf	status,0,c
  5051  00295C  3208               	rrcf	___lldiv@divisor+3,f,c
  5052  00295E  3207               	rrcf	___lldiv@divisor+2,f,c
  5053  002960  3206               	rrcf	___lldiv@divisor+1,f,c
  5054  002962  3205               	rrcf	___lldiv@divisor,f,c
  5055  002964  2E0D               	decfsz	___lldiv@counter,f,c
  5056  002966  D7E1               	goto	l2716
  5057  002968                     l740:
  5058  002968  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5059  00296C  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5060  002970  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5061  002974  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5062  002978  0012               	return		;funcret
  5063  00297A                     __end_of___lldiv:
  5064                           	opt stack 0
  5065                           tblptru	equ	0xFF8
  5066                           tblptrh	equ	0xFF7
  5067                           tblptrl	equ	0xFF6
  5068                           tablat	equ	0xFF5
  5069                           prodh	equ	0xFF4
  5070                           prodl	equ	0xFF3
  5071                           postinc0	equ	0xFEE
  5072                           wreg	equ	0xFE8
  5073                           postdec1	equ	0xFE5
  5074                           fsr1l	equ	0xFE1
  5075                           indf2	equ	0xFDF
  5076                           postinc2	equ	0xFDE
  5077                           postdec2	equ	0xFDD
  5078                           fsr2h	equ	0xFDA
  5079                           fsr2l	equ	0xFD9
  5080                           status	equ	0xFD8
  5081                           
  5082 ;; *************** function ___fttol *****************
  5083 ;; Defined at:
  5084 ;;		line 44 in file "/opt/microchip/xc8/v1.42/sources/common/fttol.c"
  5085 ;; Parameters:    Size  Location     Type
  5086 ;;  f1              3   42[COMRAM] float 
  5087 ;; Auto vars:     Size  Location     Type
  5088 ;;  lval            4   52[COMRAM] unsigned long 
  5089 ;;  exp1            1   56[COMRAM] unsigned char 
  5090 ;;  sign1           1   51[COMRAM] unsigned char 
  5091 ;; Return value:  Size  Location     Type
  5092 ;;                  4   42[COMRAM] long 
  5093 ;; Registers used:
  5094 ;;		wreg, status,2, status,0
  5095 ;; Tracked objects:
  5096 ;;		On entry : 0/0
  5097 ;;		On exit  : 0/0
  5098 ;;		Unchanged: 0/0
  5099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5100 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5101 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5102 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5103 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5104 ;;Total ram usage:       15 bytes
  5105 ;; Hardware stack levels used:    1
  5106 ;; This function calls:
  5107 ;;		Nothing
  5108 ;; This function is called by:
  5109 ;;		_printf
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           	psect	text19
  5114  0023FC                     __ptext19:
  5115                           	opt stack 0
  5116  0023FC                     ___fttol:
  5117                           	opt stack 28
  5118                           
  5119                           ;incstack = 0
  5120  0023FC  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  5121  002400  6A30               	clrf	(??___fttol+1)& (0+255),c
  5122  002402  6A31               	clrf	(??___fttol+2)& (0+255),c
  5123  002404  342C               	rlcf	___fttol@f1+1,w,c
  5124  002406  362F               	rlcf	??___fttol& (0+255),f,c
  5125  002408  E301               	bnc	u2621
  5126  00240A  8030               	bsf	(??___fttol+1)& (0+255),0,c
  5127  00240C                     u2621:
  5128  00240C  502F               	movf	??___fttol,w,c
  5129  00240E  6E39               	movwf	___fttol@exp1,c
  5130  002410  5039               	movf	___fttol@exp1,w,c
  5131  002412  A4D8               	btfss	status,2,c
  5132  002414  D009               	goto	l2666
  5133  002416  0E00               	movlw	0
  5134  002418  6E2B               	movwf	?___fttol,c
  5135  00241A  0E00               	movlw	0
  5136  00241C  6E2C               	movwf	?___fttol+1,c
  5137  00241E  0E00               	movlw	0
  5138  002420  6E2D               	movwf	?___fttol+2,c
  5139  002422  0E00               	movlw	0
  5140  002424  6E2E               	movwf	?___fttol+3,c
  5141  002426  0012               	return	
  5142  002428                     l2666:
  5143  002428  0E17               	movlw	23
  5144  00242A  6E2F               	movwf	??___fttol& (0+255),c
  5145  00242C  C02B  F030         	movff	___fttol@f1,??___fttol+1
  5146  002430  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  5147  002434  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  5148  002438  282F               	incf	??___fttol,w,c
  5149  00243A  6E33               	movwf	(??___fttol+4)& (0+255),c
  5150  00243C  D004               	goto	u2640
  5151  00243E                     u2645:
  5152  00243E  90D8               	bcf	status,0,c
  5153  002440  3232               	rrcf	??___fttol+3,f,c
  5154  002442  3231               	rrcf	??___fttol+2,f,c
  5155  002444  3230               	rrcf	??___fttol+1,f,c
  5156  002446                     u2640:
  5157  002446  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  5158  002448  D7FA               	goto	u2645
  5159  00244A  5030               	movf	??___fttol+1,w,c
  5160  00244C  6E34               	movwf	___fttol@sign1,c
  5161  00244E  8E2C               	bsf	___fttol@f1+1,7,c
  5162  002450  0EFF               	movlw	255
  5163  002452  162B               	andwf	___fttol@f1,f,c
  5164  002454  0EFF               	movlw	255
  5165  002456  162C               	andwf	___fttol@f1+1,f,c
  5166  002458  0E00               	movlw	0
  5167  00245A  162D               	andwf	___fttol@f1+2,f,c
  5168  00245C  502B               	movf	___fttol@f1,w,c
  5169  00245E  6E35               	movwf	___fttol@lval,c
  5170  002460  502C               	movf	___fttol@f1+1,w,c
  5171  002462  6E36               	movwf	___fttol@lval+1,c
  5172  002464  502D               	movf	___fttol@f1+2,w,c
  5173  002466  6E37               	movwf	___fttol@lval+2,c
  5174  002468  6A38               	clrf	___fttol@lval+3,c
  5175  00246A  0E8E               	movlw	142
  5176  00246C  5E39               	subwf	___fttol@exp1,f,c
  5177  00246E  AE39               	btfss	___fttol@exp1,7,c
  5178  002470  D016               	goto	l2688
  5179  002472  5039               	movf	___fttol@exp1,w,c
  5180  002474  0A80               	xorlw	128
  5181  002476  0F8F               	addlw	143
  5182  002478  B0D8               	btfsc	status,0,c
  5183  00247A  D009               	goto	l2684
  5184  00247C  0E00               	movlw	0
  5185  00247E  6E2B               	movwf	?___fttol,c
  5186  002480  0E00               	movlw	0
  5187  002482  6E2C               	movwf	?___fttol+1,c
  5188  002484  0E00               	movlw	0
  5189  002486  6E2D               	movwf	?___fttol+2,c
  5190  002488  0E00               	movlw	0
  5191  00248A  6E2E               	movwf	?___fttol+3,c
  5192  00248C  0012               	return	
  5193  00248E                     l2684:
  5194  00248E  90D8               	bcf	status,0,c
  5195  002490  3238               	rrcf	___fttol@lval+3,f,c
  5196  002492  3237               	rrcf	___fttol@lval+2,f,c
  5197  002494  3236               	rrcf	___fttol@lval+1,f,c
  5198  002496  3235               	rrcf	___fttol@lval,f,c
  5199  002498  3E39               	incfsz	___fttol@exp1,f,c
  5200  00249A  D7F9               	goto	l2684
  5201  00249C  D015               	goto	l2698
  5202  00249E                     l2688:
  5203  00249E  0E17               	movlw	23
  5204  0024A0  6439               	cpfsgt	___fttol@exp1,c
  5205  0024A2  D00F               	goto	l2696
  5206  0024A4  0E00               	movlw	0
  5207  0024A6  6E2B               	movwf	?___fttol,c
  5208  0024A8  0E00               	movlw	0
  5209  0024AA  6E2C               	movwf	?___fttol+1,c
  5210  0024AC  0E00               	movlw	0
  5211  0024AE  6E2D               	movwf	?___fttol+2,c
  5212  0024B0  0E00               	movlw	0
  5213  0024B2  6E2E               	movwf	?___fttol+3,c
  5214  0024B4  0012               	return	
  5215  0024B6                     l2694:
  5216  0024B6  90D8               	bcf	status,0,c
  5217  0024B8  3635               	rlcf	___fttol@lval,f,c
  5218  0024BA  3636               	rlcf	___fttol@lval+1,f,c
  5219  0024BC  3637               	rlcf	___fttol@lval+2,f,c
  5220  0024BE  3638               	rlcf	___fttol@lval+3,f,c
  5221  0024C0  0639               	decf	___fttol@exp1,f,c
  5222  0024C2                     l2696:
  5223  0024C2  5039               	movf	___fttol@exp1,w,c
  5224  0024C4  A4D8               	btfss	status,2,c
  5225  0024C6  D7F7               	goto	l2694
  5226  0024C8                     l2698:
  5227  0024C8  5034               	movf	___fttol@sign1,w,c
  5228  0024CA  B4D8               	btfsc	status,2,c
  5229  0024CC  D008               	goto	l2702
  5230  0024CE  1E38               	comf	___fttol@lval+3,f,c
  5231  0024D0  1E37               	comf	___fttol@lval+2,f,c
  5232  0024D2  1E36               	comf	___fttol@lval+1,f,c
  5233  0024D4  6C35               	negf	___fttol@lval,c
  5234  0024D6  0E00               	movlw	0
  5235  0024D8  2236               	addwfc	___fttol@lval+1,f,c
  5236  0024DA  2237               	addwfc	___fttol@lval+2,f,c
  5237  0024DC  2238               	addwfc	___fttol@lval+3,f,c
  5238  0024DE                     l2702:
  5239  0024DE  C035  F02B         	movff	___fttol@lval,?___fttol
  5240  0024E2  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  5241  0024E6  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  5242  0024EA  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  5243  0024EE  0012               	return	
  5244  0024F0                     __end_of___fttol:
  5245                           	opt stack 0
  5246                           tblptru	equ	0xFF8
  5247                           tblptrh	equ	0xFF7
  5248                           tblptrl	equ	0xFF6
  5249                           tablat	equ	0xFF5
  5250                           prodh	equ	0xFF4
  5251                           prodl	equ	0xFF3
  5252                           postinc0	equ	0xFEE
  5253                           wreg	equ	0xFE8
  5254                           postdec1	equ	0xFE5
  5255                           fsr1l	equ	0xFE1
  5256                           indf2	equ	0xFDF
  5257                           postinc2	equ	0xFDE
  5258                           postdec2	equ	0xFDD
  5259                           fsr2h	equ	0xFDA
  5260                           fsr2l	equ	0xFD9
  5261                           status	equ	0xFD8
  5262                           
  5263 ;; *************** function ___ftsub *****************
  5264 ;; Defined at:
  5265 ;;		line 20 in file "/opt/microchip/xc8/v1.42/sources/common/ftsub.c"
  5266 ;; Parameters:    Size  Location     Type
  5267 ;;  f1              3   57[COMRAM] float 
  5268 ;;  f2              3   60[COMRAM] float 
  5269 ;; Auto vars:     Size  Location     Type
  5270 ;;		None
  5271 ;; Return value:  Size  Location     Type
  5272 ;;                  3   57[COMRAM] float 
  5273 ;; Registers used:
  5274 ;;		wreg, status,2, status,0, cstack
  5275 ;; Tracked objects:
  5276 ;;		On entry : 0/0
  5277 ;;		On exit  : 0/0
  5278 ;;		Unchanged: 0/0
  5279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5280 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5283 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5284 ;;Total ram usage:        6 bytes
  5285 ;; Hardware stack levels used:    1
  5286 ;; Hardware stack levels required when called:    2
  5287 ;; This function calls:
  5288 ;;		___ftadd
  5289 ;; This function is called by:
  5290 ;;		_printf
  5291 ;; This function uses a non-reentrant model
  5292 ;;
  5293                           
  5294                           	psect	text20
  5295  002B9C                     __ptext20:
  5296                           	opt stack 0
  5297  002B9C                     ___ftsub:
  5298                           	opt stack 26
  5299                           
  5300                           ;incstack = 0
  5301  002B9C  503D               	movf	___ftsub@f2,w,c
  5302  002B9E  103E               	iorwf	___ftsub@f2+1,w,c
  5303  002BA0  103F               	iorwf	___ftsub@f2+2,w,c
  5304  002BA2  B4D8               	btfsc	status,2,c
  5305  002BA4  D006               	goto	l2634
  5306  002BA6  0E00               	movlw	0
  5307  002BA8  1A3D               	xorwf	___ftsub@f2,f,c
  5308  002BAA  0E00               	movlw	0
  5309  002BAC  1A3E               	xorwf	___ftsub@f2+1,f,c
  5310  002BAE  0E80               	movlw	128
  5311  002BB0  1A3F               	xorwf	___ftsub@f2+2,f,c
  5312  002BB2                     l2634:
  5313  002BB2  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  5314  002BB6  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  5315  002BBA  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  5316  002BBE  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  5317  002BC2  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  5318  002BC6  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  5319  002BCA  EC81  F00F         	call	___ftadd	;wreg free
  5320  002BCE  C02E  F03A         	movff	?___ftadd,?___ftsub
  5321  002BD2  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  5322  002BD6  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  5323  002BDA  0012               	return	
  5324  002BDC                     __end_of___ftsub:
  5325                           	opt stack 0
  5326                           tblptru	equ	0xFF8
  5327                           tblptrh	equ	0xFF7
  5328                           tblptrl	equ	0xFF6
  5329                           tablat	equ	0xFF5
  5330                           prodh	equ	0xFF4
  5331                           prodl	equ	0xFF3
  5332                           postinc0	equ	0xFEE
  5333                           wreg	equ	0xFE8
  5334                           postdec1	equ	0xFE5
  5335                           fsr1l	equ	0xFE1
  5336                           indf2	equ	0xFDF
  5337                           postinc2	equ	0xFDE
  5338                           postdec2	equ	0xFDD
  5339                           fsr2h	equ	0xFDA
  5340                           fsr2l	equ	0xFD9
  5341                           status	equ	0xFD8
  5342                           
  5343 ;; *************** function ___ftadd *****************
  5344 ;; Defined at:
  5345 ;;		line 86 in file "/opt/microchip/xc8/v1.42/sources/common/ftadd.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  f1              3   45[COMRAM] float 
  5348 ;;  f2              3   48[COMRAM] float 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  exp1            1   56[COMRAM] unsigned char 
  5351 ;;  exp2            1   55[COMRAM] unsigned char 
  5352 ;;  sign            1   54[COMRAM] unsigned char 
  5353 ;; Return value:  Size  Location     Type
  5354 ;;                  3   45[COMRAM] float 
  5355 ;; Registers used:
  5356 ;;		wreg, status,2, status,0, cstack
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5362 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5363 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5364 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5365 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5366 ;;Total ram usage:       12 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:    1
  5369 ;; This function calls:
  5370 ;;		___ftpack
  5371 ;; This function is called by:
  5372 ;;		_printf
  5373 ;;		___ftsub
  5374 ;; This function uses a non-reentrant model
  5375 ;;
  5376                           
  5377                           	psect	text21
  5378  001F02                     __ptext21:
  5379                           	opt stack 0
  5380  001F02                     ___ftadd:
  5381                           	opt stack 26
  5382                           
  5383                           ;incstack = 0
  5384  001F02  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5385  001F06  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5386  001F08  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5387  001F0A  342F               	rlcf	___ftadd@f1+1,w,c
  5388  001F0C  3634               	rlcf	??___ftadd& (0+255),f,c
  5389  001F0E  E301               	bnc	u1921
  5390  001F10  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5391  001F12                     u1921:
  5392  001F12  5034               	movf	??___ftadd,w,c
  5393  001F14  6E39               	movwf	___ftadd@exp1,c
  5394  001F16  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5395  001F1A  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5396  001F1C  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5397  001F1E  3432               	rlcf	___ftadd@f2+1,w,c
  5398  001F20  3634               	rlcf	??___ftadd& (0+255),f,c
  5399  001F22  E301               	bnc	u1931
  5400  001F24  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5401  001F26                     u1931:
  5402  001F26  5034               	movf	??___ftadd,w,c
  5403  001F28  6E38               	movwf	___ftadd@exp2,c
  5404  001F2A  5039               	movf	___ftadd@exp1,w,c
  5405  001F2C  B4D8               	btfsc	status,2,c
  5406  001F2E  D00B               	goto	l616
  5407  001F30  5038               	movf	___ftadd@exp2,w,c
  5408  001F32  5C39               	subwf	___ftadd@exp1,w,c
  5409  001F34  B0D8               	btfsc	status,0,c
  5410  001F36  D00E               	goto	l2248
  5411  001F38  5039               	movf	___ftadd@exp1,w,c
  5412  001F3A  0800               	sublw	0
  5413  001F3C  2438               	addwf	___ftadd@exp2,w,c
  5414  001F3E  6E34               	movwf	??___ftadd& (0+255),c
  5415  001F40  0E18               	movlw	24
  5416  001F42  6434               	cpfsgt	??___ftadd,c
  5417  001F44  D007               	goto	l2248
  5418  001F46                     l616:
  5419  001F46  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5420  001F4A  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5421  001F4E  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5422  001F52  0012               	return	
  5423  001F54                     l2248:
  5424  001F54  5038               	movf	___ftadd@exp2,w,c
  5425  001F56  B4D8               	btfsc	status,2,c
  5426  001F58  D00B               	goto	l620
  5427  001F5A  5039               	movf	___ftadd@exp1,w,c
  5428  001F5C  5C38               	subwf	___ftadd@exp2,w,c
  5429  001F5E  B0D8               	btfsc	status,0,c
  5430  001F60  D00E               	goto	l2254
  5431  001F62  5038               	movf	___ftadd@exp2,w,c
  5432  001F64  0800               	sublw	0
  5433  001F66  2439               	addwf	___ftadd@exp1,w,c
  5434  001F68  6E34               	movwf	??___ftadd& (0+255),c
  5435  001F6A  0E18               	movlw	24
  5436  001F6C  6434               	cpfsgt	??___ftadd,c
  5437  001F6E  D007               	goto	l2254
  5438  001F70                     l620:
  5439  001F70  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5440  001F74  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5441  001F78  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5442  001F7C  0012               	return	
  5443  001F7E                     l2254:
  5444  001F7E  0E06               	movlw	6
  5445  001F80  6E37               	movwf	___ftadd@sign,c
  5446  001F82  BE30               	btfsc	___ftadd@f1+2,7,c
  5447  001F84  8E37               	bsf	___ftadd@sign,7,c
  5448  001F86  BE33               	btfsc	___ftadd@f2+2,7,c
  5449  001F88  8C37               	bsf	___ftadd@sign,6,c
  5450  001F8A  8E2F               	bsf	___ftadd@f1+1,7,c
  5451  001F8C  0EFF               	movlw	255
  5452  001F8E  162E               	andwf	___ftadd@f1,f,c
  5453  001F90  0EFF               	movlw	255
  5454  001F92  162F               	andwf	___ftadd@f1+1,f,c
  5455  001F94  0E00               	movlw	0
  5456  001F96  1630               	andwf	___ftadd@f1+2,f,c
  5457  001F98  8E32               	bsf	___ftadd@f2+1,7,c
  5458  001F9A  0EFF               	movlw	255
  5459  001F9C  1631               	andwf	___ftadd@f2,f,c
  5460  001F9E  0EFF               	movlw	255
  5461  001FA0  1632               	andwf	___ftadd@f2+1,f,c
  5462  001FA2  0E00               	movlw	0
  5463  001FA4  1633               	andwf	___ftadd@f2+2,f,c
  5464  001FA6  5038               	movf	___ftadd@exp2,w,c
  5465  001FA8  5C39               	subwf	___ftadd@exp1,w,c
  5466  001FAA  B0D8               	btfsc	status,0,c
  5467  001FAC  D01B               	goto	l2280
  5468  001FAE                     l2270:
  5469  001FAE  90D8               	bcf	status,0,c
  5470  001FB0  3631               	rlcf	___ftadd@f2,f,c
  5471  001FB2  3632               	rlcf	___ftadd@f2+1,f,c
  5472  001FB4  3633               	rlcf	___ftadd@f2+2,f,c
  5473  001FB6  0638               	decf	___ftadd@exp2,f,c
  5474  001FB8  5039               	movf	___ftadd@exp1,w,c
  5475  001FBA  1838               	xorwf	___ftadd@exp2,w,c
  5476  001FBC  B4D8               	btfsc	status,2,c
  5477  001FBE  D00D               	goto	l2278
  5478  001FC0  0637               	decf	___ftadd@sign,f,c
  5479  001FC2  C037  F034         	movff	___ftadd@sign,??___ftadd
  5480  001FC6  0E07               	movlw	7
  5481  001FC8  1634               	andwf	??___ftadd,f,c
  5482  001FCA  B4D8               	btfsc	status,2,c
  5483  001FCC  D006               	goto	l2278
  5484  001FCE  D7EF               	goto	l2270
  5485  001FD0                     l2276:
  5486  001FD0  90D8               	bcf	status,0,c
  5487  001FD2  3230               	rrcf	___ftadd@f1+2,f,c
  5488  001FD4  322F               	rrcf	___ftadd@f1+1,f,c
  5489  001FD6  322E               	rrcf	___ftadd@f1,f,c
  5490  001FD8  2A39               	incf	___ftadd@exp1,f,c
  5491  001FDA                     l2278:
  5492  001FDA  5038               	movf	___ftadd@exp2,w,c
  5493  001FDC  1839               	xorwf	___ftadd@exp1,w,c
  5494  001FDE  B4D8               	btfsc	status,2,c
  5495  001FE0  D01F               	goto	l631
  5496  001FE2  D7F6               	goto	l2276
  5497  001FE4                     l2280:
  5498  001FE4  5039               	movf	___ftadd@exp1,w,c
  5499  001FE6  5C38               	subwf	___ftadd@exp2,w,c
  5500  001FE8  B0D8               	btfsc	status,0,c
  5501  001FEA  D01A               	goto	l631
  5502  001FEC                     l2282:
  5503  001FEC  90D8               	bcf	status,0,c
  5504  001FEE  362E               	rlcf	___ftadd@f1,f,c
  5505  001FF0  362F               	rlcf	___ftadd@f1+1,f,c
  5506  001FF2  3630               	rlcf	___ftadd@f1+2,f,c
  5507  001FF4  0639               	decf	___ftadd@exp1,f,c
  5508  001FF6  5039               	movf	___ftadd@exp1,w,c
  5509  001FF8  1838               	xorwf	___ftadd@exp2,w,c
  5510  001FFA  B4D8               	btfsc	status,2,c
  5511  001FFC  D00D               	goto	l2290
  5512  001FFE  0637               	decf	___ftadd@sign,f,c
  5513  002000  C037  F034         	movff	___ftadd@sign,??___ftadd
  5514  002004  0E07               	movlw	7
  5515  002006  1634               	andwf	??___ftadd,f,c
  5516  002008  B4D8               	btfsc	status,2,c
  5517  00200A  D006               	goto	l2290
  5518  00200C  D7EF               	goto	l2282
  5519  00200E                     l2288:
  5520  00200E  90D8               	bcf	status,0,c
  5521  002010  3233               	rrcf	___ftadd@f2+2,f,c
  5522  002012  3232               	rrcf	___ftadd@f2+1,f,c
  5523  002014  3231               	rrcf	___ftadd@f2,f,c
  5524  002016  2A38               	incf	___ftadd@exp2,f,c
  5525  002018                     l2290:
  5526  002018  5038               	movf	___ftadd@exp2,w,c
  5527  00201A  1839               	xorwf	___ftadd@exp1,w,c
  5528  00201C  A4D8               	btfss	status,2,c
  5529  00201E  D7F7               	goto	l2288
  5530  002020                     l631:
  5531  002020  AE37               	btfss	___ftadd@sign,7,c
  5532  002022  D00C               	goto	l640
  5533  002024  0EFF               	movlw	255
  5534  002026  1A2E               	xorwf	___ftadd@f1,f,c
  5535  002028  0EFF               	movlw	255
  5536  00202A  1A2F               	xorwf	___ftadd@f1+1,f,c
  5537  00202C  0EFF               	movlw	255
  5538  00202E  1A30               	xorwf	___ftadd@f1+2,f,c
  5539  002030  0E01               	movlw	1
  5540  002032  262E               	addwf	___ftadd@f1,f,c
  5541  002034  0E00               	movlw	0
  5542  002036  222F               	addwfc	___ftadd@f1+1,f,c
  5543  002038  0E00               	movlw	0
  5544  00203A  2230               	addwfc	___ftadd@f1+2,f,c
  5545  00203C                     l640:
  5546  00203C  AC37               	btfss	___ftadd@sign,6,c
  5547  00203E  D00C               	goto	l2296
  5548  002040  0EFF               	movlw	255
  5549  002042  1A31               	xorwf	___ftadd@f2,f,c
  5550  002044  0EFF               	movlw	255
  5551  002046  1A32               	xorwf	___ftadd@f2+1,f,c
  5552  002048  0EFF               	movlw	255
  5553  00204A  1A33               	xorwf	___ftadd@f2+2,f,c
  5554  00204C  0E01               	movlw	1
  5555  00204E  2631               	addwf	___ftadd@f2,f,c
  5556  002050  0E00               	movlw	0
  5557  002052  2232               	addwfc	___ftadd@f2+1,f,c
  5558  002054  0E00               	movlw	0
  5559  002056  2233               	addwfc	___ftadd@f2+2,f,c
  5560  002058                     l2296:
  5561  002058  0E00               	movlw	0
  5562  00205A  6E37               	movwf	___ftadd@sign,c
  5563  00205C  502E               	movf	___ftadd@f1,w,c
  5564  00205E  2631               	addwf	___ftadd@f2,f,c
  5565  002060  502F               	movf	___ftadd@f1+1,w,c
  5566  002062  2232               	addwfc	___ftadd@f2+1,f,c
  5567  002064  5030               	movf	___ftadd@f1+2,w,c
  5568  002066  2233               	addwfc	___ftadd@f2+2,f,c
  5569  002068  AE33               	btfss	___ftadd@f2+2,7,c
  5570  00206A  D00E               	goto	l2306
  5571  00206C  0EFF               	movlw	255
  5572  00206E  1A31               	xorwf	___ftadd@f2,f,c
  5573  002070  0EFF               	movlw	255
  5574  002072  1A32               	xorwf	___ftadd@f2+1,f,c
  5575  002074  0EFF               	movlw	255
  5576  002076  1A33               	xorwf	___ftadd@f2+2,f,c
  5577  002078  0E01               	movlw	1
  5578  00207A  2631               	addwf	___ftadd@f2,f,c
  5579  00207C  0E00               	movlw	0
  5580  00207E  2232               	addwfc	___ftadd@f2+1,f,c
  5581  002080  0E00               	movlw	0
  5582  002082  2233               	addwfc	___ftadd@f2+2,f,c
  5583  002084  0E01               	movlw	1
  5584  002086  6E37               	movwf	___ftadd@sign,c
  5585  002088                     l2306:
  5586  002088  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5587  00208C  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5588  002090  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5589  002094  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5590  002098  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5591  00209C  EC51  F013         	call	___ftpack	;wreg free
  5592  0020A0  C001  F02E         	movff	?___ftpack,?___ftadd
  5593  0020A4  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5594  0020A8  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5595  0020AC  0012               	return	
  5596  0020AE                     __end_of___ftadd:
  5597                           	opt stack 0
  5598                           tblptru	equ	0xFF8
  5599                           tblptrh	equ	0xFF7
  5600                           tblptrl	equ	0xFF6
  5601                           tablat	equ	0xFF5
  5602                           prodh	equ	0xFF4
  5603                           prodl	equ	0xFF3
  5604                           postinc0	equ	0xFEE
  5605                           wreg	equ	0xFE8
  5606                           postdec1	equ	0xFE5
  5607                           fsr1l	equ	0xFE1
  5608                           indf2	equ	0xFDF
  5609                           postinc2	equ	0xFDE
  5610                           postdec2	equ	0xFDD
  5611                           fsr2h	equ	0xFDA
  5612                           fsr2l	equ	0xFD9
  5613                           status	equ	0xFD8
  5614                           
  5615 ;; *************** function ___ftneg *****************
  5616 ;; Defined at:
  5617 ;;		line 15 in file "/opt/microchip/xc8/v1.42/sources/common/ftneg.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;  f1              3    0[COMRAM] float 
  5620 ;; Auto vars:     Size  Location     Type
  5621 ;;		None
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  3    0[COMRAM] float 
  5624 ;; Registers used:
  5625 ;;		wreg, status,2, status,0
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5631 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5634 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5635 ;;Total ram usage:        3 bytes
  5636 ;; Hardware stack levels used:    1
  5637 ;; This function calls:
  5638 ;;		Nothing
  5639 ;; This function is called by:
  5640 ;;		_printf
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           	psect	text22
  5645  002D14                     __ptext22:
  5646                           	opt stack 0
  5647  002D14                     ___ftneg:
  5648                           	opt stack 28
  5649                           
  5650                           ;incstack = 0
  5651  002D14  5001               	movf	___ftneg@f1,w,c
  5652  002D16  1002               	iorwf	___ftneg@f1+1,w,c
  5653  002D18  1003               	iorwf	___ftneg@f1+2,w,c
  5654  002D1A  B4D8               	btfsc	status,2,c
  5655  002D1C  D006               	goto	l690
  5656  002D1E  0E00               	movlw	0
  5657  002D20  1A01               	xorwf	___ftneg@f1,f,c
  5658  002D22  0E00               	movlw	0
  5659  002D24  1A02               	xorwf	___ftneg@f1+1,f,c
  5660  002D26  0E80               	movlw	128
  5661  002D28  1A03               	xorwf	___ftneg@f1+2,f,c
  5662  002D2A                     l690:
  5663  002D2A  C001  F001         	movff	___ftneg@f1,?___ftneg
  5664  002D2E  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5665  002D32  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5666  002D36  0012               	return		;funcret
  5667  002D38                     __end_of___ftneg:
  5668                           	opt stack 0
  5669                           tblptru	equ	0xFF8
  5670                           tblptrh	equ	0xFF7
  5671                           tblptrl	equ	0xFF6
  5672                           tablat	equ	0xFF5
  5673                           prodh	equ	0xFF4
  5674                           prodl	equ	0xFF3
  5675                           postinc0	equ	0xFEE
  5676                           wreg	equ	0xFE8
  5677                           postdec1	equ	0xFE5
  5678                           fsr1l	equ	0xFE1
  5679                           indf2	equ	0xFDF
  5680                           postinc2	equ	0xFDE
  5681                           postdec2	equ	0xFDD
  5682                           fsr2h	equ	0xFDA
  5683                           fsr2l	equ	0xFD9
  5684                           status	equ	0xFD8
  5685                           
  5686 ;; *************** function ___ftge *****************
  5687 ;; Defined at:
  5688 ;;		line 4 in file "/opt/microchip/xc8/v1.42/sources/common/ftge.c"
  5689 ;; Parameters:    Size  Location     Type
  5690 ;;  ff1             3    0[COMRAM] float 
  5691 ;;  ff2             3    3[COMRAM] float 
  5692 ;; Auto vars:     Size  Location     Type
  5693 ;;		None
  5694 ;; Return value:  Size  Location     Type
  5695 ;;		None               void
  5696 ;; Registers used:
  5697 ;;		wreg, status,2, status,0
  5698 ;; Tracked objects:
  5699 ;;		On entry : 0/0
  5700 ;;		On exit  : 0/0
  5701 ;;		Unchanged: 0/0
  5702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5703 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5705 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5706 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5707 ;;Total ram usage:        9 bytes
  5708 ;; Hardware stack levels used:    1
  5709 ;; This function calls:
  5710 ;;		Nothing
  5711 ;; This function is called by:
  5712 ;;		_printf
  5713 ;; This function uses a non-reentrant model
  5714 ;;
  5715                           
  5716                           	psect	text23
  5717  0027E4                     __ptext23:
  5718                           	opt stack 0
  5719  0027E4                     ___ftge:
  5720                           	opt stack 28
  5721                           
  5722                           ;incstack = 0
  5723  0027E4  AE03               	btfss	___ftge@ff1+2,7,c
  5724  0027E6  D016               	goto	l2642
  5725  0027E8  C001  F007         	movff	___ftge@ff1,??___ftge
  5726  0027EC  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5727  0027F0  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5728  0027F4  1E07               	comf	??___ftge,f,c
  5729  0027F6  1E08               	comf	??___ftge+1,f,c
  5730  0027F8  1E09               	comf	??___ftge+2,f,c
  5731  0027FA  2A07               	incf	??___ftge,f,c
  5732  0027FC  0E00               	movlw	0
  5733  0027FE  2208               	addwfc	??___ftge+1,f,c
  5734  002800  2209               	addwfc	??___ftge+2,f,c
  5735  002802  0E00               	movlw	0
  5736  002804  2407               	addwf	??___ftge,w,c
  5737  002806  6E01               	movwf	___ftge@ff1,c
  5738  002808  0E00               	movlw	0
  5739  00280A  2008               	addwfc	??___ftge+1,w,c
  5740  00280C  6E02               	movwf	___ftge@ff1+1,c
  5741  00280E  0E80               	movlw	128
  5742  002810  2009               	addwfc	??___ftge+2,w,c
  5743  002812  6E03               	movwf	___ftge@ff1+2,c
  5744  002814                     l2642:
  5745  002814  AE06               	btfss	___ftge@ff2+2,7,c
  5746  002816  D016               	goto	l2646
  5747  002818  C004  F007         	movff	___ftge@ff2,??___ftge
  5748  00281C  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5749  002820  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5750  002824  1E07               	comf	??___ftge,f,c
  5751  002826  1E08               	comf	??___ftge+1,f,c
  5752  002828  1E09               	comf	??___ftge+2,f,c
  5753  00282A  2A07               	incf	??___ftge,f,c
  5754  00282C  0E00               	movlw	0
  5755  00282E  2208               	addwfc	??___ftge+1,f,c
  5756  002830  2209               	addwfc	??___ftge+2,f,c
  5757  002832  0E00               	movlw	0
  5758  002834  2407               	addwf	??___ftge,w,c
  5759  002836  6E04               	movwf	___ftge@ff2,c
  5760  002838  0E00               	movlw	0
  5761  00283A  2008               	addwfc	??___ftge+1,w,c
  5762  00283C  6E05               	movwf	___ftge@ff2+1,c
  5763  00283E  0E80               	movlw	128
  5764  002840  2009               	addwfc	??___ftge+2,w,c
  5765  002842  6E06               	movwf	___ftge@ff2+2,c
  5766  002844                     l2646:
  5767  002844  0E00               	movlw	0
  5768  002846  1A01               	xorwf	___ftge@ff1,f,c
  5769  002848  0E00               	movlw	0
  5770  00284A  1A02               	xorwf	___ftge@ff1+1,f,c
  5771  00284C  0E80               	movlw	128
  5772  00284E  1A03               	xorwf	___ftge@ff1+2,f,c
  5773  002850  0E00               	movlw	0
  5774  002852  1A04               	xorwf	___ftge@ff2,f,c
  5775  002854  0E00               	movlw	0
  5776  002856  1A05               	xorwf	___ftge@ff2+1,f,c
  5777  002858  0E80               	movlw	128
  5778  00285A  1A06               	xorwf	___ftge@ff2+2,f,c
  5779  00285C  5004               	movf	___ftge@ff2,w,c
  5780  00285E  5C01               	subwf	___ftge@ff1,w,c
  5781  002860  5005               	movf	___ftge@ff2+1,w,c
  5782  002862  5802               	subwfb	___ftge@ff1+1,w,c
  5783  002864  5006               	movf	___ftge@ff2+2,w,c
  5784  002866  5803               	subwfb	___ftge@ff1+2,w,c
  5785  002868  B0D8               	btfsc	status,0,c
  5786  00286A  D002               	goto	l2652
  5787  00286C  90D8               	bcf	status,0,c
  5788  00286E  0012               	return	
  5789  002870                     l2652:
  5790  002870  80D8               	bsf	status,0,c
  5791  002872  0012               	return	
  5792  002874                     __end_of___ftge:
  5793                           	opt stack 0
  5794                           tblptru	equ	0xFF8
  5795                           tblptrh	equ	0xFF7
  5796                           tblptrl	equ	0xFF6
  5797                           tablat	equ	0xFF5
  5798                           prodh	equ	0xFF4
  5799                           prodl	equ	0xFF3
  5800                           postinc0	equ	0xFEE
  5801                           wreg	equ	0xFE8
  5802                           postdec1	equ	0xFE5
  5803                           fsr1l	equ	0xFE1
  5804                           indf2	equ	0xFDF
  5805                           postinc2	equ	0xFDE
  5806                           postdec2	equ	0xFDD
  5807                           fsr2h	equ	0xFDA
  5808                           fsr2l	equ	0xFD9
  5809                           status	equ	0xFD8
  5810                           
  5811 ;; *************** function ___lwtoft *****************
  5812 ;; Defined at:
  5813 ;;		line 28 in file "/opt/microchip/xc8/v1.42/sources/common/lwtoft.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;  c               2    8[COMRAM] unsigned int 
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;		None
  5818 ;; Return value:  Size  Location     Type
  5819 ;;                  3    8[COMRAM] float 
  5820 ;; Registers used:
  5821 ;;		wreg, status,2, status,0, cstack
  5822 ;; Tracked objects:
  5823 ;;		On entry : 0/0
  5824 ;;		On exit  : 0/0
  5825 ;;		Unchanged: 0/0
  5826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5827 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5830 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5831 ;;Total ram usage:        3 bytes
  5832 ;; Hardware stack levels used:    1
  5833 ;; Hardware stack levels required when called:    1
  5834 ;; This function calls:
  5835 ;;		___ftpack
  5836 ;; This function is called by:
  5837 ;;		_do_voltage
  5838 ;; This function uses a non-reentrant model
  5839 ;;
  5840                           
  5841                           	psect	text24
  5842  002D38                     __ptext24:
  5843                           	opt stack 0
  5844  002D38                     ___lwtoft:
  5845                           	opt stack 28
  5846                           
  5847                           ;incstack = 0
  5848  002D38  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  5849  002D3C  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  5850  002D40  6A03               	clrf	___ftpack@arg+2,c
  5851  002D42  0E8E               	movlw	142
  5852  002D44  6E04               	movwf	___ftpack@exp,c
  5853  002D46  0E00               	movlw	0
  5854  002D48  6E05               	movwf	___ftpack@sign,c
  5855  002D4A  EC51  F013         	call	___ftpack	;wreg free
  5856  002D4E  C001  F009         	movff	?___ftpack,?___lwtoft
  5857  002D52  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  5858  002D56  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  5859  002D5A  0012               	return	
  5860  002D5C                     __end_of___lwtoft:
  5861                           	opt stack 0
  5862                           tblptru	equ	0xFF8
  5863                           tblptrh	equ	0xFF7
  5864                           tblptrl	equ	0xFF6
  5865                           tablat	equ	0xFF5
  5866                           prodh	equ	0xFF4
  5867                           prodl	equ	0xFF3
  5868                           postinc0	equ	0xFEE
  5869                           wreg	equ	0xFE8
  5870                           postdec1	equ	0xFE5
  5871                           fsr1l	equ	0xFE1
  5872                           indf2	equ	0xFDF
  5873                           postinc2	equ	0xFDE
  5874                           postdec2	equ	0xFDD
  5875                           fsr2h	equ	0xFDA
  5876                           fsr2l	equ	0xFD9
  5877                           status	equ	0xFD8
  5878                           
  5879 ;; *************** function ___ftdiv *****************
  5880 ;; Defined at:
  5881 ;;		line 54 in file "/opt/microchip/xc8/v1.42/sources/common/ftdiv.c"
  5882 ;; Parameters:    Size  Location     Type
  5883 ;;  f1              3   35[COMRAM] float 
  5884 ;;  f2              3   38[COMRAM] float 
  5885 ;; Auto vars:     Size  Location     Type
  5886 ;;  f3              3   45[COMRAM] float 
  5887 ;;  sign            1   49[COMRAM] unsigned char 
  5888 ;;  exp             1   48[COMRAM] unsigned char 
  5889 ;;  cntr            1   44[COMRAM] unsigned char 
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  3   35[COMRAM] float 
  5892 ;; Registers used:
  5893 ;;		wreg, status,2, status,0, cstack
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5899 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5900 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5901 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5902 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5903 ;;Total ram usage:       15 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:    1
  5906 ;; This function calls:
  5907 ;;		___ftpack
  5908 ;; This function is called by:
  5909 ;;		_do_voltage
  5910 ;; This function uses a non-reentrant model
  5911 ;;
  5912                           
  5913                           	psect	text25
  5914  0024F0                     __ptext25:
  5915                           	opt stack 0
  5916  0024F0                     ___ftdiv:
  5917                           	opt stack 28
  5918                           
  5919                           ;incstack = 0
  5920  0024F0  C026  F02A         	movff	___ftdiv@f1+2,??___ftdiv
  5921  0024F4  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  5922  0024F6  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  5923  0024F8  3425               	rlcf	___ftdiv@f1+1,w,c
  5924  0024FA  362A               	rlcf	??___ftdiv& (0+255),f,c
  5925  0024FC  E301               	bnc	u3321
  5926  0024FE  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  5927  002500                     u3321:
  5928  002500  502A               	movf	??___ftdiv,w,c
  5929  002502  6E31               	movwf	___ftdiv@exp,c
  5930  002504  5031               	movf	___ftdiv@exp,w,c
  5931  002506  A4D8               	btfss	status,2,c
  5932  002508  D007               	goto	l3062
  5933  00250A  0E00               	movlw	0
  5934  00250C  6E24               	movwf	?___ftdiv,c
  5935  00250E  0E00               	movlw	0
  5936  002510  6E25               	movwf	?___ftdiv+1,c
  5937  002512  0E00               	movlw	0
  5938  002514  6E26               	movwf	?___ftdiv+2,c
  5939  002516  0012               	return	
  5940  002518                     l3062:
  5941  002518  C029  F02A         	movff	___ftdiv@f2+2,??___ftdiv
  5942  00251C  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  5943  00251E  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  5944  002520  3428               	rlcf	___ftdiv@f2+1,w,c
  5945  002522  362A               	rlcf	??___ftdiv& (0+255),f,c
  5946  002524  E301               	bnc	u3341
  5947  002526  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  5948  002528                     u3341:
  5949  002528  502A               	movf	??___ftdiv,w,c
  5950  00252A  6E32               	movwf	___ftdiv@sign,c
  5951  00252C  5032               	movf	___ftdiv@sign,w,c
  5952  00252E  A4D8               	btfss	status,2,c
  5953  002530  D007               	goto	l3068
  5954  002532  0E00               	movlw	0
  5955  002534  6E24               	movwf	?___ftdiv,c
  5956  002536  0E00               	movlw	0
  5957  002538  6E25               	movwf	?___ftdiv+1,c
  5958  00253A  0E00               	movlw	0
  5959  00253C  6E26               	movwf	?___ftdiv+2,c
  5960  00253E  0012               	return	
  5961  002540                     l3068:
  5962  002540  0E00               	movlw	0
  5963  002542  6E2E               	movwf	___ftdiv@f3,c
  5964  002544  0E00               	movlw	0
  5965  002546  6E2F               	movwf	___ftdiv@f3+1,c
  5966  002548  0E00               	movlw	0
  5967  00254A  6E30               	movwf	___ftdiv@f3+2,c
  5968  00254C  5032               	movf	___ftdiv@sign,w,c
  5969  00254E  0F89               	addlw	137
  5970  002550  5E31               	subwf	___ftdiv@exp,f,c
  5971  002552  C026  F032         	movff	___ftdiv@f1+2,___ftdiv@sign
  5972  002556  5029               	movf	___ftdiv@f2+2,w,c
  5973  002558  1A32               	xorwf	___ftdiv@sign,f,c
  5974  00255A  0E80               	movlw	128
  5975  00255C  1632               	andwf	___ftdiv@sign,f,c
  5976  00255E  8E25               	bsf	___ftdiv@f1+1,7,c
  5977  002560  0EFF               	movlw	255
  5978  002562  1624               	andwf	___ftdiv@f1,f,c
  5979  002564  0EFF               	movlw	255
  5980  002566  1625               	andwf	___ftdiv@f1+1,f,c
  5981  002568  0E00               	movlw	0
  5982  00256A  1626               	andwf	___ftdiv@f1+2,f,c
  5983  00256C  8E28               	bsf	___ftdiv@f2+1,7,c
  5984  00256E  0EFF               	movlw	255
  5985  002570  1627               	andwf	___ftdiv@f2,f,c
  5986  002572  0EFF               	movlw	255
  5987  002574  1628               	andwf	___ftdiv@f2+1,f,c
  5988  002576  0E00               	movlw	0
  5989  002578  1629               	andwf	___ftdiv@f2+2,f,c
  5990  00257A  0E18               	movlw	24
  5991  00257C  6E2D               	movwf	___ftdiv@cntr,c
  5992  00257E                     l3088:
  5993  00257E  90D8               	bcf	status,0,c
  5994  002580  362E               	rlcf	___ftdiv@f3,f,c
  5995  002582  362F               	rlcf	___ftdiv@f3+1,f,c
  5996  002584  3630               	rlcf	___ftdiv@f3+2,f,c
  5997  002586  5027               	movf	___ftdiv@f2,w,c
  5998  002588  5C24               	subwf	___ftdiv@f1,w,c
  5999  00258A  5028               	movf	___ftdiv@f2+1,w,c
  6000  00258C  5825               	subwfb	___ftdiv@f1+1,w,c
  6001  00258E  5029               	movf	___ftdiv@f2+2,w,c
  6002  002590  5826               	subwfb	___ftdiv@f1+2,w,c
  6003  002592  A0D8               	btfss	status,0,c
  6004  002594  D007               	goto	l651
  6005  002596  5027               	movf	___ftdiv@f2,w,c
  6006  002598  5E24               	subwf	___ftdiv@f1,f,c
  6007  00259A  5028               	movf	___ftdiv@f2+1,w,c
  6008  00259C  5A25               	subwfb	___ftdiv@f1+1,f,c
  6009  00259E  5029               	movf	___ftdiv@f2+2,w,c
  6010  0025A0  5A26               	subwfb	___ftdiv@f1+2,f,c
  6011  0025A2  802E               	bsf	___ftdiv@f3,0,c
  6012  0025A4                     l651:
  6013  0025A4  90D8               	bcf	status,0,c
  6014  0025A6  3624               	rlcf	___ftdiv@f1,f,c
  6015  0025A8  3625               	rlcf	___ftdiv@f1+1,f,c
  6016  0025AA  3626               	rlcf	___ftdiv@f1+2,f,c
  6017  0025AC  2E2D               	decfsz	___ftdiv@cntr,f,c
  6018  0025AE  D7E7               	goto	l3088
  6019  0025B0  C02E  F001         	movff	___ftdiv@f3,___ftpack@arg
  6020  0025B4  C02F  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6021  0025B8  C030  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6022  0025BC  C031  F004         	movff	___ftdiv@exp,___ftpack@exp
  6023  0025C0  C032  F005         	movff	___ftdiv@sign,___ftpack@sign
  6024  0025C4  EC51  F013         	call	___ftpack	;wreg free
  6025  0025C8  C001  F024         	movff	?___ftpack,?___ftdiv
  6026  0025CC  C002  F025         	movff	?___ftpack+1,?___ftdiv+1
  6027  0025D0  C003  F026         	movff	?___ftpack+2,?___ftdiv+2
  6028  0025D4  0012               	return	
  6029  0025D6                     __end_of___ftdiv:
  6030                           	opt stack 0
  6031                           tblptru	equ	0xFF8
  6032                           tblptrh	equ	0xFF7
  6033                           tblptrl	equ	0xFF6
  6034                           tablat	equ	0xFF5
  6035                           prodh	equ	0xFF4
  6036                           prodl	equ	0xFF3
  6037                           postinc0	equ	0xFEE
  6038                           wreg	equ	0xFE8
  6039                           postdec1	equ	0xFE5
  6040                           fsr1l	equ	0xFE1
  6041                           indf2	equ	0xFDF
  6042                           postinc2	equ	0xFDE
  6043                           postdec2	equ	0xFDD
  6044                           fsr2h	equ	0xFDA
  6045                           fsr2l	equ	0xFD9
  6046                           status	equ	0xFD8
  6047                           
  6048 ;; *************** function ___ftpack *****************
  6049 ;; Defined at:
  6050 ;;		line 62 in file "/opt/microchip/xc8/v1.42/sources/common/float.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;  arg             3    0[COMRAM] unsigned um
  6053 ;;  exp             1    3[COMRAM] unsigned char 
  6054 ;;  sign            1    4[COMRAM] unsigned char 
  6055 ;; Auto vars:     Size  Location     Type
  6056 ;;		None
  6057 ;; Return value:  Size  Location     Type
  6058 ;;                  3    0[COMRAM] float 
  6059 ;; Registers used:
  6060 ;;		wreg, status,2, status,0
  6061 ;; Tracked objects:
  6062 ;;		On entry : 0/0
  6063 ;;		On exit  : 0/0
  6064 ;;		Unchanged: 0/0
  6065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6066 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6068 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6069 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6070 ;;Total ram usage:        8 bytes
  6071 ;; Hardware stack levels used:    1
  6072 ;; This function calls:
  6073 ;;		Nothing
  6074 ;; This function is called by:
  6075 ;;		___ftadd
  6076 ;;		___ftdiv
  6077 ;;		___ftmul
  6078 ;;		___lltoft
  6079 ;;		___lwtoft
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           	psect	text26
  6084  0026A2                     __ptext26:
  6085                           	opt stack 0
  6086  0026A2                     ___ftpack:
  6087                           	opt stack 26
  6088                           
  6089                           ;incstack = 0
  6090  0026A2  5004               	movf	___ftpack@exp,w,c
  6091  0026A4  B4D8               	btfsc	status,2,c
  6092  0026A6  D005               	goto	l2202
  6093  0026A8  5001               	movf	___ftpack@arg,w,c
  6094  0026AA  1002               	iorwf	___ftpack@arg+1,w,c
  6095  0026AC  1003               	iorwf	___ftpack@arg+2,w,c
  6096  0026AE  A4D8               	btfss	status,2,c
  6097  0026B0  D00C               	goto	l2208
  6098  0026B2                     l2202:
  6099  0026B2  0E00               	movlw	0
  6100  0026B4  6E01               	movwf	?___ftpack,c
  6101  0026B6  0E00               	movlw	0
  6102  0026B8  6E02               	movwf	?___ftpack+1,c
  6103  0026BA  0E00               	movlw	0
  6104  0026BC  6E03               	movwf	?___ftpack+2,c
  6105  0026BE  0012               	return	
  6106  0026C0                     l2206:
  6107  0026C0  2A04               	incf	___ftpack@exp,f,c
  6108  0026C2  90D8               	bcf	status,0,c
  6109  0026C4  3203               	rrcf	___ftpack@arg+2,f,c
  6110  0026C6  3202               	rrcf	___ftpack@arg+1,f,c
  6111  0026C8  3201               	rrcf	___ftpack@arg,f,c
  6112  0026CA                     l2208:
  6113  0026CA  0E00               	movlw	0
  6114  0026CC  1401               	andwf	___ftpack@arg,w,c
  6115  0026CE  6E06               	movwf	??___ftpack& (0+255),c
  6116  0026D0  0E00               	movlw	0
  6117  0026D2  1402               	andwf	___ftpack@arg+1,w,c
  6118  0026D4  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6119  0026D6  0EFE               	movlw	254
  6120  0026D8  1403               	andwf	___ftpack@arg+2,w,c
  6121  0026DA  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6122  0026DC  5006               	movf	??___ftpack,w,c
  6123  0026DE  1007               	iorwf	??___ftpack+1,w,c
  6124  0026E0  1008               	iorwf	??___ftpack+2,w,c
  6125  0026E2  B4D8               	btfsc	status,2,c
  6126  0026E4  D00C               	goto	l2214
  6127  0026E6  D7EC               	goto	l2206
  6128  0026E8                     l2210:
  6129  0026E8  2A04               	incf	___ftpack@exp,f,c
  6130  0026EA  0E01               	movlw	1
  6131  0026EC  2601               	addwf	___ftpack@arg,f,c
  6132  0026EE  0E00               	movlw	0
  6133  0026F0  2202               	addwfc	___ftpack@arg+1,f,c
  6134  0026F2  0E00               	movlw	0
  6135  0026F4  2203               	addwfc	___ftpack@arg+2,f,c
  6136  0026F6  90D8               	bcf	status,0,c
  6137  0026F8  3203               	rrcf	___ftpack@arg+2,f,c
  6138  0026FA  3202               	rrcf	___ftpack@arg+1,f,c
  6139  0026FC  3201               	rrcf	___ftpack@arg,f,c
  6140  0026FE                     l2214:
  6141  0026FE  0E00               	movlw	0
  6142  002700  1401               	andwf	___ftpack@arg,w,c
  6143  002702  6E06               	movwf	??___ftpack& (0+255),c
  6144  002704  0E00               	movlw	0
  6145  002706  1402               	andwf	___ftpack@arg+1,w,c
  6146  002708  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6147  00270A  0EFF               	movlw	255
  6148  00270C  1403               	andwf	___ftpack@arg+2,w,c
  6149  00270E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6150  002710  5006               	movf	??___ftpack,w,c
  6151  002712  1007               	iorwf	??___ftpack+1,w,c
  6152  002714  1008               	iorwf	??___ftpack+2,w,c
  6153  002716  B4D8               	btfsc	status,2,c
  6154  002718  D006               	goto	l2218
  6155  00271A  D7E6               	goto	l2210
  6156  00271C                     l2216:
  6157  00271C  0604               	decf	___ftpack@exp,f,c
  6158  00271E  90D8               	bcf	status,0,c
  6159  002720  3601               	rlcf	___ftpack@arg,f,c
  6160  002722  3602               	rlcf	___ftpack@arg+1,f,c
  6161  002724  3603               	rlcf	___ftpack@arg+2,f,c
  6162  002726                     l2218:
  6163  002726  BE02               	btfsc	___ftpack@arg+1,7,c
  6164  002728  D003               	goto	l593
  6165  00272A  0E02               	movlw	2
  6166  00272C  6004               	cpfslt	___ftpack@exp,c
  6167  00272E  D7F6               	goto	l2216
  6168  002730                     l593:
  6169  002730  A004               	btfss	___ftpack@exp,0,c
  6170  002732  9E02               	bcf	___ftpack@arg+1,7,c
  6171  002734  90D8               	bcf	status,0,c
  6172  002736  3204               	rrcf	___ftpack@exp,f,c
  6173  002738  5004               	movf	___ftpack@exp,w,c
  6174  00273A  1203               	iorwf	___ftpack@arg+2,f,c
  6175  00273C  5005               	movf	___ftpack@sign,w,c
  6176  00273E  A4D8               	btfss	status,2,c
  6177  002740  8E03               	bsf	___ftpack@arg+2,7,c
  6178  002742  C001  F001         	movff	___ftpack@arg,?___ftpack
  6179  002746  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6180  00274A  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6181  00274E  0012               	return	
  6182  002750                     __end_of___ftpack:
  6183                           	opt stack 0
  6184                           tblptru	equ	0xFF8
  6185                           tblptrh	equ	0xFF7
  6186                           tblptrl	equ	0xFF6
  6187                           tablat	equ	0xFF5
  6188                           prodh	equ	0xFF4
  6189                           prodl	equ	0xFF3
  6190                           postinc0	equ	0xFEE
  6191                           wreg	equ	0xFE8
  6192                           postdec1	equ	0xFE5
  6193                           fsr1l	equ	0xFE1
  6194                           indf2	equ	0xFDF
  6195                           postinc2	equ	0xFDE
  6196                           postdec2	equ	0xFDD
  6197                           fsr2h	equ	0xFDA
  6198                           fsr2l	equ	0xFD9
  6199                           status	equ	0xFD8
  6200                           
  6201 ;; *************** function _ADCRead *****************
  6202 ;; Defined at:
  6203 ;;		line 185 in file "main.c"
  6204 ;; Parameters:    Size  Location     Type
  6205 ;;  ch              1    wreg     unsigned char 
  6206 ;; Auto vars:     Size  Location     Type
  6207 ;;  ch              1    2[COMRAM] unsigned char 
  6208 ;; Return value:  Size  Location     Type
  6209 ;;                  2    0[COMRAM] unsigned int 
  6210 ;; Registers used:
  6211 ;;		wreg, status,2, status,0
  6212 ;; Tracked objects:
  6213 ;;		On entry : 0/0
  6214 ;;		On exit  : 0/0
  6215 ;;		Unchanged: 0/0
  6216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6217 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6218 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6220 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6221 ;;Total ram usage:        3 bytes
  6222 ;; Hardware stack levels used:    1
  6223 ;; This function calls:
  6224 ;;		Nothing
  6225 ;; This function is called by:
  6226 ;;		_do_voltage
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           	psect	text27
  6231  002C1A                     __ptext27:
  6232                           	opt stack 0
  6233  002C1A                     _ADCRead:
  6234                           	opt stack 29
  6235                           
  6236                           ;incstack = 0
  6237                           ;ADCRead@ch stored from wreg
  6238  002C1A  6E03               	movwf	ADCRead@ch,c
  6239                           
  6240                           ;main.c: 187: if(ch>13) return 0;
  6241  002C1C  0E0D               	movlw	13
  6242  002C1E  6403               	cpfsgt	ADCRead@ch,c
  6243  002C20  D005               	goto	l2760
  6244  002C22  0E00               	movlw	0
  6245  002C24  6E02               	movwf	?_ADCRead+1,c
  6246  002C26  0E00               	movlw	0
  6247  002C28  6E01               	movwf	?_ADCRead,c
  6248  002C2A  0012               	return	
  6249  002C2C                     l2760:
  6250                           
  6251                           ;main.c: 189: ADCON0=(ch<<2);
  6252  002C2C  4403               	rlncf	ADCRead@ch,w,c
  6253  002C2E  46E8               	rlncf	wreg,f,c
  6254  002C30  0BFC               	andlw	252
  6255  002C32  6EC2               	movwf	4034,c	;volatile
  6256                           
  6257                           ;main.c: 190: ADCON0bits.ADON=1;
  6258  002C34  80C2               	bsf	4034,0,c	;volatile
  6259                           
  6260                           ;main.c: 191: _delay((unsigned long)((5)*(4000000/4000000.0)));
  6261  002C36  D000               	nop2		;2 cycle nop
  6262  002C38  D000               	nop2		;2 cycle nop
  6263  002C3A  F000               	nop	
  6264                           
  6265                           ;main.c: 192: ADCON0bits.GODONE=1;
  6266  002C3C  82C2               	bsf	4034,1,c	;volatile
  6267  002C3E                     l108:
  6268  002C3E  B2C2               	btfsc	4034,1,c	;volatile
  6269  002C40  D7FE               	goto	l108
  6270                           
  6271                           ;main.c: 194: ADCON0bits.ADON=0;
  6272  002C42  90C2               	bcf	4034,0,c	;volatile
  6273                           
  6274                           ;main.c: 197: return ADRES;
  6275  002C44  CFC3 F001          	movff	4035,?_ADCRead	;volatile
  6276  002C48  CFC4 F002          	movff	4036,?_ADCRead+1	;volatile
  6277  002C4C  0012               	return		;funcret
  6278  002C4E                     __end_of_ADCRead:
  6279                           	opt stack 0
  6280                           tblptru	equ	0xFF8
  6281                           tblptrh	equ	0xFF7
  6282                           tblptrl	equ	0xFF6
  6283                           tablat	equ	0xFF5
  6284                           prodh	equ	0xFF4
  6285                           prodl	equ	0xFF3
  6286                           postinc0	equ	0xFEE
  6287                           wreg	equ	0xFE8
  6288                           postdec1	equ	0xFE5
  6289                           fsr1l	equ	0xFE1
  6290                           indf2	equ	0xFDF
  6291                           postinc2	equ	0xFDE
  6292                           postdec2	equ	0xFDD
  6293                           fsr2h	equ	0xFDA
  6294                           fsr2l	equ	0xFD9
  6295                           status	equ	0xFD8
  6296                           
  6297 ;; *************** function _config_adc *****************
  6298 ;; Defined at:
  6299 ;;		line 203 in file "main.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;		None
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;		None
  6304 ;; Return value:  Size  Location     Type
  6305 ;;                  1    wreg      void 
  6306 ;; Registers used:
  6307 ;;		wreg, status,2
  6308 ;; Tracked objects:
  6309 ;;		On entry : 0/0
  6310 ;;		On exit  : 0/0
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6317 ;;Total ram usage:        0 bytes
  6318 ;; Hardware stack levels used:    1
  6319 ;; This function calls:
  6320 ;;		Nothing
  6321 ;; This function is called by:
  6322 ;;		_main
  6323 ;; This function uses a non-reentrant model
  6324 ;;
  6325                           
  6326                           	psect	text28
  6327  002C4E                     __ptext28:
  6328                           	opt stack 0
  6329  002C4E                     _config_adc:
  6330                           	opt stack 30
  6331                           
  6332                           ;main.c: 205: ANCON0bits.ANSEL0 = 1;
  6333                           
  6334                           ;incstack = 0
  6335  002C4E  010F               	movlb	15	; () banked
  6336  002C50  815D               	bsf	93,0,b	;volatile
  6337                           
  6338                           ;main.c: 206: TRISAbits.TRISA0 = 1;
  6339  002C52  8092               	bsf	3986,0,c	;volatile
  6340                           
  6341                           ;main.c: 207: PORTAbits.RA0 = 0;
  6342  002C54  9080               	bcf	3968,0,c	;volatile
  6343                           
  6344                           ; BSR set to: 15
  6345                           ;main.c: 209: ADCON1bits.TRIGSEL =0b00;
  6346  002C56  0E3F               	movlw	-193
  6347  002C58  16C1               	andwf	4033,f,c	;volatile
  6348                           
  6349                           ;main.c: 210: ADCON1bits.VCFG = 0b11;
  6350  002C5A  0E30               	movlw	48
  6351  002C5C  12C1               	iorwf	4033,f,c	;volatile
  6352                           
  6353                           ; BSR set to: 15
  6354                           ;main.c: 211: ADCON1bits.VNCFG =0b0;
  6355  002C5E  96C1               	bcf	4033,3,c	;volatile
  6356                           
  6357                           ; BSR set to: 15
  6358                           ;main.c: 212: ADCON1bits.CHSN =0b000;
  6359  002C60  90C1               	bcf	4033,0,c	;volatile
  6360  002C62  92C1               	bcf	4033,1,c	;volatile
  6361  002C64  94C1               	bcf	4033,2,c	;volatile
  6362                           
  6363                           ; BSR set to: 15
  6364                           ;main.c: 215: ADCON2bits.ADFM = 0b1;
  6365  002C66  8EC0               	bsf	4032,7,c	;volatile
  6366                           
  6367                           ;main.c: 216: ADCON2bits.ACQT = 0b001;
  6368  002C68  50C0               	movf	4032,w,c	;volatile
  6369  002C6A  0BC7               	andlw	-57
  6370  002C6C  0908               	iorlw	8
  6371  002C6E  6EC0               	movwf	4032,c	;volatile
  6372                           
  6373                           ;main.c: 217: ADCON2bits.ADCS = 0b100;
  6374  002C70  50C0               	movf	4032,w,c	;volatile
  6375  002C72  0BF8               	andlw	-8
  6376  002C74  0904               	iorlw	4
  6377  002C76  6EC0               	movwf	4032,c	;volatile
  6378                           
  6379                           ; BSR set to: 15
  6380                           ;main.c: 220: ADCON0bits.ADON = 1;
  6381  002C78  80C2               	bsf	4034,0,c	;volatile
  6382                           
  6383                           ; BSR set to: 15
  6384  002C7A  0012               	return		;funcret
  6385  002C7C                     __end_of_config_adc:
  6386                           	opt stack 0
  6387                           tblptru	equ	0xFF8
  6388                           tblptrh	equ	0xFF7
  6389                           tblptrl	equ	0xFF6
  6390                           tablat	equ	0xFF5
  6391                           prodh	equ	0xFF4
  6392                           prodl	equ	0xFF3
  6393                           postinc0	equ	0xFEE
  6394                           wreg	equ	0xFE8
  6395                           postdec1	equ	0xFE5
  6396                           fsr1l	equ	0xFE1
  6397                           indf2	equ	0xFDF
  6398                           postinc2	equ	0xFDE
  6399                           postdec2	equ	0xFDD
  6400                           fsr2h	equ	0xFDA
  6401                           fsr2l	equ	0xFD9
  6402                           status	equ	0xFD8
  6403                           
  6404 ;; *************** function _UART1Init *****************
  6405 ;; Defined at:
  6406 ;;		line 172 in file "main.c"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;  baud_rate       4   14[COMRAM] long 
  6409 ;; Auto vars:     Size  Location     Type
  6410 ;;		None
  6411 ;; Return value:  Size  Location     Type
  6412 ;;                  1    wreg      void 
  6413 ;; Registers used:
  6414 ;;		wreg, status,2, status,0, cstack
  6415 ;; Tracked objects:
  6416 ;;		On entry : 0/0
  6417 ;;		On exit  : 0/0
  6418 ;;		Unchanged: 0/0
  6419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6420 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6421 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6423 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6424 ;;Total ram usage:        8 bytes
  6425 ;; Hardware stack levels used:    1
  6426 ;; Hardware stack levels required when called:    1
  6427 ;; This function calls:
  6428 ;;		___aldiv
  6429 ;; This function is called by:
  6430 ;;		_main
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           	psect	text29
  6435  0029EA                     __ptext29:
  6436                           	opt stack 0
  6437  0029EA                     _UART1Init:
  6438                           	opt stack 29
  6439                           
  6440                           ;main.c: 173: RCSTA1bits.SPEN = 1;
  6441                           
  6442                           ; BSR set to: 15
  6443                           ;incstack = 0
  6444  0029EA  8EAB               	bsf	4011,7,c	;volatile
  6445                           
  6446                           ;main.c: 174: TRISCbits.TRISC7 = 1;
  6447  0029EC  8E94               	bsf	3988,7,c	;volatile
  6448                           
  6449                           ;main.c: 175: RCSTA1bits.CREN = 1;
  6450  0029EE  88AB               	bsf	4011,4,c	;volatile
  6451                           
  6452                           ;main.c: 176: TRISCbits.TRISC6 = 0;
  6453  0029F0  9C94               	bcf	3988,6,c	;volatile
  6454                           
  6455                           ;main.c: 177: TXSTA1bits.TXEN = 1;
  6456  0029F2  8AAC               	bsf	4012,5,c	;volatile
  6457                           
  6458                           ;main.c: 178: TXSTA1bits.SYNC = 0;
  6459  0029F4  98AC               	bcf	4012,4,c	;volatile
  6460                           
  6461                           ;main.c: 179: TXSTA1bits.BRGH = 1;
  6462  0029F6  84AC               	bsf	4012,2,c	;volatile
  6463                           
  6464                           ;main.c: 180: BAUDCON1bits.BRG16 = 1;
  6465  0029F8  86A7               	bsf	4007,3,c	;volatile
  6466                           
  6467                           ;main.c: 181: SPBRG1 = (4000000/baud_rate/4)-1;
  6468  0029FA  C00F  F005         	movff	UART1Init@baud_rate,___aldiv@divisor
  6469  0029FE  C010  F006         	movff	UART1Init@baud_rate+1,___aldiv@divisor+1
  6470  002A02  C011  F007         	movff	UART1Init@baud_rate+2,___aldiv@divisor+2
  6471  002A06  C012  F008         	movff	UART1Init@baud_rate+3,___aldiv@divisor+3
  6472  002A0A  0E00               	movlw	0
  6473  002A0C  6E01               	movwf	___aldiv@dividend,c
  6474  002A0E  0E09               	movlw	9
  6475  002A10  6E02               	movwf	___aldiv@dividend+1,c
  6476  002A12  0E3D               	movlw	61
  6477  002A14  6E03               	movwf	___aldiv@dividend+2,c
  6478  002A16  0E00               	movlw	0
  6479  002A18  6E04               	movwf	___aldiv@dividend+3,c
  6480  002A1A  ECEB  F012         	call	___aldiv	;wreg free
  6481  002A1E  C001  F013         	movff	?___aldiv,_UART1Init$1791
  6482  002A22  C002  F014         	movff	?___aldiv+1,_UART1Init$1791+1
  6483  002A26  C003  F015         	movff	?___aldiv+2,_UART1Init$1791+2
  6484  002A2A  C004  F016         	movff	?___aldiv+3,_UART1Init$1791+3
  6485                           
  6486                           ;main.c: 181: SPBRG1 = (4000000/baud_rate/4)-1;
  6487  002A2E  C013  F001         	movff	_UART1Init$1791,___aldiv@dividend
  6488  002A32  C014  F002         	movff	_UART1Init$1791+1,___aldiv@dividend+1
  6489  002A36  C015  F003         	movff	_UART1Init$1791+2,___aldiv@dividend+2
  6490  002A3A  C016  F004         	movff	_UART1Init$1791+3,___aldiv@dividend+3
  6491  002A3E  0E04               	movlw	4
  6492  002A40  6E05               	movwf	___aldiv@divisor,c
  6493  002A42  0E00               	movlw	0
  6494  002A44  6E06               	movwf	___aldiv@divisor+1,c
  6495  002A46  0E00               	movlw	0
  6496  002A48  6E07               	movwf	___aldiv@divisor+2,c
  6497  002A4A  0E00               	movlw	0
  6498  002A4C  6E08               	movwf	___aldiv@divisor+3,c
  6499  002A4E  ECEB  F012         	call	___aldiv	;wreg free
  6500  002A52  0401               	decf	?___aldiv,w,c
  6501  002A54  6EAF               	movwf	4015,c	;volatile
  6502  002A56  0012               	return	
  6503  002A58                     __end_of_UART1Init:
  6504                           	opt stack 0
  6505                           tblptru	equ	0xFF8
  6506                           tblptrh	equ	0xFF7
  6507                           tblptrl	equ	0xFF6
  6508                           tablat	equ	0xFF5
  6509                           prodh	equ	0xFF4
  6510                           prodl	equ	0xFF3
  6511                           postinc0	equ	0xFEE
  6512                           wreg	equ	0xFE8
  6513                           postdec1	equ	0xFE5
  6514                           fsr1l	equ	0xFE1
  6515                           indf2	equ	0xFDF
  6516                           postinc2	equ	0xFDE
  6517                           postdec2	equ	0xFDD
  6518                           fsr2h	equ	0xFDA
  6519                           fsr2l	equ	0xFD9
  6520                           status	equ	0xFD8
  6521                           
  6522 ;; *************** function ___aldiv *****************
  6523 ;; Defined at:
  6524 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/aldiv.c"
  6525 ;; Parameters:    Size  Location     Type
  6526 ;;  dividend        4    0[COMRAM] long 
  6527 ;;  divisor         4    4[COMRAM] long 
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;  quotient        4   10[COMRAM] long 
  6530 ;;  sign            1    9[COMRAM] unsigned char 
  6531 ;;  counter         1    8[COMRAM] unsigned char 
  6532 ;; Return value:  Size  Location     Type
  6533 ;;                  4    0[COMRAM] long 
  6534 ;; Registers used:
  6535 ;;		wreg, status,2, status,0
  6536 ;; Tracked objects:
  6537 ;;		On entry : 0/0
  6538 ;;		On exit  : 0/0
  6539 ;;		Unchanged: 0/0
  6540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6541 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6542 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6544 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6545 ;;Total ram usage:       14 bytes
  6546 ;; Hardware stack levels used:    1
  6547 ;; This function calls:
  6548 ;;		Nothing
  6549 ;; This function is called by:
  6550 ;;		_UART1Init
  6551 ;; This function uses a non-reentrant model
  6552 ;;
  6553                           
  6554                           	psect	text30
  6555  0025D6                     __ptext30:
  6556                           	opt stack 0
  6557  0025D6                     ___aldiv:
  6558                           	opt stack 29
  6559                           
  6560                           ;incstack = 0
  6561  0025D6  0E00               	movlw	0
  6562  0025D8  6E0A               	movwf	___aldiv@sign,c
  6563  0025DA  AE08               	btfss	___aldiv@divisor+3,7,c
  6564  0025DC  D00A               	goto	l3020
  6565  0025DE  1E08               	comf	___aldiv@divisor+3,f,c
  6566  0025E0  1E07               	comf	___aldiv@divisor+2,f,c
  6567  0025E2  1E06               	comf	___aldiv@divisor+1,f,c
  6568  0025E4  6C05               	negf	___aldiv@divisor,c
  6569  0025E6  0E00               	movlw	0
  6570  0025E8  2206               	addwfc	___aldiv@divisor+1,f,c
  6571  0025EA  2207               	addwfc	___aldiv@divisor+2,f,c
  6572  0025EC  2208               	addwfc	___aldiv@divisor+3,f,c
  6573  0025EE  0E01               	movlw	1
  6574  0025F0  6E0A               	movwf	___aldiv@sign,c
  6575  0025F2                     l3020:
  6576  0025F2  AE04               	btfss	___aldiv@dividend+3,7,c
  6577  0025F4  D00A               	goto	l3026
  6578  0025F6  1E04               	comf	___aldiv@dividend+3,f,c
  6579  0025F8  1E03               	comf	___aldiv@dividend+2,f,c
  6580  0025FA  1E02               	comf	___aldiv@dividend+1,f,c
  6581  0025FC  6C01               	negf	___aldiv@dividend,c
  6582  0025FE  0E00               	movlw	0
  6583  002600  2202               	addwfc	___aldiv@dividend+1,f,c
  6584  002602  2203               	addwfc	___aldiv@dividend+2,f,c
  6585  002604  2204               	addwfc	___aldiv@dividend+3,f,c
  6586  002606  0E01               	movlw	1
  6587  002608  1A0A               	xorwf	___aldiv@sign,f,c
  6588  00260A                     l3026:
  6589  00260A  0E00               	movlw	0
  6590  00260C  6E0B               	movwf	___aldiv@quotient,c
  6591  00260E  0E00               	movlw	0
  6592  002610  6E0C               	movwf	___aldiv@quotient+1,c
  6593  002612  0E00               	movlw	0
  6594  002614  6E0D               	movwf	___aldiv@quotient+2,c
  6595  002616  0E00               	movlw	0
  6596  002618  6E0E               	movwf	___aldiv@quotient+3,c
  6597  00261A  5005               	movf	___aldiv@divisor,w,c
  6598  00261C  1006               	iorwf	___aldiv@divisor+1,w,c
  6599  00261E  1007               	iorwf	___aldiv@divisor+2,w,c
  6600  002620  1008               	iorwf	___aldiv@divisor+3,w,c
  6601  002622  B4D8               	btfsc	status,2,c
  6602  002624  D02A               	goto	l3048
  6603  002626  0E01               	movlw	1
  6604  002628  6E09               	movwf	___aldiv@counter,c
  6605  00262A  D006               	goto	l3034
  6606  00262C                     l3032:
  6607  00262C  90D8               	bcf	status,0,c
  6608  00262E  3605               	rlcf	___aldiv@divisor,f,c
  6609  002630  3606               	rlcf	___aldiv@divisor+1,f,c
  6610  002632  3607               	rlcf	___aldiv@divisor+2,f,c
  6611  002634  3608               	rlcf	___aldiv@divisor+3,f,c
  6612  002636  2A09               	incf	___aldiv@counter,f,c
  6613  002638                     l3034:
  6614  002638  AE08               	btfss	___aldiv@divisor+3,7,c
  6615  00263A  D7F8               	goto	l3032
  6616  00263C                     l3036:
  6617  00263C  90D8               	bcf	status,0,c
  6618  00263E  360B               	rlcf	___aldiv@quotient,f,c
  6619  002640  360C               	rlcf	___aldiv@quotient+1,f,c
  6620  002642  360D               	rlcf	___aldiv@quotient+2,f,c
  6621  002644  360E               	rlcf	___aldiv@quotient+3,f,c
  6622  002646  5005               	movf	___aldiv@divisor,w,c
  6623  002648  5C01               	subwf	___aldiv@dividend,w,c
  6624  00264A  5006               	movf	___aldiv@divisor+1,w,c
  6625  00264C  5802               	subwfb	___aldiv@dividend+1,w,c
  6626  00264E  5007               	movf	___aldiv@divisor+2,w,c
  6627  002650  5803               	subwfb	___aldiv@dividend+2,w,c
  6628  002652  5008               	movf	___aldiv@divisor+3,w,c
  6629  002654  5804               	subwfb	___aldiv@dividend+3,w,c
  6630  002656  A0D8               	btfss	status,0,c
  6631  002658  D009               	goto	l3044
  6632  00265A  5005               	movf	___aldiv@divisor,w,c
  6633  00265C  5E01               	subwf	___aldiv@dividend,f,c
  6634  00265E  5006               	movf	___aldiv@divisor+1,w,c
  6635  002660  5A02               	subwfb	___aldiv@dividend+1,f,c
  6636  002662  5007               	movf	___aldiv@divisor+2,w,c
  6637  002664  5A03               	subwfb	___aldiv@dividend+2,f,c
  6638  002666  5008               	movf	___aldiv@divisor+3,w,c
  6639  002668  5A04               	subwfb	___aldiv@dividend+3,f,c
  6640  00266A  800B               	bsf	___aldiv@quotient,0,c
  6641  00266C                     l3044:
  6642  00266C  90D8               	bcf	status,0,c
  6643  00266E  3208               	rrcf	___aldiv@divisor+3,f,c
  6644  002670  3207               	rrcf	___aldiv@divisor+2,f,c
  6645  002672  3206               	rrcf	___aldiv@divisor+1,f,c
  6646  002674  3205               	rrcf	___aldiv@divisor,f,c
  6647  002676  2E09               	decfsz	___aldiv@counter,f,c
  6648  002678  D7E1               	goto	l3036
  6649  00267A                     l3048:
  6650  00267A  500A               	movf	___aldiv@sign,w,c
  6651  00267C  B4D8               	btfsc	status,2,c
  6652  00267E  D008               	goto	l3052
  6653  002680  1E0E               	comf	___aldiv@quotient+3,f,c
  6654  002682  1E0D               	comf	___aldiv@quotient+2,f,c
  6655  002684  1E0C               	comf	___aldiv@quotient+1,f,c
  6656  002686  6C0B               	negf	___aldiv@quotient,c
  6657  002688  0E00               	movlw	0
  6658  00268A  220C               	addwfc	___aldiv@quotient+1,f,c
  6659  00268C  220D               	addwfc	___aldiv@quotient+2,f,c
  6660  00268E  220E               	addwfc	___aldiv@quotient+3,f,c
  6661  002690                     l3052:
  6662  002690  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  6663  002694  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  6664  002698  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  6665  00269C  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  6666  0026A0  0012               	return	
  6667  0026A2                     __end_of___aldiv:
  6668                           	opt stack 0
  6669                           tblptru	equ	0xFF8
  6670                           tblptrh	equ	0xFF7
  6671                           tblptrl	equ	0xFF6
  6672                           tablat	equ	0xFF5
  6673                           prodh	equ	0xFF4
  6674                           prodl	equ	0xFF3
  6675                           postinc0	equ	0xFEE
  6676                           wreg	equ	0xFE8
  6677                           postdec1	equ	0xFE5
  6678                           fsr1l	equ	0xFE1
  6679                           indf2	equ	0xFDF
  6680                           postinc2	equ	0xFDE
  6681                           postdec2	equ	0xFDD
  6682                           fsr2h	equ	0xFDA
  6683                           fsr2l	equ	0xFD9
  6684                           status	equ	0xFD8
  6685                           
  6686 ;; *************** function _Heartbeat *****************
  6687 ;; Defined at:
  6688 ;;		line 112 in file "main.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;		None
  6691 ;; Auto vars:     Size  Location     Type
  6692 ;;		None
  6693 ;; Return value:  Size  Location     Type
  6694 ;;                  1    wreg      void 
  6695 ;; Registers used:
  6696 ;;		wreg, status,2, status,0
  6697 ;; Tracked objects:
  6698 ;;		On entry : 0/0
  6699 ;;		On exit  : 0/0
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6706 ;;Total ram usage:        0 bytes
  6707 ;; Hardware stack levels used:    1
  6708 ;; This function calls:
  6709 ;;		Nothing
  6710 ;; This function is called by:
  6711 ;;		_main
  6712 ;; This function uses a non-reentrant model
  6713 ;;
  6714                           
  6715                           	psect	text31
  6716  002CEE                     __ptext31:
  6717                           	opt stack 0
  6718  002CEE                     _Heartbeat:
  6719                           	opt stack 30
  6720                           
  6721                           ;main.c: 115: if (heartbeatCount < 255)
  6722                           
  6723                           ;incstack = 0
  6724  002CEE  BE53               	btfsc	_heartbeatCount+1,7,c
  6725  002CF0  D005               	goto	l3126
  6726  002CF2  5053               	movf	_heartbeatCount+1,w,c
  6727  002CF4  E106               	bnz	l3128
  6728  002CF6  2852               	incf	_heartbeatCount,w,c
  6729  002CF8  B0D8               	btfsc	status,0,c
  6730  002CFA  D003               	goto	l3128
  6731  002CFC                     l3126:
  6732                           
  6733                           ;main.c: 116: {
  6734                           ;main.c: 117: heartbeatCount++;
  6735  002CFC  4A52               	infsnz	_heartbeatCount,f,c
  6736  002CFE  2A53               	incf	_heartbeatCount+1,f,c
  6737                           
  6738                           ;main.c: 118: }
  6739  002D00  0012               	return	
  6740  002D02                     l3128:
  6741                           
  6742                           ;main.c: 119: else
  6743                           ;main.c: 120: {
  6744                           ;main.c: 121: heartbeatCount = 0;
  6745  002D02  0E00               	movlw	0
  6746  002D04  6E53               	movwf	_heartbeatCount+1,c
  6747  002D06  0E00               	movlw	0
  6748  002D08  6E52               	movwf	_heartbeatCount,c
  6749                           
  6750                           ;main.c: 122: PORTBbits.RB4 ^= 1;
  6751  002D0A  7881               	btg	3969,4,c	;volatile
  6752                           
  6753                           ;main.c: 123: PORTBbits.RB5 ^= 1;
  6754  002D0C  7A81               	btg	3969,5,c	;volatile
  6755                           
  6756                           ;main.c: 125: PORTBbits.RB6 ^= 1;
  6757  002D0E  7C81               	btg	3969,6,c	;volatile
  6758                           
  6759                           ;main.c: 126: PORTBbits.RB7 ^= 1;
  6760  002D10  7E81               	btg	3969,7,c	;volatile
  6761  002D12  0012               	return	
  6762  002D14                     __end_of_Heartbeat:
  6763                           	opt stack 0
  6764                           tblptru	equ	0xFF8
  6765                           tblptrh	equ	0xFF7
  6766                           tblptrl	equ	0xFF6
  6767                           tablat	equ	0xFF5
  6768                           prodh	equ	0xFF4
  6769                           prodl	equ	0xFF3
  6770                           postinc0	equ	0xFEE
  6771                           wreg	equ	0xFE8
  6772                           postdec1	equ	0xFE5
  6773                           fsr1l	equ	0xFE1
  6774                           indf2	equ	0xFDF
  6775                           postinc2	equ	0xFDE
  6776                           postdec2	equ	0xFDD
  6777                           fsr2h	equ	0xFDA
  6778                           fsr2l	equ	0xFD9
  6779                           status	equ	0xFD8
  6780                           tblptru	equ	0xFF8
  6781                           tblptrh	equ	0xFF7
  6782                           tblptrl	equ	0xFF6
  6783                           tablat	equ	0xFF5
  6784                           prodh	equ	0xFF4
  6785                           prodl	equ	0xFF3
  6786                           postinc0	equ	0xFEE
  6787                           wreg	equ	0xFE8
  6788                           postdec1	equ	0xFE5
  6789                           fsr1l	equ	0xFE1
  6790                           indf2	equ	0xFDF
  6791                           postinc2	equ	0xFDE
  6792                           postdec2	equ	0xFDD
  6793                           fsr2h	equ	0xFDA
  6794                           fsr2l	equ	0xFD9
  6795                           status	equ	0xFD8
  6796                           
  6797                           	psect	rparam
  6798  0000                     tblptru	equ	0xFF8
  6799                           tblptrh	equ	0xFF7
  6800                           tblptrl	equ	0xFF6
  6801                           tablat	equ	0xFF5
  6802                           prodh	equ	0xFF4
  6803                           prodl	equ	0xFF3
  6804                           postinc0	equ	0xFEE
  6805                           wreg	equ	0xFE8
  6806                           postdec1	equ	0xFE5
  6807                           fsr1l	equ	0xFE1
  6808                           indf2	equ	0xFDF
  6809                           postinc2	equ	0xFDE
  6810                           postdec2	equ	0xFDD
  6811                           fsr2h	equ	0xFDA
  6812                           fsr2l	equ	0xFD9
  6813                           status	equ	0xFD8


Data Sizes:
    Strings     17
    Constant    118
    Data        64
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     76      94
    BANK0           160     25     121
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    puts1USART@data	PTR unsigned char  size(2) Largest target is 49
		 -> Txdata(BANK0[49]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__returnString	PTR unsigned char  size(2) Largest target is 4
		 -> returnString@processedString(BANK0[4]), 


Critical Paths under _main in COMRAM

    _puts1USART->_Write1USART
    _do_voltage->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___lwtoft->___ftpack
    ___ftdiv->___ftmul
    _UART1Init->___aldiv

Critical Paths under _main in BANK0

    _do_voltage->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   61976
                                             74 COMRAM     2     2      0
                          _Heartbeat
                          _UART1Init
                         _config_adc
                         _do_voltage
                         _puts1USART
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _puts1USART                                           2     0      2     142
                                              1 COMRAM     2     0      2
                        _Write1USART
 ---------------------------------------------------------------------------------
 (2) _Write1USART                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _do_voltage                                           0     0      0   61108
                            _ADCRead
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              42    37      5   50161
                                             63 COMRAM    11     6      5
                                              0 BANK0     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   12105
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   11907
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2895
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5237
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     480
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2603
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3063
                                             35 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              3     1      2      44
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _config_adc                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART1Init                                            8     4      4     725
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _Heartbeat                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Heartbeat
   _UART1Init
     ___aldiv
   _config_adc
   _do_voltage
     _ADCRead
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _putch
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _puts1USART
     _Write1USART
   _setup

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     19      79       5       75.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4C      5E       1       98.9%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D7       6        0.0%
DATA                 0      0      D7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Jan  9 21:07:54 2018

               ___awdiv@sign 000C          ___wmul@multiplicand 0011                  __CFG_BORV$3 000000  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                 ___ftadd@exp1 0039                 ___ftadd@exp2 0038  
               ___ftadd@sign 0037                          l108 2C3E                          l132 2D8E  
                        l124 2C0C                          l304 15CE                          l336 2CA2  
                        l620 1F70                          l631 2020                          l640 203C  
                        l616 1F46                          l561 22F6                          l651 25A4  
                        l740 2968                          l750 2AAC                          l593 2730  
                        l665 21CE                          l690 2D2A                          l658 2140  
                        l659 2168                 __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000  
            __end_of_ADCRead 2C4E                 ___awmod@sign 0006                          wreg 000FE8  
                 _TXSTA1bits 000FAC                 __CFG_FOSC$XT 000000           UART1Init@baud_rate 000F  
               ___ftdiv@cntr 002D                 ___ftdiv@sign 0032                         l2210 26E8  
                       l2202 26B2                         l3002 18AE                         l3010 2D86  
                       l3020 25F2                         l2214 26FE                         l2206 26C0  
                       l3032 262C                         l2216 271C                         l2208 26CA  
                       l3034 2638                         l3026 260A                         l2218 2726  
                       l2306 2088                         l2410 298E                         l2322 2358  
                       l3052 2690                         l3044 266C                         l3036 263C  
                       l2420 29B0                         l2340 239A                         l2316 2330  
                       l3126 2CFC                         l3062 2518                         l2270 1FAE  
                       l2254 1F7E                         l2422 29B4                         l2430 29D2  
                       l2414 299A                         l2350 23C2                         l2510 2D72  
                       l3128 2D02                         l3048 267A                         l2280 1FE4  
                       l2248 1F54                         l2520 20DA                         l2336 238A  
                       l3160 2764                         l2290 2018                         l2282 1FEC  
                       l2434 29E0                         l2426 29C8                         l2418 29A8  
                       l2346 23B2                         l3068 2540                         l2276 1FD0  
                       l2620 22CC                         l2604 228E                         l2380 28B6  
                       l2372 2898                         l2460 1EC2                         l2452 1E02  
                       l2278 1FDA                         l2702 24DE                         l2526 2106  
                       l2390 28D6                         l2382 28BA                         l2366 2888  
                       l3158 275E                         l3088 257E                         l2296 2058  
                       l2288 200E                         l2712 291A                         l2616 22BC  
                       l2560 21A4                         l2480 1AA4                         l2800 10B8  
                       l2642 2814                         l2634 2BB2                         l2714 2926  
                       l2626 22E4                         l2378 28AE                         l2394 28E0  
                       l2474 1A00                         l2810 10F2                         l2652 2870  
                       l2724 295A                         l2716 292A                         l2740 2A9E  
                       l2732 2A6A                         l2628 22F0                         l2556 2194  
                       l2492 1BF4                         l2484 1AC8                         l2804 10C8  
                       l2646 2844                         l2734 2A76                         l2582 221C  
                       l2566 21BC                         l2398 28EE                         l2910 14C0  
                       l2902 1498                         l2760 2C2C                         l2736 2A7A  
                       l2576 21FE                         l2568 21C8                         l2912 14D4  
                       l2816 110C                         l2808 10CE                         l2666 2428  
                       l2746 2AC4                         l2498 1C98                         l2930 15B0  
                       l2922 1580                         l2906 14B2                         l2850 125C  
                       l2842 11F4                         l2826 1152                         l2770 0F9A  
                       l2684 248E                         l2748 2AD0                         l2596 225E  
                       l2940 15F6                         l2924 158E                         l2916 14F4  
                       l2908 14B8                         l2860 12DE                         l2780 0FE2  
                       l2694 24B6                         l2950 1722                         l2934 15D2  
                       l2870 1346                         l2854 1282                         l2774 0FB0  
                       l2696 24C2                         l2688 249E                         l2952 1730  
                       l2944 1648                         l2928 159C                         l2880 13A4  
                       l2856 1298                         l2698 24C8                         l2866 1320  
                       l2858 12C8                         l2794 1068                         l2972 17C2  
                       l2964 1772                         l2956 173E                         l2884 140A  
                       l2788 1042                         l2990 1860                         l2886 1410  
                       l2958 174C                         l2798 10A2                         l2992 186A  
                       l2984 1822                         l2968 1796                         l2994 1876  
                       l2986 182C                         l2978 17EE                         l2898 1456  
                       l2998 1890                         STR_1 0F77                         u2131 2318  
                       u2151 2340                         u2411 20BE                         u3070 15C6  
                       u2431 20EA                         u3321 2500                         u3341 2528  
                       u2621 240C                         u2640 2446                         u1921 1F12  
                       u1931 1F26                 printf@tmpval 00CD                         u2645 243E  
                       u2880 1192                         u2885 1188                         _TXIF 007CF4  
                       _WPUB 000F5B                         _main 2BDC                 ___ftpack@arg 0001  
               ___ftpack@exp 0004                         fsr2h 000FDA                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         prodh 000FF4  
                       prodl 000FF3                         start 0000                __CFG_IESO$OFF 000000  
              __CFG_MCLRE$ON 000000                 ___ftmul@cntr 0022                 ___param_bank 000000  
               ___ftmul@sign 0023                 ___fttol@exp1 0039                 ___fttol@lval 0035  
               _BAUDCON1bits 000FA7              __end_of___aldiv 26A2                        ?_main 0001  
            __end_of___awdiv 28F8                        _ADRES 000FC3              __end_of___ftadd 20AE  
            __end_of___awmod 29EA              __end_of___ftdiv 25D6              __end_of___ftneg 2D38  
         __size_of_UART1Init 006E              __end_of___lldiv 297A              __end_of___ftmul 23FC  
            ___awdiv@divisor 0009              __end_of___llmod 2ABE              __end_of___ftsub 2BDC  
            __end_of___fttol 24F0              ___awdiv@counter 000B                        _RCREG 000FAE  
                      _SPBRG 000FAF                        _TRISB 000F93                        _TRISC 000F94  
                      _TXREG 000FAD                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000                 ___lltoft@exp 0011  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000  
            __end_of_dpowers 0F29                        _scale 18CC              __end_of_isdigit 2D7A  
              ___ftpack@sign 0005                        _setup 2C7C             _vUARTIntRxBuffer 00A0  
                      _putch 2D8C                        _volts 004D             _vUARTIntTxBuffer 00AA  
                      tablat 000FF5                        status 000FD8              __initialization 2B1A  
               __end_of_main 2C1A               puts1USART@data 0002                    ??_ADCRead 0003  
                     ??_main 004B                ___fttol@sign1 0034                __activetblptr 000002  
       __size_of__tdiv_to_l_ 0132           __size_of_Heartbeat 0026               __CFG_RETEN$OFF 000000  
                  ADCRead@ch 0003                       _ADCON0 000FC2             ___llmod@dividend 0001  
                     ?_scale 0024                       _ANCON1 000F5C             ___awdiv@dividend 0007  
                     ?_setup 0001                       ?_putch 0001             __end_of___ftpack 2750  
               _ADCStringVal 00B8             __end_of___lltoft 2B1A              __CFG_BBSIZ$BB2K 000000  
           __end_of___lwtoft 2D5C                       _SPBRG1 000FAF                       _TXREG1 000FAD  
          __end_of_UART1Init 2A58               __CFG_XINST$OFF 000000             __end_of__powers_ 0F50  
                     _Txdata 006F                       ___ftge 27E4                    ??___aldiv 0009  
                     ___wmul 2CC8                    ??___awdiv 000B                    ??___ftadd 0034  
             __CFG_STVREN$ON 000000                    ??___awmod 0005                    ??___ftdiv 002A  
                  ??___ftneg 0004                    ??___lldiv 0009                    ??___ftmul 001B  
                  ??___llmod 0009                    ??___ftsub 0040                    ??___fttol 002F  
                     _fround 1CBC                       clear_0 2B40                       clear_1 2B4C  
           ___awdiv@quotient 000D              ___awmod@divisor 0003              ___awmod@counter 0005  
                     _printf 0F8A        ___ftmul@f3_as_product 001F                    ??_isdigit 0001  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                   __accesstop 0060      __end_of__initialization 2B52  
                 ___ftadd@f1 002E                   ___ftadd@f2 0031                   ___ftge@ff1 0001  
                 ___ftge@ff2 0004                ___rparam_used 000001                   ___ftdiv@f1 0024  
                 ___ftdiv@f2 0027                   ___ftdiv@f3 002E                   ___ftneg@f1 0001  
          __end_of_Heartbeat 2D14                   ___ftmul@f1 0015                   ___ftmul@f2 0018  
                 ___ftsub@f1 003A                   ___ftsub@f2 003D                   ___fttol@f1 002B  
             __pcstackCOMRAM 0001                 __pidataBANK0 2B5C                   ___lltoft@c 0009  
              __end_of_scale 1CBC                __end_of_setup 2CA2                __end_of_putch 2D98  
                 ___lwtoft@c 0009                   __div_to_l_ 21E0              __div_to_l_@exp1 000C  
            __div_to_l_@cntr 000B                      ??_scale 0027              __div_to_l_@quot 0007  
                    ??_setup 0001                      ??_putch 0001                   __pbssBANK0 00A0  
            __CFG_PLLCFG$OFF 000000                ??_Write1USART 0001                __div_to_l_@f1 0001  
              __div_to_l_@f2 0004                      ?___ftge 0001                      ?___wmul 000F  
                    ?_fround 0024                      _ADCRead 2C1A                    ?___ftpack 0001  
                    ?_printf 0040                    ?___lltoft 0009                    ?___lwtoft 0009  
           __CFG_CANMX$PORTB 000000                   _config_adc 2C4E                   _do_voltage 2750  
            __CFG_PWRTEN$OFF 000000            __end_of__npowers_ 0F77                      __Hparam 0000  
                    _Newline 006C                   _scale$1794 0027                      __Lparam 0000  
        __end_of_Write1USART 2D8C                      ___aldiv 25D6              __size_of___ftge 0090  
                    ___awdiv 2874                      ___ftadd 1F02                      ___awmod 297A  
                    ___ftdiv 24F0                      ___ftneg 2D14                      ___lldiv 28F8  
            __size_of___wmul 0026                      ___ftmul 2308                      ___llmod 2A58  
                    ___ftsub 2B9C                      ___fttol 23FC  returnString@processedString 00BC  
               __psmallconst 0F00                      __pcinit 2B1A                   ??___ftpack 0006  
            __size_of_fround 0246                      __ramtop 0F00                   ??___lltoft 000D  
                    __ptext0 2BDC                      __ptext1 2C7C                      __ptext2 2CA2  
                    __ptext3 2D7A                      __ptext4 2750                      __ptext5 0F8A  
                    __ptext6 18CC                      __ptext7 2D8C                      __ptext8 2D5C  
                    __ptext9 1CBC              __size_of_printf 0942                   ??___lwtoft 000C  
                ?__div_to_l_ 0001                      _dpowers 0F01                      _isdigit 2D5C  
           ___awmod@dividend 0001           _vUARTIntRxBufRdPtr 0055             ___aldiv@dividend 0001  
                    _inttext 0060                      _newvals 005C            __CFG_MSSPMSK$MSK7 000000  
            _ADCStringValTwo 00B4           _vUARTIntRxBufWrPtr 0056                      _spacing 0068  
         __CFG_INTOSCSEL$LOW 000000         end_of_initialization 2B52           _vUARTIntTxBufRdPtr 0058  
         _vUARTIntTxBufWrPtr 0059                __Lmediumconst 0000              ___lldiv@divisor 0005  
            ___lldiv@counter 000D                    _UART1Init 29EA                    _RCSTAbits 000FAB  
                    printf@c 00D8                      printf@f 0040             ___aldiv@quotient 000B  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE               __tdiv_to_l_@f1 0001               __tdiv_to_l_@f2 0004  
              ??__tdiv_to_l_ 0007                    _PORTAbits 000F80                    _PORTBbits 000F81  
                 _puts1USART 2CA2                  ?_config_adc 0001                    _TRISAbits 000F92  
                ?_do_voltage 0001                    _TRISCbits 000F94            _heartbeatCountTwo 0050  
                _Write1USART 2D7A                  ___ftdiv@exp 0031                  printf@width 00CB  
                  _TXSTAbits 000FAC          __size_of__div_to_l_ 0128               _vUARTIntStatus 005B  
                ___ftmul@exp 001E                   ?_UART1Init 000F                    _Heartbeat 2CEE  
             __end_of___ftge 2874               __end_of___wmul 2CEE               __end_of_fround 1F02  
             __end_of_printf 18CC          start_initialization 2B1A          __end_of__tdiv_to_l_ 21E0  
            ___llmod@divisor 0005              ___llmod@counter 0009          __size_of_config_adc 002E  
        __size_of_do_voltage 0094                     ??___ftge 0007                     ??___wmul 0013  
                 ?_Heartbeat 0001                  __pdataBANK0 0060                     ??_fround 0027  
                   ?_ADCRead 0001                     ??_printf 0045                  ?_puts1USART 0002  
                 fround@prec 002D            __size_of___ftpack 00AE            __size_of___lltoft 005C  
                __pbssCOMRAM 004D            __size_of___lwtoft 0024                __pcstackBANK0 00C0  
               _isdigit$1419 0002                  ??_UART1Init 0013                     ?___aldiv 0001  
                   ?___awdiv 0007                     ?___ftadd 002E                     ?___awmod 0001  
                   ?___ftdiv 0024                     ?___ftneg 0001                     ?___lldiv 0001  
                   ?___ftmul 0015                     ?___llmod 0001                     ?___ftsub 003A  
                  __npowers_ 0F50                     ?___fttol 002B                  __tdiv_to_l_ 20AE  
             _heartbeatCount 0052                 ??__div_to_l_ 0007                  __smallconst 0F00  
                   ?_isdigit 0001                     _ADCValue 005D         _vUARTIntRxBufDataCnt 0057  
            Write1USART@data 0001               __size_of_scale 03F0               __size_of_setup 0026  
             __size_of_putch 000C              ___aldiv@divisor 0005              ___aldiv@counter 0009  
             ___wmul@product 0013                     _IPR1bits 000F9F                     _PIE1bits 000F9D  
        __size_of_puts1USART 0026                     _PIR1bits 000F9E           __end_of__div_to_l_ 2308  
                ??_Heartbeat 0001             __size_of_ADCRead 0034                   _ADCON0bits 000FC2  
                 _ADCON1bits 000FC1                   _ADCON2bits 000FC0            ___wmul@multiplier 000F  
           __CFG_SOSCSEL$DIG 000000                   printf@flag 00C9                   printf@fval 00D3  
                 printf@prec 00D6                 ??_config_adc 0001                 ??_do_voltage 004B  
       _vUARTIntTxBufDataCnt 005A                    copy_data0 2B2E                 ?_Write1USART 0001  
                 _ANCON0bits 000F5D                     __Hrparam 0000                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000           __end_of_config_adc 2C7C           __end_of_do_voltage 27E4  
           __size_of___aldiv 00CC             __size_of___awdiv 0084             __size_of___ftadd 01AC  
           __size_of___awmod 0070             __size_of___ftdiv 00E6             __size_of___ftneg 0024  
           __size_of___lldiv 0082             __size_of___ftmul 00F4             __size_of___llmod 0066  
           __size_of___ftsub 0040             __size_of___fttol 00F4                     ___ftpack 26A2  
                _fround$1792 002A                  _fround$1793 0027                     ___lltoft 2ABE  
                   ___lwtoft 2D38             __size_of_isdigit 001E                     __ptext10 2CC8  
                   __ptext11 2308                     __ptext20 2B9C                     __ptext12 297A  
                   __ptext21 1F02                     __ptext13 2874                     __ptext30 25D6  
                   __ptext22 2D14                     __ptext14 20AE                     __ptext31 2CEE  
                   __ptext23 27E4                     __ptext15 21E0                     __ptext24 2D38  
                   __ptext16 2ABE                     __ptext25 24F0                     __ptext17 2A58  
                   __ptext26 26A2                     __ptext18 28F8                     __ptext27 2C1A  
                   __ptext19 23FC                     __ptext28 2C4E                     __ptext29 29EA  
                   __powers_ 0F29                __size_of_main 003E                    printf@exp 00D1  
                  printf@val 00C5                     main@vale 004B                 ??_puts1USART 0004  
              _USART1_Status 0054                    putch@data 0001           __CFG_WDTEN$SWDTDIS 000000  
                 _INTCONbits 000FF2                     isdigit@c 0003                     scale@scl 002A  
           __tdiv_to_l_@exp1 000F             __tdiv_to_l_@cntr 000E             __tdiv_to_l_@quot 000A  
           ___lldiv@dividend 0001                   _RCSTA1bits 000FAB           __end_of_puts1USART 2CC8  
                   printf@ap 00C3           __CFG_WDTPS$1048576 000000                 ?__tdiv_to_l_ 0001  
                _printf$1795 00C0             ___lldiv@quotient 0009                 ___aldiv@sign 000A  
        __CFG_BORPWR$ZPBORMV 000000               _UART1Init$1791 0013         __size_of_Write1USART 0012  
